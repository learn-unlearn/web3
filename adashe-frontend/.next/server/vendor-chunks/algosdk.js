"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/algosdk";
exports.ids = ["vendor-chunks/algosdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/abi_type.js":
/*!*******************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/abi_type.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable no-bitwise */\n/* eslint-disable no-use-before-define */\n/* eslint-disable class-methods-use-this */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABITupleType = exports.ABIArrayDynamicType = exports.ABIArrayStaticType = exports.ABIStringType = exports.ABIByteType = exports.ABIBoolType = exports.ABIAddressType = exports.ABIUfixedType = exports.ABIUintType = exports.ABIType = exports.LENGTH_ENCODE_BYTE_SIZE = exports.SINGLE_BOOL_SIZE = exports.SINGLE_BYTE_SIZE = exports.ADDR_BYTE_SIZE = exports.MAX_LEN = void 0;\n/**\n    //ABI-Types: uint<N>: An N-bit unsigned integer (8 <= N <= 512 and N % 8 = 0).\n    // | byte (alias for uint8)\n    // | ufixed <N> x <M> (8 <= N <= 512, N % 8 = 0, and 0 < M <= 160)\n    // | bool\n    // | address (alias for byte[32])\n    // | <type> [<N>]\n    // | <type> []\n    // | string\n    // | (T1, ..., Tn)\n*/\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst address_1 = __webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\");\nconst bigint_1 = __webpack_require__(/*! ../encoding/bigint */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/bigint.js\");\nconst utils_1 = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\");\nexports.MAX_LEN = 2 ** 16 - 1;\nexports.ADDR_BYTE_SIZE = 32;\nexports.SINGLE_BYTE_SIZE = 1;\nexports.SINGLE_BOOL_SIZE = 1;\nexports.LENGTH_ENCODE_BYTE_SIZE = 2;\nconst staticArrayRegexp = /^([a-z\\d[\\](),]+)\\[(0|[1-9][\\d]*)]$/;\nconst ufixedRegexp = /^ufixed([1-9][\\d]*)x([1-9][\\d]*)$/;\nclass ABIType {\n    // De-serializes the ABI type from a string using the ABI specs\n    static from(str) {\n        if (str.endsWith('[]')) {\n            const arrayArgType = ABIType.from(str.slice(0, str.length - 2));\n            return new ABIArrayDynamicType(arrayArgType);\n        }\n        if (str.endsWith(']')) {\n            const stringMatches = str.match(staticArrayRegexp);\n            // Match the string itself, array element type, then array length\n            if (stringMatches.length !== 3) {\n                throw new Error(`malformed static array string: ${str}`);\n            }\n            // Parse static array using regex\n            const arrayLengthStr = stringMatches[2];\n            const arrayLength = parseInt(arrayLengthStr, 10);\n            if (arrayLength > exports.MAX_LEN) {\n                throw new Error(`array length exceeds limit ${exports.MAX_LEN}`);\n            }\n            // Parse the array element type\n            const arrayType = ABIType.from(stringMatches[1]);\n            return new ABIArrayStaticType(arrayType, arrayLength);\n        }\n        if (str.startsWith('uint')) {\n            // Checks if the parsed number contains only digits, no whitespaces\n            const digitsOnly = (string) => [...string].every((c) => '0123456789'.includes(c));\n            const typeSizeStr = str.slice(4, str.length);\n            if (!digitsOnly(typeSizeStr)) {\n                throw new Error(`malformed uint string: ${typeSizeStr}`);\n            }\n            const typeSize = parseInt(typeSizeStr, 10);\n            if (typeSize > exports.MAX_LEN) {\n                throw new Error(`malformed uint string: ${typeSize}`);\n            }\n            return new ABIUintType(typeSize);\n        }\n        if (str === 'byte') {\n            return new ABIByteType();\n        }\n        if (str.startsWith('ufixed')) {\n            const stringMatches = str.match(ufixedRegexp);\n            if (stringMatches.length !== 3) {\n                throw new Error(`malformed ufixed type: ${str}`);\n            }\n            const ufixedSize = parseInt(stringMatches[1], 10);\n            const ufixedPrecision = parseInt(stringMatches[2], 10);\n            return new ABIUfixedType(ufixedSize, ufixedPrecision);\n        }\n        if (str === 'bool') {\n            return new ABIBoolType();\n        }\n        if (str === 'address') {\n            return new ABIAddressType();\n        }\n        if (str === 'string') {\n            return new ABIStringType();\n        }\n        if (str.length >= 2 && str[0] === '(' && str[str.length - 1] === ')') {\n            const tupleContent = ABITupleType.parseTupleContent(str.slice(1, str.length - 1));\n            const tupleTypes = [];\n            for (let i = 0; i < tupleContent.length; i++) {\n                const ti = ABIType.from(tupleContent[i]);\n                tupleTypes.push(ti);\n            }\n            return new ABITupleType(tupleTypes);\n        }\n        throw new Error(`cannot convert a string ${str} to an ABI type`);\n    }\n}\nexports.ABIType = ABIType;\nclass ABIUintType extends ABIType {\n    constructor(size) {\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported uint type bitSize: ${size}`);\n        }\n        this.bitSize = size;\n    }\n    toString() {\n        return `uint${this.bitSize}`;\n    }\n    equals(other) {\n        return other instanceof ABIUintType && this.bitSize === other.bitSize;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== 'bigint' && typeof value !== 'number') {\n            throw new Error(`Cannot encode value as uint${this.bitSize}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size uint${this.bitSize}`);\n        }\n        if (typeof value === 'number' && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0, bigint_1.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a uint${this.bitSize}`);\n        }\n        return (0, bigint_1.bytesToBigInt)(byteString);\n    }\n}\nexports.ABIUintType = ABIUintType;\nclass ABIUfixedType extends ABIType {\n    constructor(size, denominator) {\n        super();\n        if (size % 8 !== 0 || size < 8 || size > 512) {\n            throw new Error(`unsupported ufixed type bitSize: ${size}`);\n        }\n        if (denominator > 160 || denominator < 1) {\n            throw new Error(`unsupported ufixed type precision: ${denominator}`);\n        }\n        this.bitSize = size;\n        this.precision = denominator;\n    }\n    toString() {\n        return `ufixed${this.bitSize}x${this.precision}`;\n    }\n    equals(other) {\n        return (other instanceof ABIUfixedType &&\n            this.bitSize === other.bitSize &&\n            this.precision === other.precision);\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return this.bitSize / 8;\n    }\n    encode(value) {\n        if (typeof value !== 'bigint' && typeof value !== 'number') {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value >= BigInt(2 ** this.bitSize) || value < BigInt(0)) {\n            throw new Error(`${value} is not a non-negative int or too big to fit in size ${this.toString()}`);\n        }\n        if (typeof value === 'number' && !Number.isSafeInteger(value)) {\n            throw new Error(`${value} should be converted into a BigInt before it is encoded`);\n        }\n        return (0, bigint_1.bigIntToBytes)(value, this.bitSize / 8);\n    }\n    decode(byteString) {\n        if (byteString.length !== this.bitSize / 8) {\n            throw new Error(`byte string must correspond to a ${this.toString()}`);\n        }\n        return (0, bigint_1.bytesToBigInt)(byteString);\n    }\n}\nexports.ABIUfixedType = ABIUfixedType;\nclass ABIAddressType extends ABIType {\n    toString() {\n        return 'address';\n    }\n    equals(other) {\n        return other instanceof ABIAddressType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return exports.ADDR_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (typeof value === 'string') {\n            const decodedAddress = (0, address_1.decodeAddress)(value);\n            return decodedAddress.publicKey;\n        }\n        // Return the address if it is already in bytes\n        if (value.byteLength !== 32) {\n            throw new Error(`byte string must be 32 bytes long for an address`);\n        }\n        return value;\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 32) {\n            throw new Error(`byte string must be 32 bytes long for an address`);\n        }\n        return (0, address_1.encodeAddress)(byteString);\n    }\n}\nexports.ABIAddressType = ABIAddressType;\nclass ABIBoolType extends ABIType {\n    toString() {\n        return 'bool';\n    }\n    equals(other) {\n        return other instanceof ABIBoolType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return exports.SINGLE_BOOL_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Cannot encode value as bool: ${value}`);\n        }\n        if (value) {\n            return new Uint8Array([128]);\n        }\n        return new Uint8Array([0]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`bool string must be 1 byte long`);\n        }\n        const value = byteString[0];\n        if (value === 128) {\n            return true;\n        }\n        if (value === 0) {\n            return false;\n        }\n        throw new Error(`boolean could not be decoded from the byte string`);\n    }\n}\nexports.ABIBoolType = ABIBoolType;\nclass ABIByteType extends ABIType {\n    toString() {\n        return 'byte';\n    }\n    equals(other) {\n        return other instanceof ABIByteType;\n    }\n    isDynamic() {\n        return false;\n    }\n    byteLen() {\n        return exports.SINGLE_BYTE_SIZE;\n    }\n    encode(value) {\n        if (typeof value !== 'number' && typeof value !== 'bigint') {\n            throw new Error(`Cannot encode value as byte: ${value}`);\n        }\n        if (typeof value === 'bigint') {\n            // eslint-disable-next-line no-param-reassign\n            value = Number(value);\n        }\n        if (value < 0 || value > 255) {\n            throw new Error(`${value} cannot be encoded into a byte`);\n        }\n        return new Uint8Array([value]);\n    }\n    decode(byteString) {\n        if (byteString.byteLength !== 1) {\n            throw new Error(`byte string must be 1 byte long`);\n        }\n        return byteString[0];\n    }\n}\nexports.ABIByteType = ABIByteType;\nclass ABIStringType extends ABIType {\n    toString() {\n        return 'string';\n    }\n    equals(other) {\n        return other instanceof ABIStringType;\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (typeof value !== 'string' && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as string: ${value}`);\n        }\n        const encodedBytes = buffer_1.Buffer.from(value);\n        const encodedLength = (0, bigint_1.bigIntToBytes)(encodedBytes.length, exports.LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = new Uint8Array(encodedBytes.length + exports.LENGTH_ENCODE_BYTE_SIZE);\n        mergedBytes.set(encodedLength);\n        mergedBytes.set(encodedBytes, exports.LENGTH_ENCODE_BYTE_SIZE);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        if (byteString.length < exports.LENGTH_ENCODE_BYTE_SIZE) {\n            throw new Error(`byte string is too short to be decoded. Actual length is ${byteString.length}, but expected at least ${exports.LENGTH_ENCODE_BYTE_SIZE}`);\n        }\n        const buf = buffer_1.Buffer.from(byteString);\n        const byteLength = buf.readUIntBE(0, exports.LENGTH_ENCODE_BYTE_SIZE);\n        const byteValue = byteString.slice(exports.LENGTH_ENCODE_BYTE_SIZE, byteString.length);\n        if (byteLength !== byteValue.length) {\n            throw new Error(`string length bytes do not match the actual length of string. Expected ${byteLength}, got ${byteValue.length}`);\n        }\n        return buffer_1.Buffer.from(byteValue).toString('utf-8');\n    }\n}\nexports.ABIStringType = ABIStringType;\nclass ABIArrayStaticType extends ABIType {\n    constructor(argType, arrayLength) {\n        super();\n        if (arrayLength < 0) {\n            throw new Error(`static array must have a non negative length: ${arrayLength}`);\n        }\n        this.childType = argType;\n        this.staticLength = arrayLength;\n    }\n    toString() {\n        return `${this.childType.toString()}[${this.staticLength}]`;\n    }\n    equals(other) {\n        return (other instanceof ABIArrayStaticType &&\n            this.staticLength === other.staticLength &&\n            this.childType.equals(other.childType));\n    }\n    isDynamic() {\n        return this.childType.isDynamic();\n    }\n    byteLen() {\n        if (this.childType.constructor === ABIBoolType) {\n            return Math.ceil(this.staticLength / 8);\n        }\n        return this.staticLength * this.childType.byteLen();\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        if (value.length !== this.staticLength) {\n            throw new Error(`Value array does not match static array length. Expected ${this.staticLength}, got ${value.length}`);\n        }\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.encode(value);\n    }\n    decode(byteString) {\n        const convertedTuple = this.toABITupleType();\n        return convertedTuple.decode(byteString);\n    }\n    toABITupleType() {\n        return new ABITupleType(Array(this.staticLength).fill(this.childType));\n    }\n}\nexports.ABIArrayStaticType = ABIArrayStaticType;\nclass ABIArrayDynamicType extends ABIType {\n    constructor(argType) {\n        super();\n        this.childType = argType;\n    }\n    toString() {\n        return `${this.childType.toString()}[]`;\n    }\n    equals(other) {\n        return (other instanceof ABIArrayDynamicType &&\n            this.childType.equals(other.childType));\n    }\n    isDynamic() {\n        return true;\n    }\n    byteLen() {\n        throw new Error(`${this.toString()} is a dynamic type`);\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const convertedTuple = this.toABITupleType(value.length);\n        const encodedTuple = convertedTuple.encode(value);\n        const encodedLength = (0, bigint_1.bigIntToBytes)(convertedTuple.childTypes.length, exports.LENGTH_ENCODE_BYTE_SIZE);\n        const mergedBytes = (0, utils_1.concatArrays)(encodedLength, encodedTuple);\n        return mergedBytes;\n    }\n    decode(byteString) {\n        const buf = buffer_1.Buffer.from(byteString);\n        const byteLength = buf.readUIntBE(0, exports.LENGTH_ENCODE_BYTE_SIZE);\n        const convertedTuple = this.toABITupleType(byteLength);\n        return convertedTuple.decode(byteString.slice(exports.LENGTH_ENCODE_BYTE_SIZE, byteString.length));\n    }\n    toABITupleType(length) {\n        return new ABITupleType(Array(length).fill(this.childType));\n    }\n}\nexports.ABIArrayDynamicType = ABIArrayDynamicType;\nclass ABITupleType extends ABIType {\n    constructor(argTypes) {\n        super();\n        if (argTypes.length >= exports.MAX_LEN) {\n            throw new Error('tuple type child type number larger than maximum uint16 error');\n        }\n        this.childTypes = argTypes;\n    }\n    toString() {\n        const typeStrings = [];\n        for (let i = 0; i < this.childTypes.length; i++) {\n            typeStrings[i] = this.childTypes[i].toString();\n        }\n        return `(${typeStrings.join(',')})`;\n    }\n    equals(other) {\n        return (other instanceof ABITupleType &&\n            this.childTypes.length === other.childTypes.length &&\n            this.childTypes.every((child, index) => child.equals(other.childTypes[index])));\n    }\n    isDynamic() {\n        const isDynamic = (child) => child.isDynamic();\n        return this.childTypes.some(isDynamic);\n    }\n    byteLen() {\n        let size = 0;\n        for (let i = 0; i < this.childTypes.length; i++) {\n            if (this.childTypes[i].constructor === ABIBoolType) {\n                const after = findBoolLR(this.childTypes, i, 1);\n                const boolNum = after + 1;\n                i += after;\n                size += Math.trunc((boolNum + 7) / 8);\n            }\n            else {\n                const childByteSize = this.childTypes[i].byteLen();\n                size += childByteSize;\n            }\n        }\n        return size;\n    }\n    encode(value) {\n        if (!Array.isArray(value) && !(value instanceof Uint8Array)) {\n            throw new Error(`Cannot encode value as ${this.toString()}: ${value}`);\n        }\n        const values = Array.from(value);\n        if (value.length > exports.MAX_LEN) {\n            throw new Error('length of tuple array should not exceed a uint16');\n        }\n        const tupleTypes = this.childTypes;\n        const heads = [];\n        const tails = [];\n        const isDynamicIndex = new Map();\n        let i = 0;\n        while (i < tupleTypes.length) {\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                // Head is not pre-determined for dynamic types; store a placeholder for now\n                isDynamicIndex.set(heads.length, true);\n                heads.push(new Uint8Array([0, 0]));\n                tails.push(tupleType.encode(values[i]));\n            }\n            else {\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(tupleTypes, i, -1);\n                    let after = findBoolLR(tupleTypes, i, 1);\n                    // Pack bytes to heads and tails\n                    if (before % 8 !== 0) {\n                        throw new Error('expected before index should have number of bool mod 8 equal 0');\n                    }\n                    after = Math.min(7, after);\n                    const compressedInt = compressMultipleBool(values.slice(i, i + after + 1));\n                    heads.push((0, bigint_1.bigIntToBytes)(compressedInt, 1));\n                    i += after;\n                }\n                else {\n                    const encodedTupleValue = tupleType.encode(values[i]);\n                    heads.push(encodedTupleValue);\n                }\n                isDynamicIndex.set(i, false);\n                tails.push(new Uint8Array());\n            }\n            i += 1;\n        }\n        // Adjust head lengths for dynamic types\n        let headLength = 0;\n        for (const headElement of heads) {\n            headLength += headElement.length;\n        }\n        // encode any placeholders for dynamic types\n        let tailLength = 0;\n        for (let j = 0; j < heads.length; j++) {\n            if (isDynamicIndex.get(j)) {\n                const headValue = headLength + tailLength;\n                if (headValue > exports.MAX_LEN) {\n                    throw new Error(`byte length of ${headValue} should not exceed a uint16`);\n                }\n                heads[j] = (0, bigint_1.bigIntToBytes)(headValue, exports.LENGTH_ENCODE_BYTE_SIZE);\n            }\n            tailLength += tails[j].length;\n        }\n        return (0, utils_1.concatArrays)(...heads, ...tails);\n    }\n    decode(byteString) {\n        const tupleTypes = this.childTypes;\n        const dynamicSegments = [];\n        const valuePartition = [];\n        let i = 0;\n        let iterIndex = 0;\n        const buf = buffer_1.Buffer.from(byteString);\n        while (i < tupleTypes.length) {\n            const tupleType = tupleTypes[i];\n            if (tupleType.isDynamic()) {\n                if (byteString.slice(iterIndex, byteString.length).length <\n                    exports.LENGTH_ENCODE_BYTE_SIZE) {\n                    throw new Error('dynamic type in tuple is too short to be decoded');\n                }\n                const dynamicIndex = buf.readUIntBE(iterIndex, exports.LENGTH_ENCODE_BYTE_SIZE);\n                if (dynamicSegments.length > 0) {\n                    dynamicSegments[dynamicSegments.length - 1].right = dynamicIndex;\n                    // Check that right side of segment is greater than the left side\n                    if (dynamicIndex < dynamicSegments[dynamicSegments.length - 1].left) {\n                        throw new Error('dynamic index segment miscalculation: left is greater than right index');\n                    }\n                }\n                // Since we do not know where the current dynamic element ends, put a placeholder and update later\n                const seg = {\n                    left: dynamicIndex,\n                    right: -1,\n                };\n                dynamicSegments.push(seg);\n                valuePartition.push(null);\n                iterIndex += exports.LENGTH_ENCODE_BYTE_SIZE;\n            }\n            else {\n                // eslint-disable-next-line no-lonely-if\n                if (tupleType.constructor === ABIBoolType) {\n                    const before = findBoolLR(this.childTypes, i, -1);\n                    let after = findBoolLR(this.childTypes, i, 1);\n                    if (before % 8 !== 0) {\n                        throw new Error('expected before bool number mod 8 === 0');\n                    }\n                    after = Math.min(7, after);\n                    // Parse bool in a byte to multiple byte strings\n                    for (let boolIndex = 0; boolIndex <= after; boolIndex++) {\n                        const boolMask = 0x80 >> boolIndex;\n                        if ((byteString[iterIndex] & boolMask) > 0) {\n                            valuePartition.push(new Uint8Array([128]));\n                        }\n                        else {\n                            valuePartition.push(new Uint8Array([0]));\n                        }\n                    }\n                    i += after;\n                    iterIndex += 1;\n                }\n                else {\n                    const currLen = tupleType.byteLen();\n                    valuePartition.push(byteString.slice(iterIndex, iterIndex + currLen));\n                    iterIndex += currLen;\n                }\n            }\n            if (i !== tupleTypes.length - 1 && iterIndex >= byteString.length) {\n                throw new Error('input byte not enough to decode');\n            }\n            i += 1;\n        }\n        if (dynamicSegments.length > 0) {\n            dynamicSegments[dynamicSegments.length - 1].right = byteString.length;\n            iterIndex = byteString.length;\n        }\n        if (iterIndex < byteString.length) {\n            throw new Error('input byte not fully consumed');\n        }\n        // Check segment indices are valid\n        // If the dynamic segment are not consecutive and well-ordered, we return error\n        for (let j = 0; j < dynamicSegments.length; j++) {\n            const seg = dynamicSegments[j];\n            if (seg.left > seg.right) {\n                throw new Error('dynamic segment should display a [l, r] space with l <= r');\n            }\n            if (j !== dynamicSegments.length - 1 &&\n                seg.right !== dynamicSegments[j + 1].left) {\n                throw new Error('dynamic segment should be consecutive');\n            }\n        }\n        // Check dynamic element partitions\n        let segIndex = 0;\n        for (let j = 0; j < tupleTypes.length; j++) {\n            if (tupleTypes[j].isDynamic()) {\n                valuePartition[j] = byteString.slice(dynamicSegments[segIndex].left, dynamicSegments[segIndex].right);\n                segIndex += 1;\n            }\n        }\n        // Decode each tuple element\n        const returnValues = [];\n        for (let j = 0; j < tupleTypes.length; j++) {\n            const valueTi = tupleTypes[j].decode(valuePartition[j]);\n            returnValues.push(valueTi);\n        }\n        return returnValues;\n    }\n    static parseTupleContent(str) {\n        if (str.length === 0) {\n            return [];\n        }\n        if (str.endsWith(',') || str.startsWith(',')) {\n            throw new Error('tuple string should not start with comma');\n        }\n        if (str.includes(',,')) {\n            throw new Error('tuple string should not have consecutive commas');\n        }\n        const tupleStrings = [];\n        let depth = 0;\n        let word = '';\n        for (const char of str) {\n            word += char;\n            if (char === '(') {\n                depth += 1;\n            }\n            else if (char === ')') {\n                depth -= 1;\n            }\n            else if (char === ',') {\n                // If the comma is at depth 0, then append the word as token.\n                if (depth === 0) {\n                    tupleStrings.push(word.slice(0, word.length - 1));\n                    word = '';\n                }\n            }\n        }\n        if (word.length !== 0) {\n            tupleStrings.push(word);\n        }\n        if (depth !== 0) {\n            throw new Error('tuple string has mismatched parentheses');\n        }\n        return tupleStrings;\n    }\n}\nexports.ABITupleType = ABITupleType;\n// compressMultipleBool compresses consecutive bool values into a byte in ABI tuple / array value.\nfunction compressMultipleBool(valueList) {\n    let res = 0;\n    if (valueList.length > 8) {\n        throw new Error('value list passed in should be no greater than length 8');\n    }\n    for (let i = 0; i < valueList.length; i++) {\n        const boolVal = valueList[i];\n        if (typeof boolVal !== 'boolean') {\n            throw new Error('non-boolean values cannot be compressed into a byte');\n        }\n        if (boolVal) {\n            res |= 1 << (7 - i);\n        }\n    }\n    return res;\n}\n// Assume that the current index on the list of type is an ABI bool type.\n// It returns the difference between the current index and the index of the furthest consecutive Bool type.\nfunction findBoolLR(typeList, index, delta) {\n    let until = 0;\n    while (true) {\n        const curr = index + delta * until;\n        if (typeList[curr].constructor === ABIBoolType) {\n            if (curr !== typeList.length - 1 && delta === 1) {\n                until += 1;\n            }\n            else if (curr > 0 && delta === -1) {\n                until += 1;\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            until -= 1;\n            break;\n        }\n    }\n    return until;\n}\n//# sourceMappingURL=abi_type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/abi_type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/contract.js":
/*!*******************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/contract.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABIContract = void 0;\nconst method_1 = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/method.js\");\nclass ABIContract {\n    constructor(params) {\n        if (typeof params.name !== 'string' ||\n            !Array.isArray(params.methods) ||\n            (params.networks && typeof params.networks !== 'object')) {\n            throw new Error('Invalid ABIContract parameters');\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.networks = params.networks ? { ...params.networks } : {};\n        this.methods = params.methods.map((method) => new method_1.ABIMethod(method));\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            networks: this.networks,\n            methods: this.methods.map((method) => method.toJSON()),\n        };\n    }\n    getMethodByName(name) {\n        return (0, method_1.getMethodByName)(this.methods, name);\n    }\n}\nexports.ABIContract = ABIContract;\n//# sourceMappingURL=contract.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvY29udHJhY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CO0FBQ25CLGlCQUFpQixtQkFBTyxDQUFDLHFFQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvYWJpL2NvbnRyYWN0LmpzPzg3N2EiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFCSUNvbnRyYWN0ID0gdm9pZCAwO1xuY29uc3QgbWV0aG9kXzEgPSByZXF1aXJlKFwiLi9tZXRob2RcIik7XG5jbGFzcyBBQklDb250cmFjdCB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLm5hbWUgIT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAhQXJyYXkuaXNBcnJheShwYXJhbXMubWV0aG9kcykgfHxcbiAgICAgICAgICAgIChwYXJhbXMubmV0d29ya3MgJiYgdHlwZW9mIHBhcmFtcy5uZXR3b3JrcyAhPT0gJ29iamVjdCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQUJJQ29udHJhY3QgcGFyYW1ldGVycycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gcGFyYW1zLmRlc2M7XG4gICAgICAgIHRoaXMubmV0d29ya3MgPSBwYXJhbXMubmV0d29ya3MgPyB7IC4uLnBhcmFtcy5uZXR3b3JrcyB9IDoge307XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHBhcmFtcy5tZXRob2RzLm1hcCgobWV0aG9kKSA9PiBuZXcgbWV0aG9kXzEuQUJJTWV0aG9kKG1ldGhvZCkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBkZXNjOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgbmV0d29ya3M6IHRoaXMubmV0d29ya3MsXG4gICAgICAgICAgICBtZXRob2RzOiB0aGlzLm1ldGhvZHMubWFwKChtZXRob2QpID0+IG1ldGhvZC50b0pTT04oKSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldE1ldGhvZEJ5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiAoMCwgbWV0aG9kXzEuZ2V0TWV0aG9kQnlOYW1lKSh0aGlzLm1ldGhvZHMsIG5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQUJJQ29udHJhY3QgPSBBQklDb250cmFjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRyYWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/contract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/index.js":
/*!****************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./abi_type */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/abi_type.js\"), exports);\n__exportStar(__webpack_require__(/*! ./contract */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/contract.js\"), exports);\n__exportStar(__webpack_require__(/*! ./interface */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/interface.js\"), exports);\n__exportStar(__webpack_require__(/*! ./method */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/method.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/reference.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHlFQUFZO0FBQ2pDLGFBQWEsbUJBQU8sQ0FBQyx5RUFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMsMkVBQWE7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLHFFQUFVO0FBQy9CLGFBQWEsbUJBQU8sQ0FBQywrRUFBZTtBQUNwQyxhQUFhLG1CQUFPLENBQUMsMkVBQWE7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2FiaS9pbmRleC5qcz8xMjA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYWJpX3R5cGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnRyYWN0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnRlcmZhY2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21ldGhvZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHJhbnNhY3Rpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlZmVyZW5jZVwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/interface.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/interface.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ABIInterface = void 0;\nconst method_1 = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/method.js\");\nclass ABIInterface {\n    constructor(params) {\n        if (typeof params.name !== 'string' || !Array.isArray(params.methods)) {\n            throw new Error('Invalid ABIInterface parameters');\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.methods = params.methods.map((method) => new method_1.ABIMethod(method));\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            methods: this.methods.map((method) => method.toJSON()),\n        };\n    }\n    getMethodByName(name) {\n        return (0, method_1.getMethodByName)(this.methods, name);\n    }\n}\nexports.ABIInterface = ABIInterface;\n//# sourceMappingURL=interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvaW50ZXJmYWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQixpQkFBaUIsbUJBQU8sQ0FBQyxxRUFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvaW50ZXJmYWNlLmpzP2I5ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFCSUludGVyZmFjZSA9IHZvaWQgMDtcbmNvbnN0IG1ldGhvZF8xID0gcmVxdWlyZShcIi4vbWV0aG9kXCIpO1xuY2xhc3MgQUJJSW50ZXJmYWNlIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMubmFtZSAhPT0gJ3N0cmluZycgfHwgIUFycmF5LmlzQXJyYXkocGFyYW1zLm1ldGhvZHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQUJJSW50ZXJmYWNlIHBhcmFtZXRlcnMnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5hbWUgPSBwYXJhbXMubmFtZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHBhcmFtcy5kZXNjO1xuICAgICAgICB0aGlzLm1ldGhvZHMgPSBwYXJhbXMubWV0aG9kcy5tYXAoKG1ldGhvZCkgPT4gbmV3IG1ldGhvZF8xLkFCSU1ldGhvZChtZXRob2QpKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZGVzYzogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG1ldGhvZHM6IHRoaXMubWV0aG9kcy5tYXAoKG1ldGhvZCkgPT4gbWV0aG9kLnRvSlNPTigpKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TWV0aG9kQnlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBtZXRob2RfMS5nZXRNZXRob2RCeU5hbWUpKHRoaXMubWV0aG9kcywgbmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5BQklJbnRlcmZhY2UgPSBBQklJbnRlcmZhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/interface.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/method.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/method.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMethodByName = exports.ABIMethod = void 0;\nconst naclWrappers_1 = __webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\");\nconst abi_type_1 = __webpack_require__(/*! ./abi_type */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/abi_type.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/transaction.js\");\nconst reference_1 = __webpack_require__(/*! ./reference */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/reference.js\");\nfunction parseMethodSignature(signature) {\n    const argsStart = signature.indexOf('(');\n    if (argsStart === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    let argsEnd = -1;\n    let depth = 0;\n    for (let i = argsStart; i < signature.length; i++) {\n        const char = signature[i];\n        if (char === '(') {\n            depth += 1;\n        }\n        else if (char === ')') {\n            if (depth === 0) {\n                // unpaired parenthesis\n                break;\n            }\n            depth -= 1;\n            if (depth === 0) {\n                argsEnd = i;\n                break;\n            }\n        }\n    }\n    if (argsEnd === -1) {\n        throw new Error(`Invalid method signature: ${signature}`);\n    }\n    return {\n        name: signature.slice(0, argsStart),\n        args: abi_type_1.ABITupleType.parseTupleContent(signature.slice(argsStart + 1, argsEnd)),\n        returns: signature.slice(argsEnd + 1),\n    };\n}\nclass ABIMethod {\n    constructor(params) {\n        if (typeof params.name !== 'string' ||\n            typeof params.returns !== 'object' ||\n            !Array.isArray(params.args)) {\n            throw new Error('Invalid ABIMethod parameters');\n        }\n        this.name = params.name;\n        this.description = params.desc;\n        this.args = params.args.map(({ type, name, desc }) => {\n            if ((0, transaction_1.abiTypeIsTransaction)(type) || (0, reference_1.abiTypeIsReference)(type)) {\n                return {\n                    type,\n                    name,\n                    description: desc,\n                };\n            }\n            return {\n                type: abi_type_1.ABIType.from(type),\n                name,\n                description: desc,\n            };\n        });\n        this.returns = {\n            type: params.returns.type === 'void'\n                ? params.returns.type\n                : abi_type_1.ABIType.from(params.returns.type),\n            description: params.returns.desc,\n        };\n    }\n    getSignature() {\n        const args = this.args.map((arg) => arg.type.toString()).join(',');\n        const returns = this.returns.type.toString();\n        return `${this.name}(${args})${returns}`;\n    }\n    getSelector() {\n        const hash = (0, naclWrappers_1.genericHash)(this.getSignature());\n        return new Uint8Array(hash.slice(0, 4));\n    }\n    txnCount() {\n        let count = 1;\n        for (const arg of this.args) {\n            if (typeof arg.type === 'string' && (0, transaction_1.abiTypeIsTransaction)(arg.type)) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            desc: this.description,\n            args: this.args.map(({ type, name, description }) => ({\n                type: type.toString(),\n                name,\n                desc: description,\n            })),\n            returns: {\n                type: this.returns.type.toString(),\n                desc: this.returns.description,\n            },\n        };\n    }\n    static fromSignature(signature) {\n        const { name, args, returns } = parseMethodSignature(signature);\n        return new ABIMethod({\n            name,\n            args: args.map((arg) => ({ type: arg })),\n            returns: { type: returns },\n        });\n    }\n}\nexports.ABIMethod = ABIMethod;\nfunction getMethodByName(methods, name) {\n    if (methods === null ||\n        !Array.isArray(methods) ||\n        !methods.every((item) => item instanceof ABIMethod))\n        throw new Error('Methods list provided is null or not the correct type');\n    const filteredMethods = methods.filter((m) => m.name === name);\n    if (filteredMethods.length > 1)\n        throw new Error(`found ${filteredMethods.length} methods with the same name ${filteredMethods\n            .map((m) => m.getSignature())\n            .join(',')}`);\n    if (filteredMethods.length === 0)\n        throw new Error(`found 0 methods with the name ${name}`);\n    return filteredMethods[0];\n}\nexports.getMethodByName = getMethodByName;\n//# sourceMappingURL=method.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvbWV0aG9kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLGlCQUFpQjtBQUMzQyx1QkFBdUIsbUJBQU8sQ0FBQyx3RkFBc0I7QUFDckQsbUJBQW1CLG1CQUFPLENBQUMseUVBQVk7QUFDdkMsc0JBQXNCLG1CQUFPLENBQUMsK0VBQWU7QUFDN0Msb0JBQW9CLG1CQUFPLENBQUMsMkVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0EscURBQXFELFVBQVU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFVBQVU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsa0JBQWtCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixVQUFVLEdBQUcsS0FBSyxHQUFHLFFBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHlCQUF5QjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBLHVDQUF1QyxXQUFXO0FBQ2xELHVCQUF1QixlQUFlO0FBQ3RDLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHdCQUF3Qiw2QkFBNkI7QUFDdEY7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSx5REFBeUQsS0FBSztBQUM5RDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvbWV0aG9kLmpzP2I5NzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldE1ldGhvZEJ5TmFtZSA9IGV4cG9ydHMuQUJJTWV0aG9kID0gdm9pZCAwO1xuY29uc3QgbmFjbFdyYXBwZXJzXzEgPSByZXF1aXJlKFwiLi4vbmFjbC9uYWNsV3JhcHBlcnNcIik7XG5jb25zdCBhYmlfdHlwZV8xID0gcmVxdWlyZShcIi4vYWJpX3R5cGVcIik7XG5jb25zdCB0cmFuc2FjdGlvbl8xID0gcmVxdWlyZShcIi4vdHJhbnNhY3Rpb25cIik7XG5jb25zdCByZWZlcmVuY2VfMSA9IHJlcXVpcmUoXCIuL3JlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHBhcnNlTWV0aG9kU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICAgIGNvbnN0IGFyZ3NTdGFydCA9IHNpZ25hdHVyZS5pbmRleE9mKCcoJyk7XG4gICAgaWYgKGFyZ3NTdGFydCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1ldGhvZCBzaWduYXR1cmU6ICR7c2lnbmF0dXJlfWApO1xuICAgIH1cbiAgICBsZXQgYXJnc0VuZCA9IC0xO1xuICAgIGxldCBkZXB0aCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IGFyZ3NTdGFydDsgaSA8IHNpZ25hdHVyZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGFyID0gc2lnbmF0dXJlW2ldO1xuICAgICAgICBpZiAoY2hhciA9PT0gJygnKSB7XG4gICAgICAgICAgICBkZXB0aCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICcpJykge1xuICAgICAgICAgICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gdW5wYWlyZWQgcGFyZW50aGVzaXNcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlcHRoIC09IDE7XG4gICAgICAgICAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBhcmdzRW5kID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXJnc0VuZCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1ldGhvZCBzaWduYXR1cmU6ICR7c2lnbmF0dXJlfWApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzaWduYXR1cmUuc2xpY2UoMCwgYXJnc1N0YXJ0KSxcbiAgICAgICAgYXJnczogYWJpX3R5cGVfMS5BQklUdXBsZVR5cGUucGFyc2VUdXBsZUNvbnRlbnQoc2lnbmF0dXJlLnNsaWNlKGFyZ3NTdGFydCArIDEsIGFyZ3NFbmQpKSxcbiAgICAgICAgcmV0dXJuczogc2lnbmF0dXJlLnNsaWNlKGFyZ3NFbmQgKyAxKSxcbiAgICB9O1xufVxuY2xhc3MgQUJJTWV0aG9kIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMubmFtZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIHR5cGVvZiBwYXJhbXMucmV0dXJucyAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHBhcmFtcy5hcmdzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFCSU1ldGhvZCBwYXJhbWV0ZXJzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gcGFyYW1zLm5hbWU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBwYXJhbXMuZGVzYztcbiAgICAgICAgdGhpcy5hcmdzID0gcGFyYW1zLmFyZ3MubWFwKCh7IHR5cGUsIG5hbWUsIGRlc2MgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCgwLCB0cmFuc2FjdGlvbl8xLmFiaVR5cGVJc1RyYW5zYWN0aW9uKSh0eXBlKSB8fCAoMCwgcmVmZXJlbmNlXzEuYWJpVHlwZUlzUmVmZXJlbmNlKSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IGFiaV90eXBlXzEuQUJJVHlwZS5mcm9tKHR5cGUpLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2MsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZXR1cm5zID0ge1xuICAgICAgICAgICAgdHlwZTogcGFyYW1zLnJldHVybnMudHlwZSA9PT0gJ3ZvaWQnXG4gICAgICAgICAgICAgICAgPyBwYXJhbXMucmV0dXJucy50eXBlXG4gICAgICAgICAgICAgICAgOiBhYmlfdHlwZV8xLkFCSVR5cGUuZnJvbShwYXJhbXMucmV0dXJucy50eXBlKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwYXJhbXMucmV0dXJucy5kZXNjLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRTaWduYXR1cmUoKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmFyZ3MubWFwKChhcmcpID0+IGFyZy50eXBlLnRvU3RyaW5nKCkpLmpvaW4oJywnKTtcbiAgICAgICAgY29uc3QgcmV0dXJucyA9IHRoaXMucmV0dXJucy50eXBlLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9KCR7YXJnc30pJHtyZXR1cm5zfWA7XG4gICAgfVxuICAgIGdldFNlbGVjdG9yKCkge1xuICAgICAgICBjb25zdCBoYXNoID0gKDAsIG5hY2xXcmFwcGVyc18xLmdlbmVyaWNIYXNoKSh0aGlzLmdldFNpZ25hdHVyZSgpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGhhc2guc2xpY2UoMCwgNCkpO1xuICAgIH1cbiAgICB0eG5Db3VudCgpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMTtcbiAgICAgICAgZm9yIChjb25zdCBhcmcgb2YgdGhpcy5hcmdzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZy50eXBlID09PSAnc3RyaW5nJyAmJiAoMCwgdHJhbnNhY3Rpb25fMS5hYmlUeXBlSXNUcmFuc2FjdGlvbikoYXJnLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIGRlc2M6IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBhcmdzOiB0aGlzLmFyZ3MubWFwKCh7IHR5cGUsIG5hbWUsIGRlc2NyaXB0aW9uIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgZGVzYzogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5yZXR1cm5zLnR5cGUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBkZXNjOiB0aGlzLnJldHVybnMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3QgeyBuYW1lLCBhcmdzLCByZXR1cm5zIH0gPSBwYXJzZU1ldGhvZFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgICAgICByZXR1cm4gbmV3IEFCSU1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYXJnczogYXJncy5tYXAoKGFyZykgPT4gKHsgdHlwZTogYXJnIH0pKSxcbiAgICAgICAgICAgIHJldHVybnM6IHsgdHlwZTogcmV0dXJucyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkFCSU1ldGhvZCA9IEFCSU1ldGhvZDtcbmZ1bmN0aW9uIGdldE1ldGhvZEJ5TmFtZShtZXRob2RzLCBuYW1lKSB7XG4gICAgaWYgKG1ldGhvZHMgPT09IG51bGwgfHxcbiAgICAgICAgIUFycmF5LmlzQXJyYXkobWV0aG9kcykgfHxcbiAgICAgICAgIW1ldGhvZHMuZXZlcnkoKGl0ZW0pID0+IGl0ZW0gaW5zdGFuY2VvZiBBQklNZXRob2QpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZHMgbGlzdCBwcm92aWRlZCBpcyBudWxsIG9yIG5vdCB0aGUgY29ycmVjdCB0eXBlJyk7XG4gICAgY29uc3QgZmlsdGVyZWRNZXRob2RzID0gbWV0aG9kcy5maWx0ZXIoKG0pID0+IG0ubmFtZSA9PT0gbmFtZSk7XG4gICAgaWYgKGZpbHRlcmVkTWV0aG9kcy5sZW5ndGggPiAxKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZvdW5kICR7ZmlsdGVyZWRNZXRob2RzLmxlbmd0aH0gbWV0aG9kcyB3aXRoIHRoZSBzYW1lIG5hbWUgJHtmaWx0ZXJlZE1ldGhvZHNcbiAgICAgICAgICAgIC5tYXAoKG0pID0+IG0uZ2V0U2lnbmF0dXJlKCkpXG4gICAgICAgICAgICAuam9pbignLCcpfWApO1xuICAgIGlmIChmaWx0ZXJlZE1ldGhvZHMubGVuZ3RoID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZvdW5kIDAgbWV0aG9kcyB3aXRoIHRoZSBuYW1lICR7bmFtZX1gKTtcbiAgICByZXR1cm4gZmlsdGVyZWRNZXRob2RzWzBdO1xufVxuZXhwb3J0cy5nZXRNZXRob2RCeU5hbWUgPSBnZXRNZXRob2RCeU5hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRob2QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/reference.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/reference.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.abiTypeIsReference = exports.ABIReferenceType = void 0;\nvar ABIReferenceType;\n(function (ABIReferenceType) {\n    /**\n     * Account reference type\n     */\n    ABIReferenceType[\"account\"] = \"account\";\n    /**\n     * Application reference type\n     */\n    ABIReferenceType[\"application\"] = \"application\";\n    /**\n     * Asset reference type\n     */\n    ABIReferenceType[\"asset\"] = \"asset\";\n})(ABIReferenceType = exports.ABIReferenceType || (exports.ABIReferenceType = {}));\nfunction abiTypeIsReference(type) {\n    return (type === ABIReferenceType.account ||\n        type === ABIReferenceType.application ||\n        type === ABIReferenceType.asset);\n}\nexports.abiTypeIsReference = abiTypeIsReference;\n//# sourceMappingURL=reference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvcmVmZXJlbmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHdCQUF3QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Qsd0JBQXdCLEtBQUs7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvYWJpL3JlZmVyZW5jZS5qcz9kYTZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hYmlUeXBlSXNSZWZlcmVuY2UgPSBleHBvcnRzLkFCSVJlZmVyZW5jZVR5cGUgPSB2b2lkIDA7XG52YXIgQUJJUmVmZXJlbmNlVHlwZTtcbihmdW5jdGlvbiAoQUJJUmVmZXJlbmNlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIEFjY291bnQgcmVmZXJlbmNlIHR5cGVcbiAgICAgKi9cbiAgICBBQklSZWZlcmVuY2VUeXBlW1wiYWNjb3VudFwiXSA9IFwiYWNjb3VudFwiO1xuICAgIC8qKlxuICAgICAqIEFwcGxpY2F0aW9uIHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFwcGxpY2F0aW9uXCJdID0gXCJhcHBsaWNhdGlvblwiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IHJlZmVyZW5jZSB0eXBlXG4gICAgICovXG4gICAgQUJJUmVmZXJlbmNlVHlwZVtcImFzc2V0XCJdID0gXCJhc3NldFwiO1xufSkoQUJJUmVmZXJlbmNlVHlwZSA9IGV4cG9ydHMuQUJJUmVmZXJlbmNlVHlwZSB8fCAoZXhwb3J0cy5BQklSZWZlcmVuY2VUeXBlID0ge30pKTtcbmZ1bmN0aW9uIGFiaVR5cGVJc1JlZmVyZW5jZSh0eXBlKSB7XG4gICAgcmV0dXJuICh0eXBlID09PSBBQklSZWZlcmVuY2VUeXBlLmFjY291bnQgfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJUmVmZXJlbmNlVHlwZS5hcHBsaWNhdGlvbiB8fFxuICAgICAgICB0eXBlID09PSBBQklSZWZlcmVuY2VUeXBlLmFzc2V0KTtcbn1cbmV4cG9ydHMuYWJpVHlwZUlzUmVmZXJlbmNlID0gYWJpVHlwZUlzUmVmZXJlbmNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmZXJlbmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/reference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/abi/transaction.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/abi/transaction.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.abiCheckTransactionType = exports.abiTypeIsTransaction = exports.ABITransactionType = void 0;\nvar ABITransactionType;\n(function (ABITransactionType) {\n    /**\n     * Any transaction type\n     */\n    ABITransactionType[\"any\"] = \"txn\";\n    /**\n     * Payment transaction type\n     */\n    ABITransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction type\n     */\n    ABITransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction type\n     */\n    ABITransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction type\n     */\n    ABITransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction type\n     */\n    ABITransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction type\n     */\n    ABITransactionType[\"appl\"] = \"appl\";\n})(ABITransactionType = exports.ABITransactionType || (exports.ABITransactionType = {}));\nfunction abiTypeIsTransaction(type) {\n    return (type === ABITransactionType.any ||\n        type === ABITransactionType.pay ||\n        type === ABITransactionType.keyreg ||\n        type === ABITransactionType.acfg ||\n        type === ABITransactionType.axfer ||\n        type === ABITransactionType.afrz ||\n        type === ABITransactionType.appl);\n}\nexports.abiTypeIsTransaction = abiTypeIsTransaction;\nfunction abiCheckTransactionType(type, txn) {\n    if (type === ABITransactionType.any) {\n        return true;\n    }\n    return txn.type && txn.type.toString() === type.toString();\n}\nexports.abiCheckTransactionType = abiCheckTransactionType;\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hYmkvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsNEJBQTRCLEdBQUcsMEJBQTBCO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0RBQXNELDBCQUEwQixLQUFLO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2FiaS90cmFuc2FjdGlvbi5qcz84NDgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hYmlDaGVja1RyYW5zYWN0aW9uVHlwZSA9IGV4cG9ydHMuYWJpVHlwZUlzVHJhbnNhY3Rpb24gPSBleHBvcnRzLkFCSVRyYW5zYWN0aW9uVHlwZSA9IHZvaWQgMDtcbnZhciBBQklUcmFuc2FjdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFCSVRyYW5zYWN0aW9uVHlwZSkge1xuICAgIC8qKlxuICAgICAqIEFueSB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYW55XCJdID0gXCJ0eG5cIjtcbiAgICAvKipcbiAgICAgKiBQYXltZW50IHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJwYXlcIl0gPSBcInBheVwiO1xuICAgIC8qKlxuICAgICAqIEtleSByZWdpc3RyYXRpb24gdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImtleXJlZ1wiXSA9IFwia2V5cmVnXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgY29uZmlndXJhdGlvbiB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYWNmZ1wiXSA9IFwiYWNmZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IHRyYW5zZmVyIHRyYW5zYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBBQklUcmFuc2FjdGlvblR5cGVbXCJheGZlclwiXSA9IFwiYXhmZXJcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCBmcmVlemUgdHJhbnNhY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIEFCSVRyYW5zYWN0aW9uVHlwZVtcImFmcnpcIl0gPSBcImFmcnpcIjtcbiAgICAvKipcbiAgICAgKiBBcHBsaWNhdGlvbiB0cmFuc2FjdGlvbiB0eXBlXG4gICAgICovXG4gICAgQUJJVHJhbnNhY3Rpb25UeXBlW1wiYXBwbFwiXSA9IFwiYXBwbFwiO1xufSkoQUJJVHJhbnNhY3Rpb25UeXBlID0gZXhwb3J0cy5BQklUcmFuc2FjdGlvblR5cGUgfHwgKGV4cG9ydHMuQUJJVHJhbnNhY3Rpb25UeXBlID0ge30pKTtcbmZ1bmN0aW9uIGFiaVR5cGVJc1RyYW5zYWN0aW9uKHR5cGUpIHtcbiAgICByZXR1cm4gKHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5hbnkgfHxcbiAgICAgICAgdHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLnBheSB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUua2V5cmVnIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5hY2ZnIHx8XG4gICAgICAgIHR5cGUgPT09IEFCSVRyYW5zYWN0aW9uVHlwZS5heGZlciB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYWZyeiB8fFxuICAgICAgICB0eXBlID09PSBBQklUcmFuc2FjdGlvblR5cGUuYXBwbCk7XG59XG5leHBvcnRzLmFiaVR5cGVJc1RyYW5zYWN0aW9uID0gYWJpVHlwZUlzVHJhbnNhY3Rpb247XG5mdW5jdGlvbiBhYmlDaGVja1RyYW5zYWN0aW9uVHlwZSh0eXBlLCB0eG4pIHtcbiAgICBpZiAodHlwZSA9PT0gQUJJVHJhbnNhY3Rpb25UeXBlLmFueSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR4bi50eXBlICYmIHR4bi50eXBlLnRvU3RyaW5nKCkgPT09IHR5cGUudG9TdHJpbmcoKTtcbn1cbmV4cG9ydHMuYWJpQ2hlY2tUcmFuc2FjdGlvblR5cGUgPSBhYmlDaGVja1RyYW5zYWN0aW9uVHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/abi/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/account.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/account.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\n/**\n * generateAccount returns a new Algorand address and its corresponding secret key\n */\nfunction generateAccount() {\n    const keys = nacl.keyPair();\n    const encodedPk = address.encodeAddress(keys.publicKey);\n    return { addr: encodedPk, sk: keys.secretKey };\n}\nexports[\"default\"] = generateAccount;\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9hY2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBcUI7QUFDdkQsNkJBQTZCLG1CQUFPLENBQUMscUZBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2FjY291bnQuanM/YjViYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbmFjbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9uYWNsL25hY2xXcmFwcGVyc1wiKSk7XG5jb25zdCBhZGRyZXNzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY29kaW5nL2FkZHJlc3NcIikpO1xuLyoqXG4gKiBnZW5lcmF0ZUFjY291bnQgcmV0dXJucyBhIG5ldyBBbGdvcmFuZCBhZGRyZXNzIGFuZCBpdHMgY29ycmVzcG9uZGluZyBzZWNyZXQga2V5XG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlQWNjb3VudCgpIHtcbiAgICBjb25zdCBrZXlzID0gbmFjbC5rZXlQYWlyKCk7XG4gICAgY29uc3QgZW5jb2RlZFBrID0gYWRkcmVzcy5lbmNvZGVBZGRyZXNzKGtleXMucHVibGljS2V5KTtcbiAgICByZXR1cm4geyBhZGRyOiBlbmNvZGVkUGssIHNrOiBrZXlzLnNlY3JldEtleSB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZ2VuZXJhdGVBY2NvdW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjb3VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/bid.js":
/*!**********************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/bid.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nclass Bid {\n    constructor({ bidderKey, bidAmount, bidID, auctionKey, auctionID, maxPrice, }) {\n        this.name = 'Bid';\n        this.tag = buffer_1.Buffer.from([97, 66]); // \"aB\"\n        const decodedBidderKey = address.decodeAddress(bidderKey);\n        const decodedAuctionKey = address.decodeAddress(auctionKey);\n        if (!Number.isSafeInteger(bidAmount) || bidAmount < 0)\n            throw Error('Bid amount must be positive and 2^53-1');\n        if (!Number.isSafeInteger(bidID) || bidID < 0)\n            throw Error('BidID must be positive and 2^53-1');\n        if (!Number.isSafeInteger(auctionID) || auctionID < 0)\n            throw Error('auctionID must be positive');\n        Object.assign(this, {\n            bidderKey: decodedBidderKey,\n            bidAmount,\n            bidID,\n            auctionKey: decodedAuctionKey,\n            auctionID,\n            maxPrice,\n        });\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        return {\n            bidder: buffer_1.Buffer.from(this.bidderKey.publicKey),\n            cur: this.bidAmount,\n            price: this.maxPrice,\n            id: this.bidID,\n            auc: buffer_1.Buffer.from(this.auctionKey.publicKey),\n            aid: this.auctionID,\n        };\n    }\n    signBid(sk) {\n        const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n        const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n        const sig = nacl.sign(toBeSigned, sk);\n        // construct signed message\n        const sBid = {\n            sig: buffer_1.Buffer.from(sig),\n            bid: this.get_obj_for_encoding(),\n        };\n        const note = {\n            t: 'b',\n            b: sBid,\n        };\n        return new Uint8Array(encoding.encode(note));\n    }\n}\nexports[\"default\"] = Bid;\n//# sourceMappingURL=bid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9iaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLDZCQUE2QixtQkFBTyxDQUFDLHFGQUFvQjtBQUN6RCw4QkFBOEIsbUJBQU8sQ0FBQyx1RkFBcUI7QUFDM0QsMEJBQTBCLG1CQUFPLENBQUMsdUZBQXFCO0FBQ3ZELDJCQUEyQixtQkFBTyxDQUFDLDJFQUFlO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLCtEQUErRDtBQUNqRjtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9iaWQuanM/ODA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuY29uc3QgYWRkcmVzcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9lbmNvZGluZy9hZGRyZXNzXCIpKTtcbmNvbnN0IGVuY29kaW5nID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY29kaW5nL2VuY29kaW5nXCIpKTtcbmNvbnN0IG5hY2wgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmFjbC9uYWNsV3JhcHBlcnNcIikpO1xuY29uc3QgdXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHMvdXRpbHNcIikpO1xuLyoqXG4gKiBCaWQgZW5hYmxlcyBjb25zdHJ1Y3Rpb24gb2YgQWxnb3JhbmQgQXVjdGlvbnMgQmlkc1xuICogKi9cbmNsYXNzIEJpZCB7XG4gICAgY29uc3RydWN0b3IoeyBiaWRkZXJLZXksIGJpZEFtb3VudCwgYmlkSUQsIGF1Y3Rpb25LZXksIGF1Y3Rpb25JRCwgbWF4UHJpY2UsIH0pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0JpZCc7XG4gICAgICAgIHRoaXMudGFnID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oWzk3LCA2Nl0pOyAvLyBcImFCXCJcbiAgICAgICAgY29uc3QgZGVjb2RlZEJpZGRlcktleSA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhiaWRkZXJLZXkpO1xuICAgICAgICBjb25zdCBkZWNvZGVkQXVjdGlvbktleSA9IGFkZHJlc3MuZGVjb2RlQWRkcmVzcyhhdWN0aW9uS2V5KTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihiaWRBbW91bnQpIHx8IGJpZEFtb3VudCA8IDApXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQmlkIGFtb3VudCBtdXN0IGJlIHBvc2l0aXZlIGFuZCAyXjUzLTEnKTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihiaWRJRCkgfHwgYmlkSUQgPCAwKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0JpZElEIG11c3QgYmUgcG9zaXRpdmUgYW5kIDJeNTMtMScpO1xuICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGF1Y3Rpb25JRCkgfHwgYXVjdGlvbklEIDwgMClcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdhdWN0aW9uSUQgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcbiAgICAgICAgICAgIGJpZGRlcktleTogZGVjb2RlZEJpZGRlcktleSxcbiAgICAgICAgICAgIGJpZEFtb3VudCxcbiAgICAgICAgICAgIGJpZElELFxuICAgICAgICAgICAgYXVjdGlvbktleTogZGVjb2RlZEF1Y3Rpb25LZXksXG4gICAgICAgICAgICBhdWN0aW9uSUQsXG4gICAgICAgICAgICBtYXhQcmljZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjYW1lbGNhc2VcbiAgICBnZXRfb2JqX2Zvcl9lbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJpZGRlcjogYnVmZmVyXzEuQnVmZmVyLmZyb20odGhpcy5iaWRkZXJLZXkucHVibGljS2V5KSxcbiAgICAgICAgICAgIGN1cjogdGhpcy5iaWRBbW91bnQsXG4gICAgICAgICAgICBwcmljZTogdGhpcy5tYXhQcmljZSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmJpZElELFxuICAgICAgICAgICAgYXVjOiBidWZmZXJfMS5CdWZmZXIuZnJvbSh0aGlzLmF1Y3Rpb25LZXkucHVibGljS2V5KSxcbiAgICAgICAgICAgIGFpZDogdGhpcy5hdWN0aW9uSUQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNpZ25CaWQoc2spIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZE1zZyA9IGVuY29kaW5nLmVuY29kZSh0aGlzLmdldF9vYmpfZm9yX2VuY29kaW5nKCkpO1xuICAgICAgICBjb25zdCB0b0JlU2lnbmVkID0gYnVmZmVyXzEuQnVmZmVyLmZyb20odXRpbHMuY29uY2F0QXJyYXlzKHRoaXMudGFnLCBlbmNvZGVkTXNnKSk7XG4gICAgICAgIGNvbnN0IHNpZyA9IG5hY2wuc2lnbih0b0JlU2lnbmVkLCBzayk7XG4gICAgICAgIC8vIGNvbnN0cnVjdCBzaWduZWQgbWVzc2FnZVxuICAgICAgICBjb25zdCBzQmlkID0ge1xuICAgICAgICAgICAgc2lnOiBidWZmZXJfMS5CdWZmZXIuZnJvbShzaWcpLFxuICAgICAgICAgICAgYmlkOiB0aGlzLmdldF9vYmpfZm9yX2VuY29kaW5nKCksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG5vdGUgPSB7XG4gICAgICAgICAgICB0OiAnYicsXG4gICAgICAgICAgICBiOiBzQmlkLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZW5jb2RpbmcuZW5jb2RlKG5vdGUpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBCaWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/bid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/boxStorage.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/boxStorage.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.translateBoxReferences = void 0;\nfunction translateBoxReference(reference, foreignApps, appIndex) {\n    const referenceId = reference.appIndex;\n    const referenceName = reference.name;\n    const isOwnReference = referenceId === 0 || referenceId === appIndex;\n    let index = 0;\n    if (foreignApps != null) {\n        // Foreign apps start from index 1; index 0 is its own app ID.\n        index = foreignApps.indexOf(referenceId) + 1;\n    }\n    // Check if the app referenced is itself after checking the foreign apps array.\n    // If index is zero, then the app ID was not found in the foreign apps array\n    // or the foreign apps array was null.\n    if (index === 0 && !isOwnReference) {\n        // Error if the app is trying to reference a foreign app that was not in\n        // its own foreign apps array.\n        throw new Error(`Box ref with appId ${referenceId} not in foreign-apps`);\n    }\n    return { i: index, n: referenceName };\n}\n/**\n * translateBoxReferences translates an array of BoxReferences with app IDs\n * into an array of EncodedBoxReferences with foreign indices.\n */\nfunction translateBoxReferences(references, foreignApps, appIndex) {\n    if (references == null)\n        return [];\n    return references.map((bx) => translateBoxReference(bx, foreignApps, appIndex));\n}\nexports.translateBoxReferences = translateBoxReferences;\n//# sourceMappingURL=boxStorage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9ib3hTdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxhQUFhO0FBQzNEO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9ib3hTdG9yYWdlLmpzP2U2ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRyYW5zbGF0ZUJveFJlZmVyZW5jZXMgPSB2b2lkIDA7XG5mdW5jdGlvbiB0cmFuc2xhdGVCb3hSZWZlcmVuY2UocmVmZXJlbmNlLCBmb3JlaWduQXBwcywgYXBwSW5kZXgpIHtcbiAgICBjb25zdCByZWZlcmVuY2VJZCA9IHJlZmVyZW5jZS5hcHBJbmRleDtcbiAgICBjb25zdCByZWZlcmVuY2VOYW1lID0gcmVmZXJlbmNlLm5hbWU7XG4gICAgY29uc3QgaXNPd25SZWZlcmVuY2UgPSByZWZlcmVuY2VJZCA9PT0gMCB8fCByZWZlcmVuY2VJZCA9PT0gYXBwSW5kZXg7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBpZiAoZm9yZWlnbkFwcHMgIT0gbnVsbCkge1xuICAgICAgICAvLyBGb3JlaWduIGFwcHMgc3RhcnQgZnJvbSBpbmRleCAxOyBpbmRleCAwIGlzIGl0cyBvd24gYXBwIElELlxuICAgICAgICBpbmRleCA9IGZvcmVpZ25BcHBzLmluZGV4T2YocmVmZXJlbmNlSWQpICsgMTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIGFwcCByZWZlcmVuY2VkIGlzIGl0c2VsZiBhZnRlciBjaGVja2luZyB0aGUgZm9yZWlnbiBhcHBzIGFycmF5LlxuICAgIC8vIElmIGluZGV4IGlzIHplcm8sIHRoZW4gdGhlIGFwcCBJRCB3YXMgbm90IGZvdW5kIGluIHRoZSBmb3JlaWduIGFwcHMgYXJyYXlcbiAgICAvLyBvciB0aGUgZm9yZWlnbiBhcHBzIGFycmF5IHdhcyBudWxsLlxuICAgIGlmIChpbmRleCA9PT0gMCAmJiAhaXNPd25SZWZlcmVuY2UpIHtcbiAgICAgICAgLy8gRXJyb3IgaWYgdGhlIGFwcCBpcyB0cnlpbmcgdG8gcmVmZXJlbmNlIGEgZm9yZWlnbiBhcHAgdGhhdCB3YXMgbm90IGluXG4gICAgICAgIC8vIGl0cyBvd24gZm9yZWlnbiBhcHBzIGFycmF5LlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJveCByZWYgd2l0aCBhcHBJZCAke3JlZmVyZW5jZUlkfSBub3QgaW4gZm9yZWlnbi1hcHBzYCk7XG4gICAgfVxuICAgIHJldHVybiB7IGk6IGluZGV4LCBuOiByZWZlcmVuY2VOYW1lIH07XG59XG4vKipcbiAqIHRyYW5zbGF0ZUJveFJlZmVyZW5jZXMgdHJhbnNsYXRlcyBhbiBhcnJheSBvZiBCb3hSZWZlcmVuY2VzIHdpdGggYXBwIElEc1xuICogaW50byBhbiBhcnJheSBvZiBFbmNvZGVkQm94UmVmZXJlbmNlcyB3aXRoIGZvcmVpZ24gaW5kaWNlcy5cbiAqL1xuZnVuY3Rpb24gdHJhbnNsYXRlQm94UmVmZXJlbmNlcyhyZWZlcmVuY2VzLCBmb3JlaWduQXBwcywgYXBwSW5kZXgpIHtcbiAgICBpZiAocmVmZXJlbmNlcyA9PSBudWxsKVxuICAgICAgICByZXR1cm4gW107XG4gICAgcmV0dXJuIHJlZmVyZW5jZXMubWFwKChieCkgPT4gdHJhbnNsYXRlQm94UmVmZXJlbmNlKGJ4LCBmb3JlaWduQXBwcywgYXBwSW5kZXgpKTtcbn1cbmV4cG9ydHMudHJhbnNsYXRlQm94UmVmZXJlbmNlcyA9IHRyYW5zbGF0ZUJveFJlZmVyZW5jZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib3hTdG9yYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/boxStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/client.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/client.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst utils = __importStar(__webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst urlTokenBaseHTTPClient_1 = __webpack_require__(/*! ./urlTokenBaseHTTPClient */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js\");\n/**\n * Remove falsy values or values with a length of 0 from an object.\n */\nfunction removeFalsyOrEmpty(obj) {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            // eslint-disable-next-line no-param-reassign\n            if (!obj[key] || obj[key].length === 0)\n                delete obj[key];\n        }\n    }\n    return obj;\n}\n/**\n * Create a new object with lower-case keys\n * See https://codereview.stackexchange.com/a/162418\n * Used to ensure all headers are lower-case and to work more easily with them\n */\nfunction tolowerCaseKeys(o) {\n    /* eslint-disable no-param-reassign,no-return-assign,no-sequences */\n    return Object.keys(o).reduce((c, k) => ((c[k.toLowerCase()] = o[k]), c), {});\n    /* eslint-enable no-param-reassign,no-return-assign,no-sequences */\n}\n/**\n * getAcceptFormat returns the correct Accept header depending on the\n * requested format.\n */\nfunction getAcceptFormat(query) {\n    if (query !== undefined &&\n        Object.prototype.hasOwnProperty.call(query, 'format')) {\n        switch (query.format) {\n            case 'msgpack':\n                return 'application/msgpack';\n            case 'json':\n            default:\n                return 'application/json';\n        }\n    }\n    else\n        return 'application/json';\n}\n/**\n * HTTPClient is a wrapper around a BaseHTTPClient\n * It takes care of setting the proper \"Accept\" header and of\n * decoding the JSON outputs.\n */\nclass HTTPClient {\n    constructor(bcOrTokenHeader, baseServer, port, defaultHeaders = {}) {\n        if (baseServer !== undefined) {\n            this.bc = new urlTokenBaseHTTPClient_1.URLTokenBaseHTTPClient(bcOrTokenHeader, baseServer, port, defaultHeaders);\n        }\n        else {\n            this.bc = bcOrTokenHeader;\n        }\n    }\n    /**\n     * Parse JSON using either the built-in JSON.parse or utils.parseJSON\n     * depending on whether jsonOptions are provided or not\n     *\n     * @param text - JSON data\n     * @param status - Status of the response (used in case parseJSON fails)\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     */\n    static parseJSON(text, status, jsonOptions = {}) {\n        try {\n            if (Object.keys(jsonOptions).length === 0) {\n                return text && JSON.parse(text);\n            }\n            return text && utils.parseJSON(text, jsonOptions);\n        }\n        catch (err_) {\n            const err = err_;\n            // return the raw response if the response parsing fails\n            err.rawResponse = text || null;\n            // return the http status code if the response parsing fails\n            err.statusCode = status;\n            throw err;\n        }\n    }\n    /**\n     * Serialize the data according to the requestHeaders\n     * Assumes that requestHeaders contain a key \"content-type\"\n     * If the content-type is \"application/json\", data is JSON serialized\n     * Otherwise, data needs to be either an UTF-8 string that is converted to an Uint8Array\n     * or an Uint8Array\n     * @private\n     */\n    static serializeData(data, requestHeaders) {\n        if (!data) {\n            return new Uint8Array(0); // empty Uint8Array\n        }\n        if (requestHeaders['content-type'] === 'application/json') {\n            return new Uint8Array(buffer_1.Buffer.from(JSON.stringify(data)));\n        }\n        if (typeof data === 'string') {\n            return new Uint8Array(buffer_1.Buffer.from(data));\n        }\n        if (data instanceof Uint8Array) {\n            return data;\n        }\n        throw new Error('provided data is neither a string nor a Uint8Array and content-type is not application/json');\n    }\n    /**\n     * Convert a BaseHTTPClientResponse into a full HTTPClientResponse\n     * Parse the body in\n     * Modifies in place res and return the result\n     */\n    static prepareResponse(res, format, parseBody, jsonOptions = {}) {\n        let { body } = res;\n        let text;\n        if (format !== 'application/msgpack') {\n            text = (body && buffer_1.Buffer.from(body).toString()) || '';\n        }\n        if (parseBody && format === 'application/json') {\n            body = HTTPClient.parseJSON(text, res.status, jsonOptions);\n        }\n        return {\n            ...res,\n            body,\n            text,\n            ok: Math.trunc(res.status / 100) === 2,\n        };\n    }\n    /**\n     * Prepare an error with a response\n     * (the type of errors BaseHTTPClient are supposed to throw)\n     * by adding the status and preparing the internal response\n     * @private\n     */\n    static prepareResponseError(err) {\n        if (err.response) {\n            // eslint-disable-next-line no-param-reassign\n            err.response = HTTPClient.prepareResponse(err.response, 'application/json', true);\n            // eslint-disable-next-line no-param-reassign\n            err.status = err.response.status;\n        }\n        return err;\n    }\n    /**\n     * Send a GET request.\n     * @param relativePath - The path of the request.\n     * @param query - An object containing the query parameters of the request.\n     * @param requestHeaders - An object containing additional request headers to use.\n     * @param jsonOptions - Options object to use to decode JSON responses. See\n     *   utils.parseJSON for the options available.\n     * @param parseBody - An optional boolean indicating whether the response body should be parsed\n     *   or not.\n     * @returns Response object.\n     */\n    async get(relativePath, query, requestHeaders = {}, jsonOptions = {}, parseBody = true) {\n        const format = getAcceptFormat(query);\n        const fullHeaders = { ...requestHeaders, accept: format };\n        try {\n            const res = await this.bc.get(relativePath, removeFalsyOrEmpty(query), fullHeaders);\n            return HTTPClient.prepareResponse(res, format, parseBody, jsonOptions);\n        }\n        catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a POST request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */\n    async post(relativePath, data, requestHeaders = {}, query, parseBody = true) {\n        const fullHeaders = {\n            'content-type': 'application/json',\n            ...tolowerCaseKeys(requestHeaders),\n        };\n        try {\n            const res = await this.bc.post(relativePath, HTTPClient.serializeData(data, fullHeaders), query, fullHeaders);\n            return HTTPClient.prepareResponse(res, 'application/json', parseBody);\n        }\n        catch (err) {\n            throw HTTPClient.prepareResponseError(err);\n        }\n    }\n    /**\n     * Send a DELETE request.\n     * If no content-type present, adds the header \"content-type: application/json\"\n     * and data is serialized in JSON (if not empty)\n     */\n    async delete(relativePath, data, requestHeaders = {}, parseBody = true) {\n        const fullHeaders = {\n            'content-type': 'application/json',\n            ...tolowerCaseKeys(requestHeaders),\n        };\n        const res = await this.bc.delete(relativePath, HTTPClient.serializeData(data, fullHeaders), undefined, fullHeaders);\n        return HTTPClient.prepareResponse(res, 'application/json', parseBody);\n    }\n}\nexports[\"default\"] = HTTPClient;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/kmd.js":
/*!*****************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/kmd.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst serviceClient_1 = __importDefault(__webpack_require__(/*! ./v2/serviceClient */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js\"));\nconst txn = __importStar(__webpack_require__(/*! ../transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nclass Kmd extends serviceClient_1.default {\n    constructor(token, baseServer = 'http://127.0.0.1', port = 7833, headers = {}) {\n        super('X-KMD-API-Token', token, baseServer, port, headers);\n    }\n    /**\n     * version returns a VersionResponse containing a list of kmd API versions supported by this running kmd instance.\n     */\n    async versions() {\n        const res = await this.c.get('/versions');\n        return res.body;\n    }\n    /**\n     * listWallets returns a ListWalletsResponse containing the list of wallets known to kmd. Using a wallet ID\n     * returned from this endpoint, you can initialize a wallet handle with client.InitWalletHandle\n     */\n    async listWallets() {\n        const res = await this.c.get('/v1/wallets');\n        return res.body;\n    }\n    /**\n     * createWallet creates a wallet with the specified name, password, driver,\n     * and master derivation key. If the master derivation key is blank, one is\n     * generated internally to kmd. CreateWallet returns a CreateWalletResponse\n     * containing information about the new wallet.\n     * @param walletName\n     * @param walletPassword\n     * @param walletDriverName\n     * @param walletMDK\n     */\n    async createWallet(walletName, walletPassword, walletMDK = new Uint8Array(), walletDriverName = 'sqlite') {\n        const req = {\n            wallet_name: walletName,\n            wallet_driver_name: walletDriverName,\n            wallet_password: walletPassword,\n            master_derivation_key: buffer_1.Buffer.from(walletMDK).toString('base64'),\n        };\n        const res = await this.c.post('/v1/wallet', req);\n        return res.body;\n    }\n    /**\n     * initWalletHandle accepts a wallet ID and a wallet password, and returns an\n     * initWalletHandleResponse containing a wallet handle token. This wallet\n     * handle token can be used for subsequent operations on this wallet, like key\n     * generation, transaction signing, etc.. WalletHandleTokens expire after a\n     * configurable number of seconds, and must be renewed periodically with\n     * RenewWalletHandle. It is good practice to call ReleaseWalletHandle when\n     * you're done interacting with this wallet.\n     * @param walletID\n     * @param walletPassword\n     */\n    async initWalletHandle(walletID, walletPassword) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword,\n        };\n        const res = await this.c.post('/v1/wallet/init', req);\n        return res.body;\n    }\n    /**\n     * releaseWalletHandle invalidates the passed wallet handle token, making\n     * it unusuable for subsequent wallet operations.\n     * @param walletHandle\n     */\n    async releaseWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n        };\n        const res = await this.c.post('/v1/wallet/release', req);\n        return res.body;\n    }\n    /**\n     * renewWalletHandle accepts a wallet handle and attempts to renew it, moving\n     * the expiration time to some number of seconds in the future. It returns a\n     * RenewWalletHandleResponse containing the walletHandle and the number of\n     * seconds until expiration\n     * @param walletHandle\n     */\n    async renewWalletHandle(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n        };\n        const res = await this.c.post('/v1/wallet/renew', req);\n        return res.body;\n    }\n    /**\n     * renameWallet accepts a wallet ID, wallet password, and a new wallet name,\n     * and renames the underlying wallet.\n     * @param walletID\n     * @param walletPassword\n     * @param newWalletName\n     */\n    async renameWallet(walletID, walletPassword, newWalletName) {\n        const req = {\n            wallet_id: walletID,\n            wallet_password: walletPassword,\n            wallet_name: newWalletName,\n        };\n        const res = await this.c.post('/v1/wallet/rename', req);\n        return res.body;\n    }\n    /**\n     * getWallet accepts a wallet handle and returns high level information about\n     * this wallet in a GetWalletResponse.\n     * @param walletHandle\n     */\n    async getWallet(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n        };\n        const res = await this.c.post('/v1/wallet/info', req);\n        return res.body;\n    }\n    /**\n     * exportMasterDerivationKey accepts a wallet handle and a wallet password, and\n     * returns an ExportMasterDerivationKeyResponse containing the master\n     * derivation key. This key can be used as an argument to CreateWallet in\n     * order to recover the keys generated by this wallet. The master derivation\n     * key can be encoded as a sequence of words using the mnemonic library, and\n     * @param walletHandle\n     * @param walletPassword\n     */\n    async exportMasterDerivationKey(walletHandle, walletPassword) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n        };\n        const res = await this.c.post('/v1/master-key/export', req);\n        return {\n            master_derivation_key: buffer_1.Buffer.from(res.body.master_derivation_key, 'base64'),\n        };\n    }\n    /**\n     * importKey accepts a wallet handle and an ed25519 private key, and imports\n     * the key into the wallet. It returns an ImportKeyResponse containing the\n     * address corresponding to this private key.\n     * @param walletHandle\n     * @param secretKey\n     */\n    async importKey(walletHandle, secretKey) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            private_key: buffer_1.Buffer.from(secretKey).toString('base64'),\n        };\n        const res = await this.c.post('/v1/key/import', req);\n        return res.body;\n    }\n    /**\n     * exportKey accepts a wallet handle, wallet password, and address, and returns\n     * an ExportKeyResponse containing the ed25519 private key corresponding to the\n     * address stored in the wallet.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */\n    async exportKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword,\n        };\n        const res = await this.c.post('/v1/key/export', req);\n        return { private_key: buffer_1.Buffer.from(res.body.private_key, 'base64') };\n    }\n    /**\n     * generateKey accepts a wallet handle, and then generates the next key in the\n     * wallet using its internal master derivation key. Two wallets with the same\n     * master derivation key will generate the same sequence of keys.\n     * @param walletHandle\n     */\n    async generateKey(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            display_mnemonic: false,\n        };\n        const res = await this.c.post('/v1/key', req);\n        return res.body;\n    }\n    /**\n     * deleteKey accepts a wallet handle, wallet password, and address, and deletes\n     * the information about this address from the wallet (including address and\n     * secret key). If DeleteKey is called on a key generated using GenerateKey,\n     * the same key will not be generated again. However, if a wallet is recovered\n     * using the master derivation key, a key generated in this way can be\n     * recovered.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */\n    async deleteKey(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword,\n        };\n        const res = await this.c.delete('/v1/key', req);\n        return res.body;\n    }\n    /**\n     * ListKeys accepts a wallet handle and returns a ListKeysResponse containing\n     * all of the addresses for which this wallet contains secret keys.\n     * @param walletHandle\n     */\n    async listKeys(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n        };\n        const res = await this.c.post('/v1/key/list', req);\n        return res.body;\n    }\n    /**\n     * signTransaction accepts a wallet handle, wallet password, and a transaction,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * Sender field.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     */\n    async signTransaction(walletHandle, walletPassword, transaction) {\n        const tx = txn.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: buffer_1.Buffer.from(tx.toByte()).toString('base64'),\n        };\n        const res = await this.c.post('/v1/transaction/sign', req);\n        if (res.status === 200) {\n            return buffer_1.Buffer.from(res.body.signed_transaction, 'base64');\n        }\n        return res.body;\n    }\n    /**\n     * signTransactionWithSpecificPublicKey accepts a wallet handle, wallet password, a transaction, and a public key,\n     * and returns and SignTransactionResponse containing an encoded, signed\n     * transaction. The transaction is signed using the key corresponding to the\n     * publicKey arg.\n     * @param walletHandle\n     * @param walletPassword\n     * @param transaction\n     * @param publicKey - sign the txn with the key corresponding to publicKey (used for working with a rekeyed addr)\n     */\n    async signTransactionWithSpecificPublicKey(walletHandle, walletPassword, transaction, publicKey) {\n        const tx = txn.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            wallet_password: walletPassword,\n            transaction: buffer_1.Buffer.from(tx.toByte()).toString('base64'),\n            public_key: buffer_1.Buffer.from(publicKey).toString('base64'),\n        };\n        const res = await this.c.post('/v1/transaction/sign', req);\n        if (res.status === 200) {\n            return buffer_1.Buffer.from(res.body.signed_transaction, 'base64');\n        }\n        return res.body;\n    }\n    /**\n     * listMultisig accepts a wallet handle and returns a ListMultisigResponse\n     * containing the multisig addresses whose preimages are stored in this wallet.\n     * A preimage is the information needed to reconstruct this multisig address,\n     * including multisig version information, threshold information, and a list\n     * of public keys.\n     * @param walletHandle\n     */\n    async listMultisig(walletHandle) {\n        const req = {\n            wallet_handle_token: walletHandle,\n        };\n        const res = await this.c.post('/v1/multisig/list', req);\n        return res.body;\n    }\n    /**\n     * importMultisig accepts a wallet handle and the information required to\n     * generate a multisig address. It derives this address, and stores all of the\n     * information within the wallet. It returns a ImportMultisigResponse with the\n     * derived address.\n     * @param walletHandle\n     * @param version\n     * @param threshold\n     * @param pks\n     */\n    async importMultisig(walletHandle, version, threshold, pks) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            multisig_version: version,\n            threshold,\n            pks,\n        };\n        const res = await this.c.post('/v1/multisig/import', req);\n        return res.body;\n    }\n    /**\n     * exportMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and returns an ExportMultisigResponse containing the stored\n     * multisig preimage. The preimage contains all of the information necessary\n     * to derive the multisig address, including version, threshold, and a list of\n     * public keys.\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */\n    async exportMultisig(walletHandle, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n        };\n        const res = await this.c.post('/v1/multisig/export', req);\n        return res.body;\n    }\n    /**\n     * signMultisigTransaction accepts a wallet handle, wallet password,\n     * transaction, public key (*not* an address), and an optional partial\n     * MultisigSig. It looks up the secret key corresponding to the public key, and\n     * returns a SignMultisigTransactionResponse containing a MultisigSig with a\n     * signature by the secret key included.\n     * @param walletHandle\n     * @param pw\n     * @param tx\n     * @param pk\n     * @param partial\n     */\n    async signMultisigTransaction(walletHandle, pw, transaction, pk, partial) {\n        const tx = txn.instantiateTxnIfNeeded(transaction);\n        const req = {\n            wallet_handle_token: walletHandle,\n            transaction: buffer_1.Buffer.from(tx.toByte()).toString('base64'),\n            public_key: buffer_1.Buffer.from(pk).toString('base64'),\n            partial_multisig: partial,\n            wallet_password: pw,\n        };\n        const res = await this.c.post('/v1/multisig/sign', req);\n        return res.body;\n    }\n    /**\n     * deleteMultisig accepts a wallet handle, wallet password, and multisig\n     * address, and deletes the information about this multisig address from the\n     * wallet (including address and secret key).\n     * @param walletHandle\n     * @param walletPassword\n     * @param addr\n     */\n    async deleteMultisig(walletHandle, walletPassword, addr) {\n        const req = {\n            wallet_handle_token: walletHandle,\n            address: addr,\n            wallet_password: walletPassword,\n        };\n        const res = await this.c.delete('/v1/multisig', req);\n        return res.body;\n    }\n}\nexports[\"default\"] = Kmd;\n//# sourceMappingURL=kmd.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/kmd.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.URLTokenBaseHTTPClient = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nclass URLTokenBaseHTTPError extends Error {\n    constructor(message, response) {\n        super(message);\n        this.response = response;\n        this.name = 'URLTokenBaseHTTPError';\n        this.response = response;\n    }\n}\n/**\n * Implementation of BaseHTTPClient that uses a URL and a token\n * and make the REST queries using fetch.\n * This is the default implementation of BaseHTTPClient.\n */\nclass URLTokenBaseHTTPClient {\n    constructor(tokenHeader, baseServer, port, defaultHeaders = {}) {\n        this.defaultHeaders = defaultHeaders;\n        // Append a trailing slash so we can use relative paths. Without the trailing\n        // slash, the last path segment will be replaced by the relative path. See\n        // usage in `addressWithPath`.\n        const fixedBaseServer = baseServer.endsWith('/')\n            ? baseServer\n            : `${baseServer}/`;\n        const baseServerURL = new URL(fixedBaseServer);\n        if (typeof port !== 'undefined') {\n            baseServerURL.port = port.toString();\n        }\n        if (baseServerURL.protocol.length === 0) {\n            throw new Error('Invalid base server URL, protocol must be defined.');\n        }\n        this.baseURL = baseServerURL;\n        this.tokenHeader = tokenHeader;\n    }\n    /**\n     * Compute the URL for a path relative to the instance's address\n     * @param relativePath - A path string\n     * @param query - An optional key-value object of query parameters to add to the URL. If the\n     *   relativePath already has query parameters on it, the additional parameters defined here will\n     *   be added to the URL without modifying those (unless a key collision occurs).\n     * @returns A URL string\n     */\n    getURL(relativePath, query) {\n        let fixedRelativePath;\n        if (relativePath.startsWith('./')) {\n            fixedRelativePath = relativePath;\n        }\n        else if (relativePath.startsWith('/')) {\n            fixedRelativePath = `.${relativePath}`;\n        }\n        else {\n            fixedRelativePath = `./${relativePath}`;\n        }\n        const address = new URL(fixedRelativePath, this.baseURL);\n        if (query) {\n            for (const [key, value] of Object.entries(query)) {\n                address.searchParams.set(key, value);\n            }\n        }\n        return address.toString();\n    }\n    static formatFetchResponseHeaders(headers) {\n        const headersObj = {};\n        headers.forEach((key, value) => {\n            headersObj[key] = value;\n        });\n        return headersObj;\n    }\n    static async checkHttpError(res) {\n        if (res.ok) {\n            return;\n        }\n        let body = null;\n        let bodyErrorMessage = null;\n        try {\n            body = new Uint8Array(await res.arrayBuffer());\n            const decoded = JSON.parse(buffer_1.Buffer.from(body).toString());\n            if (decoded.message) {\n                bodyErrorMessage = decoded.message;\n            }\n        }\n        catch (_) {\n            // ignore any error that happened while we are parsing the error response\n        }\n        let message = `Network request error. Received status ${res.status} (${res.statusText})`;\n        if (bodyErrorMessage) {\n            message += `: ${bodyErrorMessage}`;\n        }\n        throw new URLTokenBaseHTTPError(message, {\n            body,\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),\n        });\n    }\n    static async formatFetchResponse(res) {\n        await this.checkHttpError(res);\n        return {\n            body: new Uint8Array(await res.arrayBuffer()),\n            status: res.status,\n            headers: URLTokenBaseHTTPClient.formatFetchResponseHeaders(res.headers),\n        };\n    }\n    async get(relativePath, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders,\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            headers,\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async post(relativePath, data, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders,\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            method: 'POST',\n            body: data,\n            headers,\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n    async delete(relativePath, data, query, requestHeaders = {}) {\n        // Expand headers for use in fetch\n        const headers = {\n            ...this.tokenHeader,\n            ...this.defaultHeaders,\n            ...requestHeaders,\n        };\n        const res = await fetch(this.getURL(relativePath, query), {\n            method: 'DELETE',\n            body: data,\n            headers,\n        });\n        return URLTokenBaseHTTPClient.formatFetchResponse(res);\n    }\n}\nexports.URLTokenBaseHTTPClient = URLTokenBaseHTTPClient;\n//# sourceMappingURL=urlTokenBaseHTTPClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/urlTokenBaseHTTPClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass AccountApplicationInformation extends jsonrequest_1.default {\n    constructor(c, intDecoding, account, applicationID) {\n        super(c, intDecoding);\n        this.account = account;\n        this.applicationID = applicationID;\n        this.account = account;\n        this.applicationID = applicationID;\n    }\n    path() {\n        return `/v2/accounts/${this.account}/applications/${this.applicationID}`;\n    }\n}\nexports[\"default\"] = AccountApplicationInformation;\n//# sourceMappingURL=accountApplicationInformation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFwcGxpY2F0aW9uSW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWEsZ0JBQWdCLG1CQUFtQjtBQUMvRTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2FjY291bnRBcHBsaWNhdGlvbkluZm9ybWF0aW9uLmpzPzkyZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBBY2NvdW50QXBwbGljYXRpb25JbmZvcm1hdGlvbiBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQsIGFwcGxpY2F0aW9uSUQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uSUQgPSBhcHBsaWNhdGlvbklEO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uSUQgPSBhcHBsaWNhdGlvbklEO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXBwbGljYXRpb25zLyR7dGhpcy5hcHBsaWNhdGlvbklEfWA7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQWNjb3VudEFwcGxpY2F0aW9uSW5mb3JtYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2NvdW50QXBwbGljYXRpb25JbmZvcm1hdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass AccountAssetInformation extends jsonrequest_1.default {\n    constructor(c, intDecoding, account, assetID) {\n        super(c, intDecoding);\n        this.account = account;\n        this.assetID = assetID;\n        this.account = account;\n        this.assetID = assetID;\n    }\n    path() {\n        return `/v2/accounts/${this.account}/assets/${this.assetID}`;\n    }\n}\nexports[\"default\"] = AccountAssetInformation;\n//# sourceMappingURL=accountAssetInformation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWEsVUFBVSxhQUFhO0FBQ25FO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEFzc2V0SW5mb3JtYXRpb24uanM/ZWVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIEFjY291bnRBc3NldEluZm9ybWF0aW9uIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgYWNjb3VudCwgYXNzZXRJRCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgICAgIHRoaXMuYXNzZXRJRCA9IGFzc2V0SUQ7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgICAgIHRoaXMuYXNzZXRJRCA9IGFzc2V0SUQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fS9hc3NldHMvJHt0aGlzLmFzc2V0SUR9YDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBBY2NvdW50QXNzZXRJbmZvcm1hdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnRBc3NldEluZm9ybWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass AccountInformation extends jsonrequest_1.default {\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Exclude assets and application data from results\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address)\n     *        .exclude('all')\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n}\nexports[\"default\"] = AccountInformation;\n//# sourceMappingURL=accountInformation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvYWNjb3VudEluZm9ybWF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9hY2NvdW50SW5mb3JtYXRpb24uanM/MzJmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIEFjY291bnRJbmZvcm1hdGlvbiBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGNsdWRlIGFzc2V0cyBhbmQgYXBwbGljYXRpb24gZGF0YSBmcm9tIHJlc3VsdHNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCBhbGdvZENsaWVudC5hY2NvdW50SW5mb3JtYXRpb24oYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmV4Y2x1ZGUoJ2FsbCcpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHJvdW5kXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgZXhjbHVkZShleGNsdWRlKSB7XG4gICAgICAgIHRoaXMucXVlcnkuZXhjbHVkZSA9IGV4Y2x1ZGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEFjY291bnRJbmZvcm1hdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY291bnRJbmZvcm1hdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/algod.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/algod.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst serviceClient_1 = __importDefault(__webpack_require__(/*! ../serviceClient */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js\"));\nconst modelsv2 = __importStar(__webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\"));\nconst accountInformation_1 = __importDefault(__webpack_require__(/*! ./accountInformation */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountInformation.js\"));\nconst accountAssetInformation_1 = __importDefault(__webpack_require__(/*! ./accountAssetInformation */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountAssetInformation.js\"));\nconst accountApplicationInformation_1 = __importDefault(__webpack_require__(/*! ./accountApplicationInformation */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/accountApplicationInformation.js\"));\nconst block_1 = __importDefault(__webpack_require__(/*! ./block */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/block.js\"));\nconst compile_1 = __importDefault(__webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/compile.js\"));\nconst dryrun_1 = __importDefault(__webpack_require__(/*! ./dryrun */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js\"));\nconst genesis_1 = __importDefault(__webpack_require__(/*! ./genesis */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js\"));\nconst getAssetByID_1 = __importDefault(__webpack_require__(/*! ./getAssetByID */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js\"));\nconst getApplicationByID_1 = __importDefault(__webpack_require__(/*! ./getApplicationByID */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js\"));\nconst getBlockHash_1 = __importDefault(__webpack_require__(/*! ./getBlockHash */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js\"));\nconst getBlockTxids_1 = __importDefault(__webpack_require__(/*! ./getBlockTxids */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js\"));\nconst getApplicationBoxByName_1 = __importDefault(__webpack_require__(/*! ./getApplicationBoxByName */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js\"));\nconst getApplicationBoxes_1 = __importDefault(__webpack_require__(/*! ./getApplicationBoxes */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js\"));\nconst healthCheck_1 = __importDefault(__webpack_require__(/*! ./healthCheck */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js\"));\nconst pendingTransactionInformation_1 = __importDefault(__webpack_require__(/*! ./pendingTransactionInformation */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js\"));\nconst pendingTransactions_1 = __importDefault(__webpack_require__(/*! ./pendingTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js\"));\nconst pendingTransactionsByAddress_1 = __importDefault(__webpack_require__(/*! ./pendingTransactionsByAddress */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js\"));\nconst getTransactionProof_1 = __importDefault(__webpack_require__(/*! ./getTransactionProof */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js\"));\nconst sendRawTransaction_1 = __importDefault(__webpack_require__(/*! ./sendRawTransaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js\"));\nconst status_1 = __importDefault(__webpack_require__(/*! ./status */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/status.js\"));\nconst statusAfterBlock_1 = __importDefault(__webpack_require__(/*! ./statusAfterBlock */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js\"));\nconst suggestedParams_1 = __importDefault(__webpack_require__(/*! ./suggestedParams */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js\"));\nconst supply_1 = __importDefault(__webpack_require__(/*! ./supply */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/supply.js\"));\nconst versions_1 = __importDefault(__webpack_require__(/*! ./versions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/versions.js\"));\nconst lightBlockHeaderProof_1 = __importDefault(__webpack_require__(/*! ./lightBlockHeaderProof */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js\"));\nconst stateproof_1 = __importDefault(__webpack_require__(/*! ./stateproof */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js\"));\nconst setSyncRound_1 = __importDefault(__webpack_require__(/*! ./setSyncRound */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js\"));\nconst getSyncRound_1 = __importDefault(__webpack_require__(/*! ./getSyncRound */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js\"));\nconst setBlockOffsetTimestamp_1 = __importDefault(__webpack_require__(/*! ./setBlockOffsetTimestamp */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js\"));\nconst getBlockOffsetTimestamp_1 = __importDefault(__webpack_require__(/*! ./getBlockOffsetTimestamp */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js\"));\nconst disassemble_1 = __importDefault(__webpack_require__(/*! ./disassemble */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js\"));\nconst simulateTransaction_1 = __importDefault(__webpack_require__(/*! ./simulateTransaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst ready_1 = __importDefault(__webpack_require__(/*! ./ready */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/ready.js\"));\nconst unsetSyncRound_1 = __importDefault(__webpack_require__(/*! ./unsetSyncRound */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js\"));\nconst getLedgerStateDeltaForTransactionGroup_1 = __importDefault(__webpack_require__(/*! ./getLedgerStateDeltaForTransactionGroup */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js\"));\nconst getLedgerStateDelta_1 = __importDefault(__webpack_require__(/*! ./getLedgerStateDelta */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js\"));\nconst getTransactionGroupLedgerStateDeltasForRound_1 = __importDefault(__webpack_require__(/*! ./getTransactionGroupLedgerStateDeltasForRound */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js\"));\n/**\n * Algod client connects an application to the Algorand blockchain. The algod client requires a valid algod REST endpoint IP address and algod token from an Algorand node that is connected to the network you plan to interact with.\n *\n * Algod is the main Algorand process for handling the blockchain. Messages between nodes are processed, the protocol steps are executed, and the blocks are written to disk. The algod process also exposes a REST API server that developers can use to communicate with the node and the network. Algod uses the data directory for storage and configuration information.\n *\n * #### Relevant Information\n * [How do I obtain an algod address and token?](https://developer.algorand.org/docs/archive/build-apps/setup/?from_query=algod#how-do-i-obtain-an-algod-address-and-token)\n *\n * [Run Algod in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/?from_query=algod#algod-indexer-and-kmd-rest-endpoints)\n */\nclass AlgodClient extends serviceClient_1.default {\n    /**\n     * Create an AlgodClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n     * const server = \"http://localhost\";\n     * const port   = 4001;\n     * const algodClient = new algosdk.Algodv2(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The algod token from the Algorand node you are interacting with\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */\n    constructor(tokenOrBaseClient, baseServer, port, headers = {}) {\n        super('X-Algo-API-Token', tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns OK if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * const health = await algodClient.healthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-health)\n     * @category GET\n     */\n    healthCheck() {\n        return new healthCheck_1.default(this.c);\n    }\n    /**\n     * Retrieves the supported API versions, binary build versions, and genesis information.\n     *\n     * #### Example\n     * ```typescript\n     * const versionsDetails = await algodClient.versionsCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-versions)\n     * @category GET\n     */\n    versionsCheck() {\n        return new versions_1.default(this.c);\n    }\n    /**\n     * Broadcasts a raw transaction to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const { txId } = await algodClient.sendRawTransaction(signedTxns).do();\n     * const result = await waitForConfirmation(algodClient, txid, 3);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactions)\n     *\n     * @remarks\n     * Often used with {@linkcode waitForConfirmation}\n     * @param stxOrStxs - Signed transactions\n     * @category POST\n     */\n    sendRawTransaction(stxOrStxs) {\n        return new sendRawTransaction_1.default(this.c, stxOrStxs);\n    }\n    /**\n     * Returns the given account's status, balance and spendable amounts.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await algodClient.accountInformation(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    accountInformation(account) {\n        return new accountInformation_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns the given account's asset information for a specific asset.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountAssetInfo = await algodClient.accountAssetInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The asset ID to look up.\n     * @category GET\n     */\n    accountAssetInformation(account, index) {\n        return new accountAssetInformation_1.default(this.c, this.intDecoding, account, index);\n    }\n    /**\n     * Returns the given account's application information for a specific application.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const index = 60553466;\n     * const accountInfo = await algodClient.accountApplicationInformation(address, index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddress)\n     * @param account - The address of the account to look up.\n     * @param index - The application ID to look up.\n     * @category GET\n     */\n    accountApplicationInformation(account, index) {\n        return new accountApplicationInformation_1.default(this.c, this.intDecoding, account, index);\n    }\n    /**\n     * Gets the block info for the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.block(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksround)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */\n    block(roundNumber) {\n        return new block_1.default(this.c, roundNumber);\n    }\n    /**\n     * Get the block hash for the block on the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.getBlockHash(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundhash)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */\n    getBlockHash(roundNumber) {\n        return new getBlockHash_1.default(this.c, this.intDecoding, roundNumber);\n    }\n    /**\n     * Get the top level transaction IDs for the block on the given round.\n     *\n     * #### Example\n     * ```typescript\n     * const roundNumber = 18038133;\n     * const block = await algodClient.getBlockTxids(roundNumber).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtxids)\n     * @param roundNumber - The round number of the block to get.\n     * @category GET\n     */\n    getBlockTxids(roundNumber) {\n        return new getBlockTxids_1.default(this.c, this.intDecoding, roundNumber);\n    }\n    /**\n     * Returns the transaction information for a specific pending transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"DRJS6R745A7GFVMXEXWP4TGVDGKW7VILFTA7HC2BR2GRLHNY5CTA\";\n     * const pending = await algodClient.pendingTransactionInformation(txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspendingtxid)\n     *\n     * @remarks\n     * <br><br>\n     * There are several cases when this might succeed:\n     * - transaction committed (committed round > 0)\n     * - transaction still in the pool (committed round = 0, pool error = \"\")\n     * - transaction removed from pool due to error (committed round = 0, pool error != \"\")\n     *\n     * Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.\n     *\n     * @param txid - The TxID string of the pending transaction to look up.\n     * @category GET\n     */\n    pendingTransactionInformation(txid) {\n        return new pendingTransactionInformation_1.default(this.c, txid);\n    }\n    /**\n     * Returns the list of pending transactions in the pool, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const pendingTxns = await algodClient.pendingTransactionsInformation().do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionsInformation()\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionspending)\n     * @category GET\n     */\n    pendingTransactionsInformation() {\n        return new pendingTransactions_1.default(this.c);\n    }\n    /**\n     * Returns the list of pending transactions sent by the address, sorted by priority, in decreasing order, truncated at the end at MAX.\n     * If MAX = 0, returns all pending transactions.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxnsByAddr = await algodClient.pendingTransactionByAddress(address).do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const maxTxns = 5;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const pendingTxns = await algodClient\n     *     .pendingTransactionByAddress(address)\n     *     .max(maxTxns)\n     *     .do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2accountsaddresstransactionspending)\n     * @param address - The address of the sender.\n     * @category GET\n     */\n    pendingTransactionByAddress(address) {\n        return new pendingTransactionsByAddress_1.default(this.c, address);\n    }\n    /**\n     * Retrieves the StatusResponse from the running node.\n     *\n     * #### Example\n     * ```typescript\n     * const status = await algodClient.status().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2status)\n     * @category GET\n     */\n    status() {\n        return new status_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Waits for a specific round to occur then returns the `StatusResponse` for that round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const statusAfterBlock = await algodClient.statusAfterBlock(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2statuswait-for-block-afterround)\n     * @param round - The number of the round to wait for.\n     * @category GET\n     */\n    statusAfterBlock(round) {\n        return new statusAfterBlock_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * Returns the common needed parameters for a new transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const suggestedParams = await algodClient.getTransactionParams().do();\n     * const amountInMicroAlgos = algosdk.algosToMicroalgos(2); // 2 Algos\n     * const unsignedTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n     *   from: senderAddress,\n     *   to: receiverAddress,\n     *   amount: amountInMicroAlgos,\n     *   suggestedParams: suggestedParams,\n     * });\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2transactionsparams)\n     *\n     * @remarks\n     * Often used with\n     * {@linkcode makePaymentTxnWithSuggestedParamsFromObject}, {@linkcode algosToMicroalgos}\n     * @category GET\n     */\n    getTransactionParams() {\n        return new suggestedParams_1.default(this.c);\n    }\n    /**\n     * Returns the supply details for the specified node's ledger.\n     *\n     * #### Example\n     * ```typescript\n     * const supplyDetails = await algodClient.supply().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersupply)\n     * @category GET\n     */\n    supply() {\n        return new supply_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Compiles TEAL source code to binary, returns base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style).\n     *\n     * #### Example\n     * ```typescript\n     * const source = \"TEAL SOURCE CODE\";\n     * const compiledSmartContract = await algodClient.compile(source).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealcompile)\n     * @remarks\n     * This endpoint is only enabled when a node's configuration file sets `EnableDeveloperAPI` to true.\n     * @param source\n     * @category POST\n     */\n    compile(source) {\n        return new compile_1.default(this.c, source);\n    }\n    /**\n     * Given the program bytes, return the TEAL source code in plain text.\n     *\n     * #### Example\n     * ```typescript\n     * const bytecode = \"TEAL bytecode\";\n     * const disassembledSource = await algodClient.disassemble(bytecode).do();\n     * ```\n     *\n     * @remarks This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.\n     * @param source\n     */\n    disassemble(source) {\n        return new disassemble_1.default(this.c, source);\n    }\n    /**\n     * Provides debugging information for a transaction (or group).\n     *\n     * Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configureation file sets `EnableDeveloperAPI` to true.\n     *\n     * #### Example\n     * ```typescript\n     * const dryRunResult = await algodClient.dryrun(dr).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2tealdryrun)\n     * @param dr\n     * @category POST\n     */\n    dryrun(dr) {\n        return new dryrun_1.default(this.c, dr);\n    }\n    /**\n     * Given an asset ID, return asset information including creator, name, total supply and\n     * special addresses.\n     *\n     * #### Example\n     * ```typescript\n     * const asset_id = 163650;\n     * const asset = await algodClient.getAssetByID(asset_id).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */\n    getAssetByID(index) {\n        return new getAssetByID_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Given an application ID, return the application information including creator, approval\n     * and clear programs, global and local schemas, and global state.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const app = await algodClient.getApplicationByID(index).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-id)\n     * @param index - The application ID to look up.\n     * @category GET\n     */\n    getApplicationByID(index) {\n        return new getApplicationByID_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Given an application ID and the box name (key), return the value stored in the box.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n     * @param index - The application ID to look up.\n     * @category GET\n     */\n    getApplicationBoxByName(index, boxName) {\n        return new getApplicationBoxByName_1.default(this.c, this.intDecoding, index, boxName);\n    }\n    /**\n     * Given an application ID, return all the box names associated with the app.\n     *\n     * #### Example\n     * ```typescript\n     * const index = 60553466;\n     * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n     * const boxNames = boxesResponse.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n     * @param index - The application ID to look up.\n     * @category GET\n     */\n    getApplicationBoxes(index) {\n        return new getApplicationBoxes_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns the entire genesis file.\n     *\n     * #### Example\n     * ```typescript\n     * const genesis = await algodClient.genesis().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-genesis)\n     * @category GET\n     */\n    genesis() {\n        return new genesis_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns a Merkle proof for a given transaction in a block.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 18038133;\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const proof = await algodClient.getTransactionProof(round, txId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2blocksroundtransactionstxidproof)\n     * @param round - The round in which the transaction appears.\n     * @param txID - The transaction ID for which to generate a proof.\n     * @category GET\n     */\n    getTransactionProof(round, txID) {\n        return new getTransactionProof_1.default(this.c, this.intDecoding, round, txID);\n    }\n    /**\n     * Gets a proof for a given light block header inside a state proof commitment.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const lightBlockHeaderProof = await algodClient.getLightBlockHeaderProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2blocksroundlightheaderproof)\n     * @param round\n     */\n    getLightBlockHeaderProof(round) {\n        return new lightBlockHeaderProof_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * Gets a state proof that covers a given round.\n     *\n     * #### Example\n     * ```typescript\n     * const round = 11111111;\n     * const stateProof = await algodClient.getStateProof(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/v2#get-v2stateproofsround)\n     * @param round\n     */\n    getStateProof(round) {\n        return new stateproof_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * Simulate a list of a signed transaction objects being sent to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);\n     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);\n     * const txgroup = algosdk.assignGroupID([txn1, txn2]);\n     *\n     * // Actually sign the first transaction\n     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;\n     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction\n     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);\n     *\n     * const resp = await client.simulateRawTransactions([signedTxn1, signedTxn2]).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)\n     * @param stxOrStxs\n     * @category POST\n     */\n    simulateRawTransactions(stxOrStxs) {\n        const txnObjects = [];\n        if (Array.isArray(stxOrStxs)) {\n            for (const stxn of stxOrStxs) {\n                txnObjects.push(encoding.decode(stxn));\n            }\n        }\n        else {\n            txnObjects.push(encoding.decode(stxOrStxs));\n        }\n        const request = new modelsv2.SimulateRequest({\n            txnGroups: [\n                new modelsv2.SimulateRequestTransactionGroup({\n                    txns: txnObjects,\n                }),\n            ],\n        });\n        return this.simulateTransactions(request);\n    }\n    /**\n     * Simulate transactions being sent to the network.\n     *\n     * #### Example\n     * ```typescript\n     * const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn1Params);\n     * const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject(txn2Params);\n     * const txgroup = algosdk.assignGroupID([txn1, txn2]);\n     *\n     * // Actually sign the first transaction\n     * const signedTxn1 = txgroup[0].signTxn(senderSk).blob;\n     * // Simulate does not require signed transactions -- use this method to encode an unsigned transaction\n     * const signedTxn2 = algosdk.encodeUnsignedSimulateTransaction(txgroup[1]);\n     *\n     * const request = new modelsv2.SimulateRequest({\n     *  txnGroups: [\n     *    new modelsv2.SimulateRequestTransactionGroup({\n     *       // Must decode the signed txn bytes into an object\n     *       txns: [algosdk.decodeObj(signedTxn1), algosdk.decodeObj(signedTxn2)]\n     *     }),\n     *   ],\n     * });\n     * const resp = await client.simulateRawTransactions(request).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2transactionssimulate)\n     * @param request\n     * @category POST\n     */\n    simulateTransactions(request) {\n        return new simulateTransaction_1.default(this.c, request);\n    }\n    /**\n     * Set the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const offset = 60\n     *  await client.setBlockOffsetTimestamp(offset).do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2devmodeblocksoffsetoffset)\n     * @param offset\n     * @category POST\n     */\n    setBlockOffsetTimestamp(offset) {\n        return new setBlockOffsetTimestamp_1.default(this.c, this.intDecoding, offset);\n    }\n    /**\n     * Get the offset (in seconds) applied to the block timestamp when creating new blocks in devmode.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const currentOffset = await client.getBlockOffsetTimestamp().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2devmodeblocksoffset)\n     * @category GET\n     */\n    getBlockOffsetTimestamp() {\n        return new getBlockOffsetTimestamp_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Set the sync round on the ledger (algod must have EnableFollowMode: true), restricting catchup.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const round = 10000\n     *  await client.setSyncRound(round).do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#post-v2ledgersyncround)\n     * @param round\n     * @category POST\n     */\n    setSyncRound(round) {\n        return new setSyncRound_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * Un-Set the sync round on the ledger (algod must have EnableFollowMode: true), removing the restriction on catchup.\n     *\n     *  #### Example\n     *  ```typesecript\n     *  await client.unsetSyncRound().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#delete-v2ledgersync)\n     * @category DELETE\n     */\n    unsetSyncRound() {\n        return new unsetSyncRound_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Get the current sync round on the ledger (algod must have EnableFollowMode: true).\n     *\n     *  #### Example\n     *  ```typesecript\n     *  const currentSyncRound = await client.getSyncRound().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2ledgersync)\n     * @category GET\n     */\n    getSyncRound() {\n        return new getSyncRound_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Ready check which returns 200 OK if algod is healthy and caught up\n     *\n     *  #### Example\n     *  ```typesecript\n     *  await client.ready().do();\n     *  ```\n     *\n     [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-ready)\n     * @category GET\n     */\n    ready() {\n        return new ready_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * GetLedgerStateDeltaForTransactionGroup returns the ledger delta for the txn group identified by id\n     *\n     * #### Example\n     * ```typescript\n     * const id = \"ABC123\";\n     * await client.getLedgerStateDeltaForTransactionGroup(id).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltastxngroupid)\n     * @param id txn ID or group ID to be searched for\n     * @category GET\n     */\n    getLedgerStateDeltaForTransactionGroup(id) {\n        return new getLedgerStateDeltaForTransactionGroup_1.default(this.c, this.intDecoding, id);\n    }\n    /**\n     * GetLedgerStateDelta returns the ledger delta for the entire round\n     *\n     * #### Example\n     * ```typescript\n     * const round = 12345;\n     * await client.getLedgerStateDelta(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasround)\n     * @param round the round number to be searched for\n     * @category GET\n     */\n    getLedgerStateDelta(round) {\n        return new getLedgerStateDelta_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * GetTransactionGroupLedgerStateDeltasForRound returns all ledger deltas for txn groups in the provided round\n     *\n     * #### Example\n     * ```typescript\n     * const round = 12345;\n     * await client.getTransactionGroupLedgerStateDeltasForRound(round).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2deltasroundtxngroup)\n     * @param round the round number to be searched for\n     * @category GET\n     */\n    getTransactionGroupLedgerStateDeltasForRound(round) {\n        return new getTransactionGroupLedgerStateDeltasForRound_1.default(this.c, this.intDecoding, round);\n    }\n}\nexports[\"default\"] = AlgodClient;\n//# sourceMappingURL=algod.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/algod.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/block.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/block.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * block gets the block info for the given round. this call may block\n */\nclass Block extends jsonrequest_1.default {\n    constructor(c, roundNumber) {\n        super(c);\n        if (!Number.isInteger(roundNumber))\n            throw Error('roundNumber should be an integer');\n        this.round = roundNumber;\n        this.query = { format: 'msgpack' };\n    }\n    path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return encoding.decode(body);\n        }\n        return undefined;\n    }\n}\nexports[\"default\"] = Block;\n//# sourceMappingURL=block.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvYmxvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLG1CQUFPLENBQUMsOEZBQTRCO0FBQ2xFLHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLDZCQUE2QixXQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9ibG9jay5qcz84OGVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlbmNvZGluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmdcIikpO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuLyoqXG4gKiBibG9jayBnZXRzIHRoZSBibG9jayBpbmZvIGZvciB0aGUgZ2l2ZW4gcm91bmQuIHRoaXMgY2FsbCBtYXkgYmxvY2tcbiAqL1xuY2xhc3MgQmxvY2sgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIHJvdW5kTnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocm91bmROdW1iZXIpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3JvdW5kTnVtYmVyIHNob3VsZCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZE51bWJlcjtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHsgZm9ybWF0OiAnbXNncGFjaycgfTtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICBpZiAoYm9keSAmJiBib2R5LmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RpbmcuZGVjb2RlKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQmxvY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/block.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/compile.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/compile.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setHeaders = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Sets the default header (if not previously set)\n * @param headers - A headers object\n */\nfunction setHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n        hdrs = { ...headers };\n        hdrs['Content-Type'] = 'text/plain';\n    }\n    return hdrs;\n}\nexports.setHeaders = setHeaders;\n/**\n * Executes compile\n */\nclass Compile extends jsonrequest_1.default {\n    constructor(c, source) {\n        super(c);\n        this.source = source;\n        this.source = source;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/teal/compile`;\n    }\n    sourcemap(map = true) {\n        this.query.sourcemap = map;\n        return this;\n    }\n    /**\n     * Executes compile\n     * @param headers - A headers object\n     */\n    async do(headers = {}) {\n        const txHeaders = setHeaders(headers);\n        const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.source), txHeaders, this.query);\n        return res.body;\n    }\n}\nexports[\"default\"] = Compile;\n//# sourceMappingURL=compile.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvY29tcGlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9jb21waWxlLmpzPzU1NWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldEhlYWRlcnMgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgaGVhZGVyIChpZiBub3QgcHJldmlvdXNseSBzZXQpXG4gKiBAcGFyYW0gaGVhZGVycyAtIEEgaGVhZGVycyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gc2V0SGVhZGVycyhoZWFkZXJzID0ge30pIHtcbiAgICBsZXQgaGRycyA9IGhlYWRlcnM7XG4gICAgaWYgKE9iamVjdC5rZXlzKGhkcnMpLmV2ZXJ5KChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaGRycyA9IHsgLi4uaGVhZGVycyB9O1xuICAgICAgICBoZHJzWydDb250ZW50LVR5cGUnXSA9ICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG5leHBvcnRzLnNldEhlYWRlcnMgPSBzZXRIZWFkZXJzO1xuLyoqXG4gKiBFeGVjdXRlcyBjb21waWxlXG4gKi9cbmNsYXNzIENvbXBpbGUgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIHNvdXJjZSkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL3RlYWwvY29tcGlsZWA7XG4gICAgfVxuICAgIHNvdXJjZW1hcChtYXAgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnkuc291cmNlbWFwID0gbWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgY29tcGlsZVxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gQSBoZWFkZXJzIG9iamVjdFxuICAgICAqL1xuICAgIGFzeW5jIGRvKGhlYWRlcnMgPSB7fSkge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRIZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmMucG9zdCh0aGlzLnBhdGgoKSwgYnVmZmVyXzEuQnVmZmVyLmZyb20odGhpcy5zb3VyY2UpLCB0eEhlYWRlcnMsIHRoaXMucXVlcnkpO1xuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcGlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBpbGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/compile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js":
/*!**********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setHeaders = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Sets the default header (if not previously set)\n * @param headers - A headers object\n */\nfunction setHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n        hdrs = { ...headers };\n        hdrs['Content-Type'] = 'text/plain';\n    }\n    return hdrs;\n}\nexports.setHeaders = setHeaders;\n/**\n * Executes disassemble\n */\nclass Disassemble extends jsonrequest_1.default {\n    constructor(c, source) {\n        super(c);\n        this.source = source;\n        this.source = source;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/teal/disassemble`;\n    }\n    /**\n     * Executes disassemble\n     * @param headers - A headers object\n     */\n    async do(headers = {}) {\n        const txHeaders = setHeaders(headers);\n        const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.source), txHeaders, this.query);\n        return res.body;\n    }\n}\nexports[\"default\"] = Disassemble;\n//# sourceMappingURL=disassemble.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZGlzYXNzZW1ibGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2Rpc2Fzc2VtYmxlLmpzPzM1MWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNldEhlYWRlcnMgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgaGVhZGVyIChpZiBub3QgcHJldmlvdXNseSBzZXQpXG4gKiBAcGFyYW0gaGVhZGVycyAtIEEgaGVhZGVycyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gc2V0SGVhZGVycyhoZWFkZXJzID0ge30pIHtcbiAgICBsZXQgaGRycyA9IGhlYWRlcnM7XG4gICAgaWYgKE9iamVjdC5rZXlzKGhkcnMpLmV2ZXJ5KChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaGRycyA9IHsgLi4uaGVhZGVycyB9O1xuICAgICAgICBoZHJzWydDb250ZW50LVR5cGUnXSA9ICd0ZXh0L3BsYWluJztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG5leHBvcnRzLnNldEhlYWRlcnMgPSBzZXRIZWFkZXJzO1xuLyoqXG4gKiBFeGVjdXRlcyBkaXNhc3NlbWJsZVxuICovXG5jbGFzcyBEaXNhc3NlbWJsZSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgc291cmNlKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvdGVhbC9kaXNhc3NlbWJsZWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIGRpc2Fzc2VtYmxlXG4gICAgICogQHBhcmFtIGhlYWRlcnMgLSBBIGhlYWRlcnMgb2JqZWN0XG4gICAgICovXG4gICAgYXN5bmMgZG8oaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHR4SGVhZGVycyA9IHNldEhlYWRlcnMoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5wb3N0KHRoaXMucGF0aCgpLCBidWZmZXJfMS5CdWZmZXIuZnJvbSh0aGlzLnNvdXJjZSksIHR4SGVhZGVycywgdGhpcy5xdWVyeSk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBEaXNhc3NlbWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc2Fzc2VtYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/disassemble.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst compile_1 = __webpack_require__(/*! ./compile */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/compile.js\");\nclass Dryrun extends jsonrequest_1.default {\n    constructor(c, dr) {\n        super(c);\n        this.blob = encoding.encode(dr.get_obj_for_encoding(true));\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/teal/dryrun';\n    }\n    /**\n     * Executes dryrun\n     * @param headers - A headers object\n     */\n    async do(headers = {}) {\n        const txHeaders = (0, compile_1.setHeaders)(headers);\n        const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.blob), txHeaders);\n        return res.body;\n    }\n}\nexports[\"default\"] = Dryrun;\n//# sourceMappingURL=dryrun.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZHJ5cnVuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RCw4QkFBOEIsbUJBQU8sQ0FBQyw4RkFBNEI7QUFDbEUsa0JBQWtCLG1CQUFPLENBQUMsbUZBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9kcnlydW4uanM/MDc4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY29uc3QgZW5jb2RpbmcgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nXCIpKTtcbmNvbnN0IGNvbXBpbGVfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGVcIik7XG5jbGFzcyBEcnlydW4gZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGRyKSB7XG4gICAgICAgIHN1cGVyKGMpO1xuICAgICAgICB0aGlzLmJsb2IgPSBlbmNvZGluZy5lbmNvZGUoZHIuZ2V0X29ial9mb3JfZW5jb2RpbmcodHJ1ZSkpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RlYWwvZHJ5cnVuJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgZHJ5cnVuXG4gICAgICogQHBhcmFtIGhlYWRlcnMgLSBBIGhlYWRlcnMgb2JqZWN0XG4gICAgICovXG4gICAgYXN5bmMgZG8oaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHR4SGVhZGVycyA9ICgwLCBjb21waWxlXzEuc2V0SGVhZGVycykoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5wb3N0KHRoaXMucGF0aCgpLCBidWZmZXJfMS5CdWZmZXIuZnJvbSh0aGlzLmJsb2IpLCB0eEhlYWRlcnMpO1xuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRHJ5cnVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJ5cnVuLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass Genesis extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/genesis';\n    }\n}\nexports[\"default\"] = Genesis;\n//# sourceMappingURL=genesis.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2VuZXNpcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2VuZXNpcy5qcz81YjkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgR2VuZXNpcyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9nZW5lc2lzJztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBHZW5lc2lzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXNpcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/genesis.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\n/**\n * Given an application ID and the box name (key), return the value stored in the box.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxName = Buffer.from(\"foo\");\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\n * const boxValue = boxResponse.value;\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\n * @param index - The application ID to look up.\n * @category GET\n */\nclass GetApplicationBoxByName extends jsonrequest_1.default {\n    constructor(c, intDecoding, index, name) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        // Encode name in base64 format and append the encoding prefix.\n        const encodedName = buffer_1.Buffer.from(name).toString('base64');\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */\n    path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.Box.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = GetApplicationBoxByName;\n//# sourceMappingURL=getApplicationBoxByName.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hCeU5hbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBLG9DQUFvQyxNQUFNO0FBQzFDO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hCeU5hbWUuanM/MjgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi9tb2RlbHMvdHlwZXNcIik7XG4vKipcbiAqIEdpdmVuIGFuIGFwcGxpY2F0aW9uIElEIGFuZCB0aGUgYm94IG5hbWUgKGtleSksIHJldHVybiB0aGUgdmFsdWUgc3RvcmVkIGluIHRoZSBib3guXG4gKlxuICogIyMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCBpbmRleCA9IDYwNTUzNDY2O1xuICogY29uc3QgYm94TmFtZSA9IEJ1ZmZlci5mcm9tKFwiZm9vXCIpO1xuICogY29uc3QgYm94UmVzcG9uc2UgPSBhd2FpdCBhbGdvZENsaWVudC5nZXRBcHBsaWNhdGlvbkJveEJ5TmFtZShpbmRleCwgYm94TmFtZSkuZG8oKTtcbiAqIGNvbnN0IGJveFZhbHVlID0gYm94UmVzcG9uc2UudmFsdWU7XG4gKiBgYGBcbiAqXG4gKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2FsZ29kLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGJveClcbiAqIEBwYXJhbSBpbmRleCAtIFRoZSBhcHBsaWNhdGlvbiBJRCB0byBsb29rIHVwLlxuICogQGNhdGVnb3J5IEdFVFxuICovXG5jbGFzcyBHZXRBcHBsaWNhdGlvbkJveEJ5TmFtZSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4LCBuYW1lKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIEVuY29kZSBuYW1lIGluIGJhc2U2NCBmb3JtYXQgYW5kIGFwcGVuZCB0aGUgZW5jb2RpbmcgcHJlZml4LlxuICAgICAgICBjb25zdCBlbmNvZGVkTmFtZSA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKG5hbWUpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgdGhpcy5xdWVyeS5uYW1lID0gZW5jb2RlVVJJKGBiNjQ6JHtlbmNvZGVkTmFtZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHtpbmRleH0vYm94YFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9L2JveGA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIHJldHVybiB0eXBlc18xLkJveC5mcm9tX29ial9mb3JfZW5jb2RpbmcoYm9keSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0QXBwbGljYXRpb25Cb3hCeU5hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJveEJ5TmFtZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxByName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\n/**\n * Given an application ID, return all the box names associated with the app.\n *\n * #### Example\n * ```typescript\n * const index = 60553466;\n * const boxesResponse = await algodClient.getApplicationBoxes(index).max(3).do();\n * const boxNames = boxesResponse.boxes.map(box => box.name);\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idboxes)\n * @param index - The application ID to look up.\n * @category GET\n */\nclass GetApplicationBoxes extends jsonrequest_1.default {\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        this.query.max = 0;\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */\n    path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResult = await algodClient\n     *        .GetApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.BoxesResponse.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = GetApplicationBoxes;\n//# sourceMappingURL=getApplicationBoxes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsTUFBTTtBQUMxQztBQUNBO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25Cb3hlcy5qcz9jNTM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL21vZGVscy90eXBlc1wiKTtcbi8qKlxuICogR2l2ZW4gYW4gYXBwbGljYXRpb24gSUQsIHJldHVybiBhbGwgdGhlIGJveCBuYW1lcyBhc3NvY2lhdGVkIHdpdGggdGhlIGFwcC5cbiAqXG4gKiAjIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGluZGV4ID0gNjA1NTM0NjY7XG4gKiBjb25zdCBib3hlc1Jlc3BvbnNlID0gYXdhaXQgYWxnb2RDbGllbnQuZ2V0QXBwbGljYXRpb25Cb3hlcyhpbmRleCkubWF4KDMpLmRvKCk7XG4gKiBjb25zdCBib3hOYW1lcyA9IGJveGVzUmVzcG9uc2UuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gKiBgYGBcbiAqXG4gKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2FsZ29kLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGJveGVzKVxuICogQHBhcmFtIGluZGV4IC0gVGhlIGFwcGxpY2F0aW9uIElEIHRvIGxvb2sgdXAuXG4gKiBAY2F0ZWdvcnkgR0VUXG4gKi9cbmNsYXNzIEdldEFwcGxpY2F0aW9uQm94ZXMgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBpbmRleCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYXBwbGljYXRpb25zLyR7aW5kZXh9L2JveGVzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9L2JveGVzYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGltaXQgcmVzdWx0cyBmb3IgcGFnaW5hdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYm94ZXNSZXN1bHQgPSBhd2FpdCBhbGdvZENsaWVudFxuICAgICAqICAgICAgICAuR2V0QXBwbGljYXRpb25Cb3hlcygxMjM0KVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBtYXgobWF4KSB7XG4gICAgICAgIHRoaXMucXVlcnkubWF4ID0gbWF4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzXzEuQm94ZXNSZXNwb25zZS5mcm9tX29ial9mb3JfZW5jb2RpbmcoYm9keSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0QXBwbGljYXRpb25Cb3hlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFwcGxpY2F0aW9uQm94ZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetApplicationByID extends jsonrequest_1.default {\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    path() {\n        return `/v2/applications/${this.index}`;\n    }\n}\nexports[\"default\"] = GetApplicationByID;\n//# sourceMappingURL=getApplicationByID.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXBwbGljYXRpb25CeUlELmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUM7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9nZXRBcHBsaWNhdGlvbkJ5SUQuanM/MDhjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIEdldEFwcGxpY2F0aW9uQnlJRCBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuaW5kZXh9YDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBHZXRBcHBsaWNhdGlvbkJ5SUQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBcHBsaWNhdGlvbkJ5SUQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getApplicationByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetAssetByID extends jsonrequest_1.default {\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    path() {\n        return `/v2/assets/${this.index}`;\n    }\n}\nexports[\"default\"] = GetAssetByID;\n//# sourceMappingURL=getAssetByID.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QXNzZXRCeUlELmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFdBQVc7QUFDeEM7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9nZXRBc3NldEJ5SUQuanM/NjE4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIEdldEFzc2V0QnlJRCBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGluZGV4KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Fzc2V0cy8ke3RoaXMuaW5kZXh9YDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBHZXRBc3NldEJ5SUQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBc3NldEJ5SUQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetBlockHash extends jsonrequest_1.default {\n    constructor(c, intDecoding, roundNumber) {\n        super(c, intDecoding);\n        if (!Number.isInteger(roundNumber))\n            throw Error('roundNumber should be an integer');\n        this.round = roundNumber;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/hash`;\n    }\n}\nexports[\"default\"] = GetBlockHash;\n//# sourceMappingURL=getBlockHash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tIYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsV0FBVztBQUN4QztBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2dldEJsb2NrSGFzaC5qcz81OTJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgR2V0QmxvY2tIYXNoIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocm91bmROdW1iZXIpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3JvdW5kTnVtYmVyIHNob3VsZCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZE51bWJlcjtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vaGFzaGA7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0QmxvY2tIYXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0QmxvY2tIYXNoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockHash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\nclass GetBlockOffsetTimestamp extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/devmode/blocks/offset`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.GetBlockTimeStampOffsetResponse.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = GetBlockOffsetTimestamp;\n//# sourceMappingURL=getBlockOffsetTimestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2dldEJsb2NrT2Zmc2V0VGltZXN0YW1wLmpzPzVlZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vbW9kZWxzL3R5cGVzXCIpO1xuY2xhc3MgR2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvZGV2bW9kZS9ibG9ja3Mvb2Zmc2V0YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzXzEuR2V0QmxvY2tUaW1lU3RhbXBPZmZzZXRSZXNwb25zZS5mcm9tX29ial9mb3JfZW5jb2RpbmcoYm9keSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0QmxvY2tPZmZzZXRUaW1lc3RhbXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRCbG9ja09mZnNldFRpbWVzdGFtcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockOffsetTimestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetBlockTxids extends jsonrequest_1.default {\n    constructor(c, intDecoding, roundNumber) {\n        super(c, intDecoding);\n        if (!Number.isInteger(roundNumber))\n            throw Error('roundNumber should be an integer');\n        this.round = roundNumber;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/txids`;\n    }\n}\nexports[\"default\"] = GetBlockTxids;\n//# sourceMappingURL=getBlockTxids.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0QmxvY2tUeGlkcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFdBQVc7QUFDeEM7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9nZXRCbG9ja1R4aWRzLmpzP2ZkNjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBHZXRCbG9ja1R4aWRzIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmROdW1iZXIpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocm91bmROdW1iZXIpKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3JvdW5kTnVtYmVyIHNob3VsZCBiZSBhbiBpbnRlZ2VyJyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZE51bWJlcjtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH0vdHhpZHNgO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldEJsb2NrVHhpZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRCbG9ja1R4aWRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getBlockTxids.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetLedgerStateDelta extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n        this.query = { format: 'json' };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/${this.round}`;\n    }\n}\nexports[\"default\"] = GetLedgerStateDelta;\n//# sourceMappingURL=getLedgerStateDelta.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixXQUFXO0FBQ3hDO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YS5qcz9kMDk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgR2V0TGVkZ2VyU3RhdGVEZWx0YSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7IGZvcm1hdDogJ2pzb24nIH07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvZGVsdGFzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldExlZGdlclN0YXRlRGVsdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRMZWRnZXJTdGF0ZURlbHRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDelta.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetLedgerStateDeltaForTransactionGroup extends jsonrequest_1.default {\n    constructor(c, intDecoding, id) {\n        super(c, intDecoding);\n        this.id = id;\n        this.id = id;\n        this.query = { format: 'json' };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/txn/group/${this.id}`;\n    }\n}\nexports[\"default\"] = GetLedgerStateDeltaForTransactionGroup;\n//# sourceMappingURL=getLedgerStateDeltaForTransactionGroup.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0TGVkZ2VyU3RhdGVEZWx0YUZvclRyYW5zYWN0aW9uR3JvdXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2dldExlZGdlclN0YXRlRGVsdGFGb3JUcmFuc2FjdGlvbkdyb3VwLmpzPzM2MDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBHZXRMZWRnZXJTdGF0ZURlbHRhRm9yVHJhbnNhY3Rpb25Hcm91cCBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGlkKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMucXVlcnkgPSB7IGZvcm1hdDogJ2pzb24nIH07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvZGVsdGFzL3R4bi9ncm91cC8ke3RoaXMuaWR9YDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBHZXRMZWRnZXJTdGF0ZURlbHRhRm9yVHJhbnNhY3Rpb25Hcm91cDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldExlZGdlclN0YXRlRGVsdGFGb3JUcmFuc2FjdGlvbkdyb3VwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getLedgerStateDeltaForTransactionGroup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\nclass GetSyncRound extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/ledger/sync`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.GetSyncRoundResponse.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = GetSyncRound;\n//# sourceMappingURL=getSyncRound.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0U3luY1JvdW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLDZGQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9nZXRTeW5jUm91bmQuanM/ZmM5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi9tb2RlbHMvdHlwZXNcIik7XG5jbGFzcyBHZXRTeW5jUm91bmQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvbGVkZ2VyL3N5bmNgO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICByZXR1cm4gdHlwZXNfMS5HZXRTeW5jUm91bmRSZXNwb25zZS5mcm9tX29ial9mb3JfZW5jb2RpbmcoYm9keSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gR2V0U3luY1JvdW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0U3luY1JvdW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\nclass GetTransactionGroupLedgerStateDeltasForRound extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n        this.query = { format: 'json' };\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/deltas/${this.round}/txn/group`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.TransactionGroupLedgerStateDeltasForRoundResponse.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = GetTransactionGroupLedgerStateDeltasForRound;\n//# sourceMappingURL=getTransactionGroupLedgerStateDeltasForRound.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0VHJhbnNhY3Rpb25Hcm91cExlZGdlclN0YXRlRGVsdGFzRm9yUm91bmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFdBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2dldFRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kLmpzPzlmNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vbW9kZWxzL3R5cGVzXCIpO1xuY2xhc3MgR2V0VHJhbnNhY3Rpb25Hcm91cExlZGdlclN0YXRlRGVsdGFzRm9yUm91bmQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0geyBmb3JtYXQ6ICdqc29uJyB9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2RlbHRhcy8ke3RoaXMucm91bmR9L3R4bi9ncm91cGA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIHJldHVybiB0eXBlc18xLlRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kUmVzcG9uc2UuZnJvbV9vYmpfZm9yX2VuY29kaW5nKGJvZHkpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldFRyYW5zYWN0aW9uR3JvdXBMZWRnZXJTdGF0ZURlbHRhc0ZvclJvdW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0VHJhbnNhY3Rpb25Hcm91cExlZGdlclN0YXRlRGVsdGFzRm9yUm91bmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionGroupLedgerStateDeltasForRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass GetTransactionProof extends jsonrequest_1.default {\n    constructor(c, intDecoding, round, txID) {\n        super(c, intDecoding);\n        this.round = round;\n        this.txID = txID;\n        this.round = round;\n        this.txID = txID;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/transactions/${this.txID}/proof`;\n    }\n    /**\n     * Exclude assets and application data from results\n     * The type of hash function used to create the proof, must be one of: \"sha512_256\", \"sha256\"\n     *\n     * #### Example\n     * ```typescript\n     * const hashType = \"sha256\";\n     * const round = 123456;\n     * const txId = \"abc123;\n     * const txProof = await algodClient.getTransactionProof(round, txId)\n     *        .hashType(hashType)\n     *        .do();\n     * ```\n     *\n     * @param hashType\n     * @category query\n     */\n    hashType(hashType) {\n        this.query.hashtype = hashType;\n        return this;\n    }\n}\nexports[\"default\"] = GetTransactionProof;\n//# sourceMappingURL=getTransactionProof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvZ2V0VHJhbnNhY3Rpb25Qcm9vZi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsV0FBVyxnQkFBZ0IsVUFBVTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL2dldFRyYW5zYWN0aW9uUHJvb2YuanM/ZTlmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIEdldFRyYW5zYWN0aW9uUHJvb2YgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCwgdHhJRCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgdGhpcy50eElEID0gdHhJRDtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnR4SUQgPSB0eElEO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9ibG9ja3MvJHt0aGlzLnJvdW5kfS90cmFuc2FjdGlvbnMvJHt0aGlzLnR4SUR9L3Byb29mYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhc3NldHMgYW5kIGFwcGxpY2F0aW9uIGRhdGEgZnJvbSByZXN1bHRzXG4gICAgICogVGhlIHR5cGUgb2YgaGFzaCBmdW5jdGlvbiB1c2VkIHRvIGNyZWF0ZSB0aGUgcHJvb2YsIG11c3QgYmUgb25lIG9mOiBcInNoYTUxMl8yNTZcIiwgXCJzaGEyNTZcIlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGhhc2hUeXBlID0gXCJzaGEyNTZcIjtcbiAgICAgKiBjb25zdCByb3VuZCA9IDEyMzQ1NjtcbiAgICAgKiBjb25zdCB0eElkID0gXCJhYmMxMjM7XG4gICAgICogY29uc3QgdHhQcm9vZiA9IGF3YWl0IGFsZ29kQ2xpZW50LmdldFRyYW5zYWN0aW9uUHJvb2Yocm91bmQsIHR4SWQpXG4gICAgICogICAgICAgIC5oYXNoVHlwZShoYXNoVHlwZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFzaFR5cGVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBoYXNoVHlwZShoYXNoVHlwZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lmhhc2h0eXBlID0gaGFzaFR5cGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdldFRyYW5zYWN0aW9uUHJvb2Y7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRUcmFuc2FjdGlvblByb29mLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/getTransactionProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js":
/*!**********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * healthCheck returns an empty object iff the node is running\n */\nclass HealthCheck extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/health';\n    }\n    async do(headers = {}) {\n        const res = await this.c.get(this.path(), {}, headers);\n        if (!res.ok) {\n            throw new Error(`Health response: ${res.status}`);\n        }\n        return {};\n    }\n}\nexports[\"default\"] = HealthCheck;\n//# sourceMappingURL=healthCheck.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvaGVhbHRoQ2hlY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixvREFBb0Q7QUFDcEQ7QUFDQSxnREFBZ0QsV0FBVztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9oZWFsdGhDaGVjay5qcz84OTljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuLyoqXG4gKiBoZWFsdGhDaGVjayByZXR1cm5zIGFuIGVtcHR5IG9iamVjdCBpZmYgdGhlIG5vZGUgaXMgcnVubmluZ1xuICovXG5jbGFzcyBIZWFsdGhDaGVjayBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy9oZWFsdGgnO1xuICAgIH1cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLmdldCh0aGlzLnBhdGgoKSwge30sIGhlYWRlcnMpO1xuICAgICAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIZWFsdGggcmVzcG9uc2U6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gSGVhbHRoQ2hlY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFsdGhDaGVjay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/healthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LightBlockHeaderProof extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    path() {\n        return `/v2/blocks/${this.round}/lightheader/proof`;\n    }\n}\nexports[\"default\"] = LightBlockHeaderProof;\n//# sourceMappingURL=lightBlockHeaderProof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvbGlnaHRCbG9ja0hlYWRlclByb29mLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFdBQVc7QUFDeEM7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9saWdodEJsb2NrSGVhZGVyUHJvb2YuanM/NTU3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIExpZ2h0QmxvY2tIZWFkZXJQcm9vZiBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Jsb2Nrcy8ke3RoaXMucm91bmR9L2xpZ2h0aGVhZGVyL3Byb29mYDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMaWdodEJsb2NrSGVhZGVyUHJvb2Y7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saWdodEJsb2NrSGVhZGVyUHJvb2YuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/lightBlockHeaderProof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimulateRequestTransactionGroup = exports.SimulateRequest = exports.SimulateInitialStates = exports.ScratchChange = exports.PostTransactionsResponse = exports.PendingTransactionsResponse = exports.PendingTransactionResponse = exports.NodeStatusResponse = exports.LightBlockHeaderProof = exports.LedgerStateDeltaForTransactionGroup = exports.KvDelta = exports.GetSyncRoundResponse = exports.GetBlockTimeStampOffsetResponse = exports.EvalDeltaKeyValue = exports.EvalDelta = exports.ErrorResponse = exports.DryrunTxnResult = exports.DryrunState = exports.DryrunSource = exports.DryrunResponse = exports.DryrunRequest = exports.DisassembleResponse = exports.CompileResponse = exports.BuildVersion = exports.BoxesResponse = exports.BoxReference = exports.BoxDescriptor = exports.Box = exports.BlockTxidsResponse = exports.BlockResponse = exports.BlockHashResponse = exports.AvmValue = exports.AvmKeyValue = exports.AssetParams = exports.AssetHoldingReference = exports.AssetHolding = exports.Asset = exports.ApplicationStateSchema = exports.ApplicationStateOperation = exports.ApplicationParams = exports.ApplicationLocalState = exports.ApplicationLocalReference = exports.ApplicationKVStorage = exports.ApplicationInitialStates = exports.Application = exports.AccountStateDelta = exports.AccountParticipation = exports.AccountAssetResponse = exports.AccountApplicationResponse = exports.Account = void 0;\nexports.Version = exports.TransactionProofResponse = exports.TransactionParametersResponse = exports.TransactionGroupLedgerStateDeltasForRoundResponse = exports.TealValue = exports.TealKeyValue = exports.SupplyResponse = exports.StateProofMessage = exports.StateProof = exports.SimulationTransactionExecTrace = exports.SimulationOpcodeTraceUnit = exports.SimulationEvalOverrides = exports.SimulateUnnamedResourcesAccessed = exports.SimulateTransactionResult = exports.SimulateTransactionGroupResult = exports.SimulateTraceConfig = exports.SimulateResponse = void 0;\n/* eslint-disable no-use-before-define */\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst basemodel_1 = __importDefault(__webpack_require__(/*! ../../basemodel */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/basemodel.js\"));\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nclass Account extends basemodel_1.default {\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - (algo) total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param minBalance - MicroAlgo balance required by the account.\n     * The requirement grows based on asset and application usage.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n     * rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - (onl) delegation status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - (appl) applications local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n     * account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - (asset) assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n     * address of the current account is used. This field can be updated in any\n     * transaction by setting the RekeyTo field.\n     * @param createdApps - (appp) parameters of applications created by this account including app global\n     * data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - (apar) parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n     * which are participating.\n     * @param sigType - Indicates what type of signature is used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\n     * values.\n     * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\n     */\n    constructor({ address, amount, amountWithoutPendingRewards, minBalance, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, createdApps, createdAssets, participation, rewardBase, sigType, totalBoxBytes, totalBoxes, }) {\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n        this.minBalance = minBalance;\n        this.pendingRewards = pendingRewards;\n        this.rewards = rewards;\n        this.round = round;\n        this.status = status;\n        this.totalAppsOptedIn = totalAppsOptedIn;\n        this.totalAssetsOptedIn = totalAssetsOptedIn;\n        this.totalCreatedApps = totalCreatedApps;\n        this.totalCreatedAssets = totalCreatedAssets;\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = appsTotalExtraPages;\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = authAddr;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.participation = participation;\n        this.rewardBase = rewardBase;\n        this.sigType = sigType;\n        this.totalBoxBytes = totalBoxBytes;\n        this.totalBoxes = totalBoxes;\n        this.attribute_map = {\n            address: 'address',\n            amount: 'amount',\n            amountWithoutPendingRewards: 'amount-without-pending-rewards',\n            minBalance: 'min-balance',\n            pendingRewards: 'pending-rewards',\n            rewards: 'rewards',\n            round: 'round',\n            status: 'status',\n            totalAppsOptedIn: 'total-apps-opted-in',\n            totalAssetsOptedIn: 'total-assets-opted-in',\n            totalCreatedApps: 'total-created-apps',\n            totalCreatedAssets: 'total-created-assets',\n            appsLocalState: 'apps-local-state',\n            appsTotalExtraPages: 'apps-total-extra-pages',\n            appsTotalSchema: 'apps-total-schema',\n            assets: 'assets',\n            authAddr: 'auth-addr',\n            createdApps: 'created-apps',\n            createdAssets: 'created-assets',\n            participation: 'participation',\n            rewardBase: 'reward-base',\n            sigType: 'sig-type',\n            totalBoxBytes: 'total-box-bytes',\n            totalBoxes: 'total-boxes',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['amount-without-pending-rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n        if (typeof data['min-balance'] === 'undefined')\n            throw new Error(`Response is missing required field 'min-balance': ${data}`);\n        if (typeof data['pending-rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n        if (typeof data['rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data['status'] === 'undefined')\n            throw new Error(`Response is missing required field 'status': ${data}`);\n        if (typeof data['total-apps-opted-in'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n        if (typeof data['total-assets-opted-in'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n        if (typeof data['total-created-apps'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n        if (typeof data['total-created-assets'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n        return new Account({\n            address: data['address'],\n            amount: data['amount'],\n            amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n            minBalance: data['min-balance'],\n            pendingRewards: data['pending-rewards'],\n            rewards: data['rewards'],\n            round: data['round'],\n            status: data['status'],\n            totalAppsOptedIn: data['total-apps-opted-in'],\n            totalAssetsOptedIn: data['total-assets-opted-in'],\n            totalCreatedApps: data['total-created-apps'],\n            totalCreatedAssets: data['total-created-assets'],\n            appsLocalState: typeof data['apps-local-state'] !== 'undefined'\n                ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding)\n                : undefined,\n            appsTotalExtraPages: data['apps-total-extra-pages'],\n            appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema'])\n                : undefined,\n            assets: typeof data['assets'] !== 'undefined'\n                ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n                : undefined,\n            authAddr: data['auth-addr'],\n            createdApps: typeof data['created-apps'] !== 'undefined'\n                ? data['created-apps'].map(Application.from_obj_for_encoding)\n                : undefined,\n            createdAssets: typeof data['created-assets'] !== 'undefined'\n                ? data['created-assets'].map(Asset.from_obj_for_encoding)\n                : undefined,\n            participation: typeof data['participation'] !== 'undefined'\n                ? AccountParticipation.from_obj_for_encoding(data['participation'])\n                : undefined,\n            rewardBase: data['reward-base'],\n            sigType: data['sig-type'],\n            totalBoxBytes: data['total-box-bytes'],\n            totalBoxes: data['total-boxes'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Account = Account;\n/**\n * AccountApplicationResponse describes the account's application local state and\n * global state (AppLocalState and AppParams, if either exists) for a specific\n * application ID. Global state will only be returned if the provided address is\n * the application's creator.\n */\nclass AccountApplicationResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AccountApplicationResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param appLocalState - (appl) the application local data stored in this account.\n     * The raw account uses `AppLocalState` for this type.\n     * @param createdApp - (appp) parameters of the application created by this account including app\n     * global data.\n     * The raw account uses `AppParams` for this type.\n     */\n    constructor({ round, appLocalState, createdApp, }) {\n        super();\n        this.round = round;\n        this.appLocalState = appLocalState;\n        this.createdApp = createdApp;\n        this.attribute_map = {\n            round: 'round',\n            appLocalState: 'app-local-state',\n            createdApp: 'created-app',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        return new AccountApplicationResponse({\n            round: data['round'],\n            appLocalState: typeof data['app-local-state'] !== 'undefined'\n                ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state'])\n                : undefined,\n            createdApp: typeof data['created-app'] !== 'undefined'\n                ? ApplicationParams.from_obj_for_encoding(data['created-app'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountApplicationResponse = AccountApplicationResponse;\n/**\n * AccountAssetResponse describes the account's asset holding and asset parameters\n * (if either exist) for a specific asset ID. Asset parameters will only be\n * returned if the provided address is the asset's creator.\n */\nclass AccountAssetResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AccountAssetResponse` object.\n     * @param round - The round for which this information is relevant.\n     * @param assetHolding - (asset) Details about the asset held by this account.\n     * The raw account uses `AssetHolding` for this type.\n     * @param createdAsset - (apar) parameters of the asset created by this account.\n     * The raw account uses `AssetParams` for this type.\n     */\n    constructor({ round, assetHolding, createdAsset, }) {\n        super();\n        this.round = round;\n        this.assetHolding = assetHolding;\n        this.createdAsset = createdAsset;\n        this.attribute_map = {\n            round: 'round',\n            assetHolding: 'asset-holding',\n            createdAsset: 'created-asset',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        return new AccountAssetResponse({\n            round: data['round'],\n            assetHolding: typeof data['asset-holding'] !== 'undefined'\n                ? AssetHolding.from_obj_for_encoding(data['asset-holding'])\n                : undefined,\n            createdAsset: typeof data['created-asset'] !== 'undefined'\n                ? AssetParams.from_obj_for_encoding(data['created-asset'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountAssetResponse = AccountAssetResponse;\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nclass AccountParticipation extends basemodel_1.default {\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n     * round.\n     * @param stateProofKey - (stprf) Root of the state proof key (if any)\n     */\n    constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey, }) {\n        super();\n        this.selectionParticipationKey =\n            typeof selectionParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, 'base64'))\n                : selectionParticipationKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey =\n            typeof voteParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, 'base64'))\n                : voteParticipationKey;\n        this.stateProofKey =\n            typeof stateProofKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, 'base64'))\n                : stateProofKey;\n        this.attribute_map = {\n            selectionParticipationKey: 'selection-participation-key',\n            voteFirstValid: 'vote-first-valid',\n            voteKeyDilution: 'vote-key-dilution',\n            voteLastValid: 'vote-last-valid',\n            voteParticipationKey: 'vote-participation-key',\n            stateProofKey: 'state-proof-key',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['selection-participation-key'] === 'undefined')\n            throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n        if (typeof data['vote-first-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n        if (typeof data['vote-key-dilution'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n        if (typeof data['vote-last-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n        if (typeof data['vote-participation-key'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n        return new AccountParticipation({\n            selectionParticipationKey: data['selection-participation-key'],\n            voteFirstValid: data['vote-first-valid'],\n            voteKeyDilution: data['vote-key-dilution'],\n            voteLastValid: data['vote-last-valid'],\n            voteParticipationKey: data['vote-participation-key'],\n            stateProofKey: data['state-proof-key'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountParticipation = AccountParticipation;\n/**\n * Application state delta.\n */\nclass AccountStateDelta extends basemodel_1.default {\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */\n    constructor({ address, delta, }) {\n        super();\n        this.address = address;\n        this.delta = delta;\n        this.attribute_map = {\n            address: 'address',\n            delta: 'delta',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (!Array.isArray(data['delta']))\n            throw new Error(`Response is missing required array field 'delta': ${data}`);\n        return new AccountStateDelta({\n            address: data['address'],\n            delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountStateDelta = AccountStateDelta;\n/**\n * Application index and its parameters\n */\nclass Application extends basemodel_1.default {\n    /**\n     * Creates a new `Application` object.\n     * @param id - (appidx) application index.\n     * @param params - (appparams) application parameters.\n     */\n    constructor({ id, params, }) {\n        super();\n        this.id = id;\n        this.params = params;\n        this.attribute_map = {\n            id: 'id',\n            params: 'params',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['id'] === 'undefined')\n            throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data['params'] === 'undefined')\n            throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Application({\n            id: data['id'],\n            params: ApplicationParams.from_obj_for_encoding(data['params']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Application = Application;\n/**\n * An application's initial global/local/box states that were accessed during\n * simulation.\n */\nclass ApplicationInitialStates extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationInitialStates` object.\n     * @param id - Application index.\n     * @param appBoxes - An application's global/local/box state.\n     * @param appGlobals - An application's global/local/box state.\n     * @param appLocals - An application's initial local states tied to different accounts.\n     */\n    constructor({ id, appBoxes, appGlobals, appLocals, }) {\n        super();\n        this.id = id;\n        this.appBoxes = appBoxes;\n        this.appGlobals = appGlobals;\n        this.appLocals = appLocals;\n        this.attribute_map = {\n            id: 'id',\n            appBoxes: 'app-boxes',\n            appGlobals: 'app-globals',\n            appLocals: 'app-locals',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['id'] === 'undefined')\n            throw new Error(`Response is missing required field 'id': ${data}`);\n        return new ApplicationInitialStates({\n            id: data['id'],\n            appBoxes: typeof data['app-boxes'] !== 'undefined'\n                ? ApplicationKVStorage.from_obj_for_encoding(data['app-boxes'])\n                : undefined,\n            appGlobals: typeof data['app-globals'] !== 'undefined'\n                ? ApplicationKVStorage.from_obj_for_encoding(data['app-globals'])\n                : undefined,\n            appLocals: typeof data['app-locals'] !== 'undefined'\n                ? data['app-locals'].map(ApplicationKVStorage.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationInitialStates = ApplicationInitialStates;\n/**\n * An application's global/local/box state.\n */\nclass ApplicationKVStorage extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationKVStorage` object.\n     * @param kvs - Key-Value pairs representing application states.\n     * @param account - The address of the account associated with the local state.\n     */\n    constructor({ kvs, account }) {\n        super();\n        this.kvs = kvs;\n        this.account = account;\n        this.attribute_map = {\n            kvs: 'kvs',\n            account: 'account',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['kvs']))\n            throw new Error(`Response is missing required array field 'kvs': ${data}`);\n        return new ApplicationKVStorage({\n            kvs: data['kvs'].map(AvmKeyValue.from_obj_for_encoding),\n            account: data['account'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationKVStorage = ApplicationKVStorage;\n/**\n * References an account's local state for an application.\n */\nclass ApplicationLocalReference extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLocalReference` object.\n     * @param account - Address of the account with the local state.\n     * @param app - Application ID of the local state application.\n     */\n    constructor({ account, app }) {\n        super();\n        this.account = account;\n        this.app = app;\n        this.attribute_map = {\n            account: 'account',\n            app: 'app',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['account'] === 'undefined')\n            throw new Error(`Response is missing required field 'account': ${data}`);\n        if (typeof data['app'] === 'undefined')\n            throw new Error(`Response is missing required field 'app': ${data}`);\n        return new ApplicationLocalReference({\n            account: data['account'],\n            app: data['app'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLocalReference = ApplicationLocalReference;\n/**\n * Stores local state associated with an application.\n */\nclass ApplicationLocalState extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - (hsch) schema.\n     * @param keyValue - (tkv) storage.\n     */\n    constructor({ id, schema, keyValue, }) {\n        super();\n        this.id = id;\n        this.schema = schema;\n        this.keyValue = keyValue;\n        this.attribute_map = {\n            id: 'id',\n            schema: 'schema',\n            keyValue: 'key-value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['id'] === 'undefined')\n            throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data['schema'] === 'undefined')\n            throw new Error(`Response is missing required field 'schema': ${data}`);\n        return new ApplicationLocalState({\n            id: data['id'],\n            schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n            keyValue: typeof data['key-value'] !== 'undefined'\n                ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLocalState = ApplicationLocalState;\n/**\n * Stores the global information associated with an application.\n */\nclass ApplicationParams extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - (approv) approval program.\n     * @param clearStateProgram - (clearp) approval program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n     * @param globalState - (gs) global state\n     * @param globalStateSchema - (gsch) global schema\n     * @param localStateSchema - (lsch) local schema\n     */\n    constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, }) {\n        super();\n        this.approvalProgram =\n            typeof approvalProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, 'base64'))\n                : approvalProgram;\n        this.clearStateProgram =\n            typeof clearStateProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, 'base64'))\n                : clearStateProgram;\n        this.creator = creator;\n        this.extraProgramPages = extraProgramPages;\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.attribute_map = {\n            approvalProgram: 'approval-program',\n            clearStateProgram: 'clear-state-program',\n            creator: 'creator',\n            extraProgramPages: 'extra-program-pages',\n            globalState: 'global-state',\n            globalStateSchema: 'global-state-schema',\n            localStateSchema: 'local-state-schema',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['approval-program'] === 'undefined')\n            throw new Error(`Response is missing required field 'approval-program': ${data}`);\n        if (typeof data['clear-state-program'] === 'undefined')\n            throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n        if (typeof data['creator'] === 'undefined')\n            throw new Error(`Response is missing required field 'creator': ${data}`);\n        return new ApplicationParams({\n            approvalProgram: data['approval-program'],\n            clearStateProgram: data['clear-state-program'],\n            creator: data['creator'],\n            extraProgramPages: data['extra-program-pages'],\n            globalState: typeof data['global-state'] !== 'undefined'\n                ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n                : undefined,\n            globalStateSchema: typeof data['global-state-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema'])\n                : undefined,\n            localStateSchema: typeof data['local-state-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationParams = ApplicationParams;\n/**\n * An operation against an application's global/local/box state.\n */\nclass ApplicationStateOperation extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationStateOperation` object.\n     * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\n     * state**, `b` is **boxes**.\n     * @param key - The key (name) of the global/local/box state.\n     * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\n     * @param account - For local state changes, the address of the account associated with the local\n     * state.\n     * @param newValue - Represents an AVM value.\n     */\n    constructor({ appStateType, key, operation, account, newValue, }) {\n        super();\n        this.appStateType = appStateType;\n        this.key =\n            typeof key === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(key, 'base64'))\n                : key;\n        this.operation = operation;\n        this.account = account;\n        this.newValue = newValue;\n        this.attribute_map = {\n            appStateType: 'app-state-type',\n            key: 'key',\n            operation: 'operation',\n            account: 'account',\n            newValue: 'new-value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['app-state-type'] === 'undefined')\n            throw new Error(`Response is missing required field 'app-state-type': ${data}`);\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['operation'] === 'undefined')\n            throw new Error(`Response is missing required field 'operation': ${data}`);\n        return new ApplicationStateOperation({\n            appStateType: data['app-state-type'],\n            key: data['key'],\n            operation: data['operation'],\n            account: data['account'],\n            newValue: typeof data['new-value'] !== 'undefined'\n                ? AvmValue.from_obj_for_encoding(data['new-value'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationStateOperation = ApplicationStateOperation;\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nclass ApplicationStateSchema extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numUint - (nui) num of uints.\n     * @param numByteSlice - (nbs) num of byte slices.\n     */\n    constructor({ numUint, numByteSlice, }) {\n        super();\n        this.numUint = numUint;\n        this.numByteSlice = numByteSlice;\n        this.attribute_map = {\n            numUint: 'num-uint',\n            numByteSlice: 'num-byte-slice',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['num-uint'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        if (typeof data['num-byte-slice'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        return new ApplicationStateSchema({\n            numUint: data['num-uint'],\n            numByteSlice: data['num-byte-slice'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationStateSchema = ApplicationStateSchema;\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nclass Asset extends basemodel_1.default {\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */\n    constructor({ index, params, }) {\n        super();\n        this.index = index;\n        this.params = params;\n        this.attribute_map = {\n            index: 'index',\n            params: 'params',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['index'] === 'undefined')\n            throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data['params'] === 'undefined')\n            throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Asset({\n            index: data['index'],\n            params: AssetParams.from_obj_for_encoding(data['params']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Asset = Asset;\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nclass AssetHolding extends basemodel_1.default {\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - (a) number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - (f) whether or not the holding is frozen.\n     */\n    constructor({ amount, assetId, isFrozen, }) {\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.isFrozen = isFrozen;\n        this.attribute_map = {\n            amount: 'amount',\n            assetId: 'asset-id',\n            isFrozen: 'is-frozen',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['asset-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data['is-frozen'] === 'undefined')\n            throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new AssetHolding({\n            amount: data['amount'],\n            assetId: data['asset-id'],\n            isFrozen: data['is-frozen'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetHolding = AssetHolding;\n/**\n * References an asset held by an account.\n */\nclass AssetHoldingReference extends basemodel_1.default {\n    /**\n     * Creates a new `AssetHoldingReference` object.\n     * @param account - Address of the account holding the asset.\n     * @param asset - Asset ID of the holding.\n     */\n    constructor({ account, asset }) {\n        super();\n        this.account = account;\n        this.asset = asset;\n        this.attribute_map = {\n            account: 'account',\n            asset: 'asset',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['account'] === 'undefined')\n            throw new Error(`Response is missing required field 'account': ${data}`);\n        if (typeof data['asset'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset': ${data}`);\n        return new AssetHoldingReference({\n            account: data['account'],\n            asset: data['asset'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetHoldingReference = AssetHoldingReference;\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nclass AssetParams extends basemodel_1.default {\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n     * must be between 0 and 19 (inclusive).\n     * @param total - (t) The total number of units of this asset.\n     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n     * clawback is not permitted.\n     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n     * is not permitted.\n     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n     * metadata is up to the application.\n     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n     * asset name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n     * when the name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - (au) URL where more information about the asset can be retrieved. Included only\n     * when the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */\n    constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64, }) {\n        super();\n        this.creator = creator;\n        this.decimals = decimals;\n        this.total = total;\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash =\n            typeof metadataHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(metadataHash, 'base64'))\n                : metadataHash;\n        this.name = name;\n        this.nameB64 =\n            typeof nameB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(nameB64, 'base64'))\n                : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 =\n            typeof unitNameB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(unitNameB64, 'base64'))\n                : unitNameB64;\n        this.url = url;\n        this.urlB64 =\n            typeof urlB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(urlB64, 'base64'))\n                : urlB64;\n        this.attribute_map = {\n            creator: 'creator',\n            decimals: 'decimals',\n            total: 'total',\n            clawback: 'clawback',\n            defaultFrozen: 'default-frozen',\n            freeze: 'freeze',\n            manager: 'manager',\n            metadataHash: 'metadata-hash',\n            name: 'name',\n            nameB64: 'name-b64',\n            reserve: 'reserve',\n            unitName: 'unit-name',\n            unitNameB64: 'unit-name-b64',\n            url: 'url',\n            urlB64: 'url-b64',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['creator'] === 'undefined')\n            throw new Error(`Response is missing required field 'creator': ${data}`);\n        if (typeof data['decimals'] === 'undefined')\n            throw new Error(`Response is missing required field 'decimals': ${data}`);\n        if (typeof data['total'] === 'undefined')\n            throw new Error(`Response is missing required field 'total': ${data}`);\n        return new AssetParams({\n            creator: data['creator'],\n            decimals: data['decimals'],\n            total: data['total'],\n            clawback: data['clawback'],\n            defaultFrozen: data['default-frozen'],\n            freeze: data['freeze'],\n            manager: data['manager'],\n            metadataHash: data['metadata-hash'],\n            name: data['name'],\n            nameB64: data['name-b64'],\n            reserve: data['reserve'],\n            unitName: data['unit-name'],\n            unitNameB64: data['unit-name-b64'],\n            url: data['url'],\n            urlB64: data['url-b64'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetParams = AssetParams;\n/**\n * Represents an AVM key-value pair in an application store.\n */\nclass AvmKeyValue extends basemodel_1.default {\n    /**\n     * Creates a new `AvmKeyValue` object.\n     * @param key -\n     * @param value - Represents an AVM value.\n     */\n    constructor({ key, value }) {\n        super();\n        this.key =\n            typeof key === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(key, 'base64'))\n                : key;\n        this.value = value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new AvmKeyValue({\n            key: data['key'],\n            value: AvmValue.from_obj_for_encoding(data['value']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AvmKeyValue = AvmKeyValue;\n/**\n * Represents an AVM value.\n */\nclass AvmValue extends basemodel_1.default {\n    /**\n     * Creates a new `AvmValue` object.\n     * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\n     * @param bytes - bytes value.\n     * @param uint - uint value.\n     */\n    constructor({ type, bytes, uint, }) {\n        super();\n        this.type = type;\n        this.bytes =\n            typeof bytes === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(bytes, 'base64'))\n                : bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            type: 'type',\n            bytes: 'bytes',\n            uint: 'uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['type'] === 'undefined')\n            throw new Error(`Response is missing required field 'type': ${data}`);\n        return new AvmValue({\n            type: data['type'],\n            bytes: data['bytes'],\n            uint: data['uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AvmValue = AvmValue;\n/**\n * Hash of a block header.\n */\nclass BlockHashResponse extends basemodel_1.default {\n    /**\n     * Creates a new `BlockHashResponse` object.\n     * @param blockhash - Block header hash.\n     */\n    constructor({ blockhash }) {\n        super();\n        this.blockhash = blockhash;\n        this.attribute_map = {\n            blockhash: 'blockHash',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['blockHash'] === 'undefined')\n            throw new Error(`Response is missing required field 'blockHash': ${data}`);\n        return new BlockHashResponse({\n            blockhash: data['blockHash'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockHashResponse = BlockHashResponse;\n/**\n * Encoded block object.\n */\nclass BlockResponse extends basemodel_1.default {\n    /**\n     * Creates a new `BlockResponse` object.\n     * @param block - Block header data.\n     * @param cert - Optional certificate object. This is only included when the format is set to\n     * message pack.\n     */\n    constructor({ block, cert, }) {\n        super();\n        this.block = block;\n        this.cert = cert;\n        this.attribute_map = {\n            block: 'block',\n            cert: 'cert',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['block'] === 'undefined')\n            throw new Error(`Response is missing required field 'block': ${data}`);\n        return new BlockResponse({\n            block: data['block'],\n            cert: data['cert'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockResponse = BlockResponse;\n/**\n * Top level transaction IDs in a block.\n */\nclass BlockTxidsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `BlockTxidsResponse` object.\n     * @param blocktxids - Block transaction IDs.\n     */\n    constructor({ blocktxids }) {\n        super();\n        this.blocktxids = blocktxids;\n        this.attribute_map = {\n            blocktxids: 'blockTxids',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['blockTxids']))\n            throw new Error(`Response is missing required array field 'blockTxids': ${data}`);\n        return new BlockTxidsResponse({\n            blocktxids: data['blockTxids'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockTxidsResponse = BlockTxidsResponse;\n/**\n * Box name and its content.\n */\nclass Box extends basemodel_1.default {\n    /**\n     * Creates a new `Box` object.\n     * @param name - (name) box name, base64 encoded\n     * @param round - The round for which this information is relevant\n     * @param value - (value) box value, base64 encoded.\n     */\n    constructor({ name, round, value, }) {\n        super();\n        this.name =\n            typeof name === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(name, 'base64'))\n                : name;\n        this.round = round;\n        this.value =\n            typeof value === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(value, 'base64'))\n                : value;\n        this.attribute_map = {\n            name: 'name',\n            round: 'round',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['name'] === 'undefined')\n            throw new Error(`Response is missing required field 'name': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new Box({\n            name: data['name'],\n            round: data['round'],\n            value: data['value'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Box = Box;\n/**\n * Box descriptor describes a Box.\n */\nclass BoxDescriptor extends basemodel_1.default {\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */\n    constructor({ name }) {\n        super();\n        this.name =\n            typeof name === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(name, 'base64'))\n                : name;\n        this.attribute_map = {\n            name: 'name',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['name'] === 'undefined')\n            throw new Error(`Response is missing required field 'name': ${data}`);\n        return new BoxDescriptor({\n            name: data['name'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BoxDescriptor = BoxDescriptor;\n/**\n * References a box of an application.\n */\nclass BoxReference extends basemodel_1.default {\n    /**\n     * Creates a new `BoxReference` object.\n     * @param app - Application ID which this box belongs to\n     * @param name - Base64 encoded box name\n     */\n    constructor({ app, name, }) {\n        super();\n        this.app = app;\n        this.name =\n            typeof name === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(name, 'base64'))\n                : name;\n        this.attribute_map = {\n            app: 'app',\n            name: 'name',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['app'] === 'undefined')\n            throw new Error(`Response is missing required field 'app': ${data}`);\n        if (typeof data['name'] === 'undefined')\n            throw new Error(`Response is missing required field 'name': ${data}`);\n        return new BoxReference({\n            app: data['app'],\n            name: data['name'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BoxReference = BoxReference;\n/**\n * Box names of an application\n */\nclass BoxesResponse extends basemodel_1.default {\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param boxes -\n     */\n    constructor({ boxes }) {\n        super();\n        this.boxes = boxes;\n        this.attribute_map = {\n            boxes: 'boxes',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['boxes']))\n            throw new Error(`Response is missing required array field 'boxes': ${data}`);\n        return new BoxesResponse({\n            boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BoxesResponse = BoxesResponse;\nclass BuildVersion extends basemodel_1.default {\n    /**\n     * Creates a new `BuildVersion` object.\n     * @param branch -\n     * @param buildNumber -\n     * @param channel -\n     * @param commitHash -\n     * @param major -\n     * @param minor -\n     */\n    constructor({ branch, buildNumber, channel, commitHash, major, minor, }) {\n        super();\n        this.branch = branch;\n        this.buildNumber = buildNumber;\n        this.channel = channel;\n        this.commitHash = commitHash;\n        this.major = major;\n        this.minor = minor;\n        this.attribute_map = {\n            branch: 'branch',\n            buildNumber: 'build_number',\n            channel: 'channel',\n            commitHash: 'commit_hash',\n            major: 'major',\n            minor: 'minor',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['branch'] === 'undefined')\n            throw new Error(`Response is missing required field 'branch': ${data}`);\n        if (typeof data['build_number'] === 'undefined')\n            throw new Error(`Response is missing required field 'build_number': ${data}`);\n        if (typeof data['channel'] === 'undefined')\n            throw new Error(`Response is missing required field 'channel': ${data}`);\n        if (typeof data['commit_hash'] === 'undefined')\n            throw new Error(`Response is missing required field 'commit_hash': ${data}`);\n        if (typeof data['major'] === 'undefined')\n            throw new Error(`Response is missing required field 'major': ${data}`);\n        if (typeof data['minor'] === 'undefined')\n            throw new Error(`Response is missing required field 'minor': ${data}`);\n        return new BuildVersion({\n            branch: data['branch'],\n            buildNumber: data['build_number'],\n            channel: data['channel'],\n            commitHash: data['commit_hash'],\n            major: data['major'],\n            minor: data['minor'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BuildVersion = BuildVersion;\n/**\n * Teal compile Result\n */\nclass CompileResponse extends basemodel_1.default {\n    /**\n     * Creates a new `CompileResponse` object.\n     * @param hash - base32 SHA512_256 of program bytes (Address style)\n     * @param result - base64 encoded program bytes\n     * @param sourcemap - JSON of the source map\n     */\n    constructor({ hash, result, sourcemap, }) {\n        super();\n        this.hash = hash;\n        this.result = result;\n        this.sourcemap = sourcemap;\n        this.attribute_map = {\n            hash: 'hash',\n            result: 'result',\n            sourcemap: 'sourcemap',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['hash'] === 'undefined')\n            throw new Error(`Response is missing required field 'hash': ${data}`);\n        if (typeof data['result'] === 'undefined')\n            throw new Error(`Response is missing required field 'result': ${data}`);\n        return new CompileResponse({\n            hash: data['hash'],\n            result: data['result'],\n            sourcemap: data['sourcemap'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.CompileResponse = CompileResponse;\n/**\n * Teal disassembly Result\n */\nclass DisassembleResponse extends basemodel_1.default {\n    /**\n     * Creates a new `DisassembleResponse` object.\n     * @param result - disassembled Teal code\n     */\n    constructor({ result }) {\n        super();\n        this.result = result;\n        this.attribute_map = {\n            result: 'result',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['result'] === 'undefined')\n            throw new Error(`Response is missing required field 'result': ${data}`);\n        return new DisassembleResponse({\n            result: data['result'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DisassembleResponse = DisassembleResponse;\n/**\n * Request data type for dryrun endpoint. Given the Transactions and simulated\n * ledger state upload, run TEAL scripts and return debugging information.\n */\nclass DryrunRequest extends basemodel_1.default {\n    /**\n     * Creates a new `DryrunRequest` object.\n     * @param accounts -\n     * @param apps -\n     * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\n     * confirmed timestamp this algod is attached to.\n     * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\n     * whatever the current protocol of the network this algod is running in.\n     * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\n     * network this algod is attached to.\n     * @param sources -\n     * @param txns -\n     */\n    constructor({ accounts, apps, latestTimestamp, protocolVersion, round, sources, txns, }) {\n        super();\n        this.accounts = accounts;\n        this.apps = apps;\n        this.latestTimestamp = latestTimestamp;\n        this.protocolVersion = protocolVersion;\n        this.round = round;\n        this.sources = sources;\n        this.txns = txns;\n        this.attribute_map = {\n            accounts: 'accounts',\n            apps: 'apps',\n            latestTimestamp: 'latest-timestamp',\n            protocolVersion: 'protocol-version',\n            round: 'round',\n            sources: 'sources',\n            txns: 'txns',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['accounts']))\n            throw new Error(`Response is missing required array field 'accounts': ${data}`);\n        if (!Array.isArray(data['apps']))\n            throw new Error(`Response is missing required array field 'apps': ${data}`);\n        if (typeof data['latest-timestamp'] === 'undefined')\n            throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);\n        if (typeof data['protocol-version'] === 'undefined')\n            throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (!Array.isArray(data['sources']))\n            throw new Error(`Response is missing required array field 'sources': ${data}`);\n        if (!Array.isArray(data['txns']))\n            throw new Error(`Response is missing required array field 'txns': ${data}`);\n        return new DryrunRequest({\n            accounts: data['accounts'].map(Account.from_obj_for_encoding),\n            apps: data['apps'].map(Application.from_obj_for_encoding),\n            latestTimestamp: data['latest-timestamp'],\n            protocolVersion: data['protocol-version'],\n            round: data['round'],\n            sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n            txns: data['txns'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DryrunRequest = DryrunRequest;\n/**\n * DryrunResponse contains per-txn debug information from a dryrun.\n */\nclass DryrunResponse extends basemodel_1.default {\n    /**\n     * Creates a new `DryrunResponse` object.\n     * @param error -\n     * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\n     * @param txns -\n     */\n    constructor({ error, protocolVersion, txns, }) {\n        super();\n        this.error = error;\n        this.protocolVersion = protocolVersion;\n        this.txns = txns;\n        this.attribute_map = {\n            error: 'error',\n            protocolVersion: 'protocol-version',\n            txns: 'txns',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['error'] === 'undefined')\n            throw new Error(`Response is missing required field 'error': ${data}`);\n        if (typeof data['protocol-version'] === 'undefined')\n            throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n        if (!Array.isArray(data['txns']))\n            throw new Error(`Response is missing required array field 'txns': ${data}`);\n        return new DryrunResponse({\n            error: data['error'],\n            protocolVersion: data['protocol-version'],\n            txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DryrunResponse = DryrunResponse;\n/**\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\n * transactions or application state.\n */\nclass DryrunSource extends basemodel_1.default {\n    /**\n     * Creates a new `DryrunSource` object.\n     * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\n     * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\n     * Approval Program or Clear State Program of application[this.AppIndex].\n     * @param source -\n     * @param txnIndex -\n     * @param appIndex -\n     */\n    constructor({ fieldName, source, txnIndex, appIndex, }) {\n        super();\n        this.fieldName = fieldName;\n        this.source = source;\n        this.txnIndex = txnIndex;\n        this.appIndex = appIndex;\n        this.attribute_map = {\n            fieldName: 'field-name',\n            source: 'source',\n            txnIndex: 'txn-index',\n            appIndex: 'app-index',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['field-name'] === 'undefined')\n            throw new Error(`Response is missing required field 'field-name': ${data}`);\n        if (typeof data['source'] === 'undefined')\n            throw new Error(`Response is missing required field 'source': ${data}`);\n        if (typeof data['txn-index'] === 'undefined')\n            throw new Error(`Response is missing required field 'txn-index': ${data}`);\n        if (typeof data['app-index'] === 'undefined')\n            throw new Error(`Response is missing required field 'app-index': ${data}`);\n        return new DryrunSource({\n            fieldName: data['field-name'],\n            source: data['source'],\n            txnIndex: data['txn-index'],\n            appIndex: data['app-index'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DryrunSource = DryrunSource;\n/**\n * Stores the TEAL eval step data\n */\nclass DryrunState extends basemodel_1.default {\n    /**\n     * Creates a new `DryrunState` object.\n     * @param line - Line number\n     * @param pc - Program counter\n     * @param stack -\n     * @param error - Evaluation error if any\n     * @param scratch -\n     */\n    constructor({ line, pc, stack, error, scratch, }) {\n        super();\n        this.line = line;\n        this.pc = pc;\n        this.stack = stack;\n        this.error = error;\n        this.scratch = scratch;\n        this.attribute_map = {\n            line: 'line',\n            pc: 'pc',\n            stack: 'stack',\n            error: 'error',\n            scratch: 'scratch',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['line'] === 'undefined')\n            throw new Error(`Response is missing required field 'line': ${data}`);\n        if (typeof data['pc'] === 'undefined')\n            throw new Error(`Response is missing required field 'pc': ${data}`);\n        if (!Array.isArray(data['stack']))\n            throw new Error(`Response is missing required array field 'stack': ${data}`);\n        return new DryrunState({\n            line: data['line'],\n            pc: data['pc'],\n            stack: data['stack'].map(TealValue.from_obj_for_encoding),\n            error: data['error'],\n            scratch: typeof data['scratch'] !== 'undefined'\n                ? data['scratch'].map(TealValue.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DryrunState = DryrunState;\n/**\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\n * information and state updates from a dryrun.\n */\nclass DryrunTxnResult extends basemodel_1.default {\n    /**\n     * Creates a new `DryrunTxnResult` object.\n     * @param disassembly - Disassembled program line by line.\n     * @param appCallMessages -\n     * @param appCallTrace -\n     * @param budgetAdded - Budget added during execution of app call transaction.\n     * @param budgetConsumed - Budget consumed during execution of app call transaction.\n     * @param globalDelta - Application state delta.\n     * @param localDeltas -\n     * @param logicSigDisassembly - Disassembled lsig program line by line.\n     * @param logicSigMessages -\n     * @param logicSigTrace -\n     * @param logs -\n     */\n    constructor({ disassembly, appCallMessages, appCallTrace, budgetAdded, budgetConsumed, globalDelta, localDeltas, logicSigDisassembly, logicSigMessages, logicSigTrace, logs, }) {\n        super();\n        this.disassembly = disassembly;\n        this.appCallMessages = appCallMessages;\n        this.appCallTrace = appCallTrace;\n        this.budgetAdded = budgetAdded;\n        this.budgetConsumed = budgetConsumed;\n        this.globalDelta = globalDelta;\n        this.localDeltas = localDeltas;\n        this.logicSigDisassembly = logicSigDisassembly;\n        this.logicSigMessages = logicSigMessages;\n        this.logicSigTrace = logicSigTrace;\n        this.logs = logs;\n        this.attribute_map = {\n            disassembly: 'disassembly',\n            appCallMessages: 'app-call-messages',\n            appCallTrace: 'app-call-trace',\n            budgetAdded: 'budget-added',\n            budgetConsumed: 'budget-consumed',\n            globalDelta: 'global-delta',\n            localDeltas: 'local-deltas',\n            logicSigDisassembly: 'logic-sig-disassembly',\n            logicSigMessages: 'logic-sig-messages',\n            logicSigTrace: 'logic-sig-trace',\n            logs: 'logs',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['disassembly']))\n            throw new Error(`Response is missing required array field 'disassembly': ${data}`);\n        return new DryrunTxnResult({\n            disassembly: data['disassembly'],\n            appCallMessages: data['app-call-messages'],\n            appCallTrace: typeof data['app-call-trace'] !== 'undefined'\n                ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding)\n                : undefined,\n            budgetAdded: data['budget-added'],\n            budgetConsumed: data['budget-consumed'],\n            globalDelta: typeof data['global-delta'] !== 'undefined'\n                ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n                : undefined,\n            localDeltas: typeof data['local-deltas'] !== 'undefined'\n                ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding)\n                : undefined,\n            logicSigDisassembly: data['logic-sig-disassembly'],\n            logicSigMessages: data['logic-sig-messages'],\n            logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined'\n                ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding)\n                : undefined,\n            logs: data['logs'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.DryrunTxnResult = DryrunTxnResult;\n/**\n * An error response with optional data field.\n */\nclass ErrorResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */\n    constructor({ message, data, }) {\n        super();\n        this.message = message;\n        this.data = data;\n        this.attribute_map = {\n            message: 'message',\n            data: 'data',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['message'] === 'undefined')\n            throw new Error(`Response is missing required field 'message': ${data}`);\n        return new ErrorResponse({\n            message: data['message'],\n            data: data['data'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ErrorResponse = ErrorResponse;\n/**\n * Represents a TEAL value delta.\n */\nclass EvalDelta extends basemodel_1.default {\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */\n    constructor({ action, bytes, uint, }) {\n        super();\n        this.action = action;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            action: 'action',\n            bytes: 'bytes',\n            uint: 'uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['action'] === 'undefined')\n            throw new Error(`Response is missing required field 'action': ${data}`);\n        return new EvalDelta({\n            action: data['action'],\n            bytes: data['bytes'],\n            uint: data['uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.EvalDelta = EvalDelta;\n/**\n * Key-value pairs for StateDelta.\n */\nclass EvalDeltaKeyValue extends basemodel_1.default {\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */\n    constructor({ key, value }) {\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new EvalDeltaKeyValue({\n            key: data['key'],\n            value: EvalDelta.from_obj_for_encoding(data['value']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.EvalDeltaKeyValue = EvalDeltaKeyValue;\n/**\n * Response containing the timestamp offset in seconds\n */\nclass GetBlockTimeStampOffsetResponse extends basemodel_1.default {\n    /**\n     * Creates a new `GetBlockTimeStampOffsetResponse` object.\n     * @param offset - Timestamp offset in seconds.\n     */\n    constructor({ offset }) {\n        super();\n        this.offset = offset;\n        this.attribute_map = {\n            offset: 'offset',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['offset'] === 'undefined')\n            throw new Error(`Response is missing required field 'offset': ${data}`);\n        return new GetBlockTimeStampOffsetResponse({\n            offset: data['offset'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.GetBlockTimeStampOffsetResponse = GetBlockTimeStampOffsetResponse;\n/**\n * Response containing the ledger's minimum sync round\n */\nclass GetSyncRoundResponse extends basemodel_1.default {\n    /**\n     * Creates a new `GetSyncRoundResponse` object.\n     * @param round - The minimum sync round for the ledger.\n     */\n    constructor({ round }) {\n        super();\n        this.round = round;\n        this.attribute_map = {\n            round: 'round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        return new GetSyncRoundResponse({\n            round: data['round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.GetSyncRoundResponse = GetSyncRoundResponse;\n/**\n * A single Delta containing the key, the previous value and the current value for\n * a single round.\n */\nclass KvDelta extends basemodel_1.default {\n    /**\n     * Creates a new `KvDelta` object.\n     * @param key - The key, base64 encoded.\n     * @param value - The new value of the KV store entry, base64 encoded.\n     */\n    constructor({ key, value, }) {\n        super();\n        this.key =\n            typeof key === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(key, 'base64'))\n                : key;\n        this.value =\n            typeof value === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(value, 'base64'))\n                : value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new KvDelta({\n            key: data['key'],\n            value: data['value'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.KvDelta = KvDelta;\n/**\n * Contains a ledger delta for a single transaction group\n */\nclass LedgerStateDeltaForTransactionGroup extends basemodel_1.default {\n    /**\n     * Creates a new `LedgerStateDeltaForTransactionGroup` object.\n     * @param delta - Ledger StateDelta object\n     * @param ids -\n     */\n    constructor({ delta, ids }) {\n        super();\n        this.delta = delta;\n        this.ids = ids;\n        this.attribute_map = {\n            delta: 'Delta',\n            ids: 'Ids',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['Delta'] === 'undefined')\n            throw new Error(`Response is missing required field 'Delta': ${data}`);\n        if (!Array.isArray(data['Ids']))\n            throw new Error(`Response is missing required array field 'Ids': ${data}`);\n        return new LedgerStateDeltaForTransactionGroup({\n            delta: data['Delta'],\n            ids: data['Ids'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.LedgerStateDeltaForTransactionGroup = LedgerStateDeltaForTransactionGroup;\n/**\n * Proof of membership and position of a light block header.\n */\nclass LightBlockHeaderProof extends basemodel_1.default {\n    /**\n     * Creates a new `LightBlockHeaderProof` object.\n     * @param index - The index of the light block header in the vector commitment tree\n     * @param proof - The encoded proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     */\n    constructor({ index, proof, treedepth, }) {\n        super();\n        this.index = index;\n        this.proof =\n            typeof proof === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(proof, 'base64'))\n                : proof;\n        this.treedepth = treedepth;\n        this.attribute_map = {\n            index: 'index',\n            proof: 'proof',\n            treedepth: 'treedepth',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['index'] === 'undefined')\n            throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data['proof'] === 'undefined')\n            throw new Error(`Response is missing required field 'proof': ${data}`);\n        if (typeof data['treedepth'] === 'undefined')\n            throw new Error(`Response is missing required field 'treedepth': ${data}`);\n        return new LightBlockHeaderProof({\n            index: data['index'],\n            proof: data['proof'],\n            treedepth: data['treedepth'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.LightBlockHeaderProof = LightBlockHeaderProof;\n/**\n *\n */\nclass NodeStatusResponse extends basemodel_1.default {\n    /**\n     * Creates a new `NodeStatusResponse` object.\n     * @param catchupTime - CatchupTime in nanoseconds\n     * @param lastRound - LastRound indicates the last round seen\n     * @param lastVersion - LastVersion indicates the last consensus version supported\n     * @param nextVersion - NextVersion of consensus protocol to use\n     * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\n     * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\n     * by this node\n     * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\n     * rounds and has stopped making progress\n     * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\n     * @param catchpoint - The current catchpoint that is being caught up to\n     * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\n     * catchup\n     * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\n     * far as part of the catchup\n     * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * processed so far as part of the catchup\n     * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\n     * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\n     * catchup\n     * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\n     * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\n     * far as part of the catchup\n     * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\n     * verified so far as part of the catchup\n     * @param lastCatchpoint - The last catchpoint seen by the node\n     * @param upgradeDelay - Upgrade delay\n     * @param upgradeNextProtocolVoteBefore - Next protocol round\n     * @param upgradeNoVotes - No votes cast for consensus upgrade\n     * @param upgradeNodeVote - This node's upgrade vote\n     * @param upgradeVoteRounds - Total voting rounds for current upgrade\n     * @param upgradeVotes - Total votes cast for consensus upgrade\n     * @param upgradeVotesRequired - Yes votes required for consensus upgrade\n     * @param upgradeYesVotes - Yes votes cast for consensus upgrade\n     */\n    constructor({ catchupTime, lastRound, lastVersion, nextVersion, nextVersionRound, nextVersionSupported, stoppedAtUnsupportedRound, timeSinceLastRound, catchpoint, catchpointAcquiredBlocks, catchpointProcessedAccounts, catchpointProcessedKvs, catchpointTotalAccounts, catchpointTotalBlocks, catchpointTotalKvs, catchpointVerifiedAccounts, catchpointVerifiedKvs, lastCatchpoint, upgradeDelay, upgradeNextProtocolVoteBefore, upgradeNoVotes, upgradeNodeVote, upgradeVoteRounds, upgradeVotes, upgradeVotesRequired, upgradeYesVotes, }) {\n        super();\n        this.catchupTime = catchupTime;\n        this.lastRound = lastRound;\n        this.lastVersion = lastVersion;\n        this.nextVersion = nextVersion;\n        this.nextVersionRound = nextVersionRound;\n        this.nextVersionSupported = nextVersionSupported;\n        this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n        this.timeSinceLastRound = timeSinceLastRound;\n        this.catchpoint = catchpoint;\n        this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n        this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n        this.catchpointProcessedKvs = catchpointProcessedKvs;\n        this.catchpointTotalAccounts = catchpointTotalAccounts;\n        this.catchpointTotalBlocks = catchpointTotalBlocks;\n        this.catchpointTotalKvs = catchpointTotalKvs;\n        this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n        this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n        this.lastCatchpoint = lastCatchpoint;\n        this.upgradeDelay = upgradeDelay;\n        this.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;\n        this.upgradeNoVotes = upgradeNoVotes;\n        this.upgradeNodeVote = upgradeNodeVote;\n        this.upgradeVoteRounds = upgradeVoteRounds;\n        this.upgradeVotes = upgradeVotes;\n        this.upgradeVotesRequired = upgradeVotesRequired;\n        this.upgradeYesVotes = upgradeYesVotes;\n        this.attribute_map = {\n            catchupTime: 'catchup-time',\n            lastRound: 'last-round',\n            lastVersion: 'last-version',\n            nextVersion: 'next-version',\n            nextVersionRound: 'next-version-round',\n            nextVersionSupported: 'next-version-supported',\n            stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n            timeSinceLastRound: 'time-since-last-round',\n            catchpoint: 'catchpoint',\n            catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n            catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n            catchpointProcessedKvs: 'catchpoint-processed-kvs',\n            catchpointTotalAccounts: 'catchpoint-total-accounts',\n            catchpointTotalBlocks: 'catchpoint-total-blocks',\n            catchpointTotalKvs: 'catchpoint-total-kvs',\n            catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n            catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n            lastCatchpoint: 'last-catchpoint',\n            upgradeDelay: 'upgrade-delay',\n            upgradeNextProtocolVoteBefore: 'upgrade-next-protocol-vote-before',\n            upgradeNoVotes: 'upgrade-no-votes',\n            upgradeNodeVote: 'upgrade-node-vote',\n            upgradeVoteRounds: 'upgrade-vote-rounds',\n            upgradeVotes: 'upgrade-votes',\n            upgradeVotesRequired: 'upgrade-votes-required',\n            upgradeYesVotes: 'upgrade-yes-votes',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['catchup-time'] === 'undefined')\n            throw new Error(`Response is missing required field 'catchup-time': ${data}`);\n        if (typeof data['last-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'last-round': ${data}`);\n        if (typeof data['last-version'] === 'undefined')\n            throw new Error(`Response is missing required field 'last-version': ${data}`);\n        if (typeof data['next-version'] === 'undefined')\n            throw new Error(`Response is missing required field 'next-version': ${data}`);\n        if (typeof data['next-version-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'next-version-round': ${data}`);\n        if (typeof data['next-version-supported'] === 'undefined')\n            throw new Error(`Response is missing required field 'next-version-supported': ${data}`);\n        if (typeof data['stopped-at-unsupported-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);\n        if (typeof data['time-since-last-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);\n        return new NodeStatusResponse({\n            catchupTime: data['catchup-time'],\n            lastRound: data['last-round'],\n            lastVersion: data['last-version'],\n            nextVersion: data['next-version'],\n            nextVersionRound: data['next-version-round'],\n            nextVersionSupported: data['next-version-supported'],\n            stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n            timeSinceLastRound: data['time-since-last-round'],\n            catchpoint: data['catchpoint'],\n            catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n            catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n            catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n            catchpointTotalAccounts: data['catchpoint-total-accounts'],\n            catchpointTotalBlocks: data['catchpoint-total-blocks'],\n            catchpointTotalKvs: data['catchpoint-total-kvs'],\n            catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n            catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n            lastCatchpoint: data['last-catchpoint'],\n            upgradeDelay: data['upgrade-delay'],\n            upgradeNextProtocolVoteBefore: data['upgrade-next-protocol-vote-before'],\n            upgradeNoVotes: data['upgrade-no-votes'],\n            upgradeNodeVote: data['upgrade-node-vote'],\n            upgradeVoteRounds: data['upgrade-vote-rounds'],\n            upgradeVotes: data['upgrade-votes'],\n            upgradeVotesRequired: data['upgrade-votes-required'],\n            upgradeYesVotes: data['upgrade-yes-votes'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.NodeStatusResponse = NodeStatusResponse;\n/**\n * Details about a pending transaction. If the transaction was recently confirmed,\n * includes confirmation details like the round and reward details.\n */\nclass PendingTransactionResponse extends basemodel_1.default {\n    /**\n     * Creates a new `PendingTransactionResponse` object.\n     * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\n     * (and specifies why that happened). An empty string indicates the transaction\n     * wasn't kicked out of this node's txpool due to an error.\n     * @param txn - The raw signed transaction.\n     * @param applicationIndex - The application index if the transaction was found and it created an\n     * application.\n     * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\n     * @param assetIndex - The asset index if the transaction was found and it created an asset.\n     * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\n     * @param closingAmount - Closing amount for the transaction.\n     * @param confirmedRound - The round where this transaction was confirmed, if present.\n     * @param globalStateDelta - Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param localStateDelta - Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - Logs for the application being executed by this transaction.\n     * @param receiverRewards - Rewards in microalgos applied to the receiver account.\n     * @param senderRewards - Rewards in microalgos applied to the sender account.\n     */\n    constructor({ poolError, txn, applicationIndex, assetClosingAmount, assetIndex, closeRewards, closingAmount, confirmedRound, globalStateDelta, innerTxns, localStateDelta, logs, receiverRewards, senderRewards, }) {\n        super();\n        this.poolError = poolError;\n        this.txn = txn;\n        this.applicationIndex = applicationIndex;\n        this.assetClosingAmount = assetClosingAmount;\n        this.assetIndex = assetIndex;\n        this.closeRewards = closeRewards;\n        this.closingAmount = closingAmount;\n        this.confirmedRound = confirmedRound;\n        this.globalStateDelta = globalStateDelta;\n        this.innerTxns = innerTxns;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.receiverRewards = receiverRewards;\n        this.senderRewards = senderRewards;\n        this.attribute_map = {\n            poolError: 'pool-error',\n            txn: 'txn',\n            applicationIndex: 'application-index',\n            assetClosingAmount: 'asset-closing-amount',\n            assetIndex: 'asset-index',\n            closeRewards: 'close-rewards',\n            closingAmount: 'closing-amount',\n            confirmedRound: 'confirmed-round',\n            globalStateDelta: 'global-state-delta',\n            innerTxns: 'inner-txns',\n            localStateDelta: 'local-state-delta',\n            logs: 'logs',\n            receiverRewards: 'receiver-rewards',\n            senderRewards: 'sender-rewards',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['pool-error'] === 'undefined')\n            throw new Error(`Response is missing required field 'pool-error': ${data}`);\n        if (typeof data['txn'] === 'undefined')\n            throw new Error(`Response is missing required field 'txn': ${data}`);\n        return new PendingTransactionResponse({\n            poolError: data['pool-error'],\n            txn: data['txn'],\n            applicationIndex: data['application-index'],\n            assetClosingAmount: data['asset-closing-amount'],\n            assetIndex: data['asset-index'],\n            closeRewards: data['close-rewards'],\n            closingAmount: data['closing-amount'],\n            confirmedRound: data['confirmed-round'],\n            globalStateDelta: typeof data['global-state-delta'] !== 'undefined'\n                ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n                : undefined,\n            innerTxns: typeof data['inner-txns'] !== 'undefined'\n                ? data['inner-txns'].map(PendingTransactionResponse.from_obj_for_encoding)\n                : undefined,\n            localStateDelta: typeof data['local-state-delta'] !== 'undefined'\n                ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding)\n                : undefined,\n            logs: data['logs'],\n            receiverRewards: data['receiver-rewards'],\n            senderRewards: data['sender-rewards'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.PendingTransactionResponse = PendingTransactionResponse;\n/**\n * A potentially truncated list of transactions currently in the node's transaction\n * pool. You can compute whether or not the list is truncated if the number of\n * elements in the **top-transactions** array is fewer than **total-transactions**.\n */\nclass PendingTransactionsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `PendingTransactionsResponse` object.\n     * @param topTransactions - An array of signed transaction objects.\n     * @param totalTransactions - Total number of transactions in the pool.\n     */\n    constructor({ topTransactions, totalTransactions, }) {\n        super();\n        this.topTransactions = topTransactions;\n        this.totalTransactions = totalTransactions;\n        this.attribute_map = {\n            topTransactions: 'top-transactions',\n            totalTransactions: 'total-transactions',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['top-transactions']))\n            throw new Error(`Response is missing required array field 'top-transactions': ${data}`);\n        if (typeof data['total-transactions'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-transactions': ${data}`);\n        return new PendingTransactionsResponse({\n            topTransactions: data['top-transactions'],\n            totalTransactions: data['total-transactions'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.PendingTransactionsResponse = PendingTransactionsResponse;\n/**\n * Transaction ID of the submission.\n */\nclass PostTransactionsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `PostTransactionsResponse` object.\n     * @param txid - encoding of the transaction hash.\n     */\n    constructor({ txid }) {\n        super();\n        this.txid = txid;\n        this.attribute_map = {\n            txid: 'txId',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['txId'] === 'undefined')\n            throw new Error(`Response is missing required field 'txId': ${data}`);\n        return new PostTransactionsResponse({\n            txid: data['txId'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.PostTransactionsResponse = PostTransactionsResponse;\n/**\n * A write operation into a scratch slot.\n */\nclass ScratchChange extends basemodel_1.default {\n    /**\n     * Creates a new `ScratchChange` object.\n     * @param newValue - Represents an AVM value.\n     * @param slot - The scratch slot written.\n     */\n    constructor({ newValue, slot, }) {\n        super();\n        this.newValue = newValue;\n        this.slot = slot;\n        this.attribute_map = {\n            newValue: 'new-value',\n            slot: 'slot',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['new-value'] === 'undefined')\n            throw new Error(`Response is missing required field 'new-value': ${data}`);\n        if (typeof data['slot'] === 'undefined')\n            throw new Error(`Response is missing required field 'slot': ${data}`);\n        return new ScratchChange({\n            newValue: AvmValue.from_obj_for_encoding(data['new-value']),\n            slot: data['slot'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ScratchChange = ScratchChange;\n/**\n * Initial states of resources that were accessed during simulation.\n */\nclass SimulateInitialStates extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateInitialStates` object.\n     * @param appInitialStates - The initial states of accessed application before simulation. The order of this\n     * array is arbitrary.\n     */\n    constructor({ appInitialStates, }) {\n        super();\n        this.appInitialStates = appInitialStates;\n        this.attribute_map = {\n            appInitialStates: 'app-initial-states',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new SimulateInitialStates({\n            appInitialStates: typeof data['app-initial-states'] !== 'undefined'\n                ? data['app-initial-states'].map(ApplicationInitialStates.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateInitialStates = SimulateInitialStates;\n/**\n * Request type for simulation endpoint.\n */\nclass SimulateRequest extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateRequest` object.\n     * @param txnGroups - The transaction groups to simulate.\n     * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\n     * signatures.\n     * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\n     * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\n     * @param execTraceConfig - An object that configures simulation execution trace.\n     * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\n     * @param round - If provided, specifies the round preceding the simulation. State changes through\n     * this round will be used to run this simulation. Usually only the 4 most recent\n     * rounds will be available (controlled by the node config value MaxAcctLookback).\n     * If not specified, defaults to the latest available round.\n     */\n    constructor({ txnGroups, allowEmptySignatures, allowMoreLogging, allowUnnamedResources, execTraceConfig, extraOpcodeBudget, round, }) {\n        super();\n        this.txnGroups = txnGroups;\n        this.allowEmptySignatures = allowEmptySignatures;\n        this.allowMoreLogging = allowMoreLogging;\n        this.allowUnnamedResources = allowUnnamedResources;\n        this.execTraceConfig = execTraceConfig;\n        this.extraOpcodeBudget = extraOpcodeBudget;\n        this.round = round;\n        this.attribute_map = {\n            txnGroups: 'txn-groups',\n            allowEmptySignatures: 'allow-empty-signatures',\n            allowMoreLogging: 'allow-more-logging',\n            allowUnnamedResources: 'allow-unnamed-resources',\n            execTraceConfig: 'exec-trace-config',\n            extraOpcodeBudget: 'extra-opcode-budget',\n            round: 'round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['txn-groups']))\n            throw new Error(`Response is missing required array field 'txn-groups': ${data}`);\n        return new SimulateRequest({\n            txnGroups: data['txn-groups'].map(SimulateRequestTransactionGroup.from_obj_for_encoding),\n            allowEmptySignatures: data['allow-empty-signatures'],\n            allowMoreLogging: data['allow-more-logging'],\n            allowUnnamedResources: data['allow-unnamed-resources'],\n            execTraceConfig: typeof data['exec-trace-config'] !== 'undefined'\n                ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\n                : undefined,\n            extraOpcodeBudget: data['extra-opcode-budget'],\n            round: data['round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateRequest = SimulateRequest;\n/**\n * A transaction group to simulate.\n */\nclass SimulateRequestTransactionGroup extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateRequestTransactionGroup` object.\n     * @param txns - An atomic transaction group.\n     */\n    constructor({ txns }) {\n        super();\n        this.txns = txns;\n        this.attribute_map = {\n            txns: 'txns',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['txns']))\n            throw new Error(`Response is missing required array field 'txns': ${data}`);\n        return new SimulateRequestTransactionGroup({\n            txns: data['txns'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateRequestTransactionGroup = SimulateRequestTransactionGroup;\n/**\n * Result of a transaction group simulation.\n */\nclass SimulateResponse extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateResponse` object.\n     * @param lastRound - The round immediately preceding this simulation. State changes through this\n     * round were used to run this simulation.\n     * @param txnGroups - A result object for each transaction group that was simulated.\n     * @param version - The version of this response object.\n     * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\n     * parameters is present, then evaluation parameters may differ from standard\n     * evaluation in certain ways.\n     * @param execTraceConfig - An object that configures simulation execution trace.\n     * @param initialStates - Initial states of resources that were accessed during simulation.\n     */\n    constructor({ lastRound, txnGroups, version, evalOverrides, execTraceConfig, initialStates, }) {\n        super();\n        this.lastRound = lastRound;\n        this.txnGroups = txnGroups;\n        this.version = version;\n        this.evalOverrides = evalOverrides;\n        this.execTraceConfig = execTraceConfig;\n        this.initialStates = initialStates;\n        this.attribute_map = {\n            lastRound: 'last-round',\n            txnGroups: 'txn-groups',\n            version: 'version',\n            evalOverrides: 'eval-overrides',\n            execTraceConfig: 'exec-trace-config',\n            initialStates: 'initial-states',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['last-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'last-round': ${data}`);\n        if (!Array.isArray(data['txn-groups']))\n            throw new Error(`Response is missing required array field 'txn-groups': ${data}`);\n        if (typeof data['version'] === 'undefined')\n            throw new Error(`Response is missing required field 'version': ${data}`);\n        return new SimulateResponse({\n            lastRound: data['last-round'],\n            txnGroups: data['txn-groups'].map(SimulateTransactionGroupResult.from_obj_for_encoding),\n            version: data['version'],\n            evalOverrides: typeof data['eval-overrides'] !== 'undefined'\n                ? SimulationEvalOverrides.from_obj_for_encoding(data['eval-overrides'])\n                : undefined,\n            execTraceConfig: typeof data['exec-trace-config'] !== 'undefined'\n                ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\n                : undefined,\n            initialStates: typeof data['initial-states'] !== 'undefined'\n                ? SimulateInitialStates.from_obj_for_encoding(data['initial-states'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateResponse = SimulateResponse;\n/**\n * An object that configures simulation execution trace.\n */\nclass SimulateTraceConfig extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateTraceConfig` object.\n     * @param enable - A boolean option for opting in execution trace features simulation endpoint.\n     * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\n     * trace during simulation.\n     * @param stackChange - A boolean option enabling returning stack changes together with execution trace\n     * during simulation.\n     * @param stateChange - A boolean option enabling returning application state changes (global, local,\n     * and box changes) with the execution trace during simulation.\n     */\n    constructor({ enable, scratchChange, stackChange, stateChange, }) {\n        super();\n        this.enable = enable;\n        this.scratchChange = scratchChange;\n        this.stackChange = stackChange;\n        this.stateChange = stateChange;\n        this.attribute_map = {\n            enable: 'enable',\n            scratchChange: 'scratch-change',\n            stackChange: 'stack-change',\n            stateChange: 'state-change',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new SimulateTraceConfig({\n            enable: data['enable'],\n            scratchChange: data['scratch-change'],\n            stackChange: data['stack-change'],\n            stateChange: data['state-change'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateTraceConfig = SimulateTraceConfig;\n/**\n * Simulation result for an atomic transaction group\n */\nclass SimulateTransactionGroupResult extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateTransactionGroupResult` object.\n     * @param txnResults - Simulation result for individual transactions\n     * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\n     * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\n     * @param failedAt - If present, indicates which transaction in this group caused the failure. This\n     * array represents the path to the failing transaction. Indexes are zero based,\n     * the first element indicates the top-level transaction, and successive elements\n     * indicate deeper inner transactions.\n     * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\n     * happened\n     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n     * caused failure, but were allowed in simulation. Depending on where this object\n     * is in the response, the unnamed resources it contains may or may not qualify for\n     * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n     * the resources do qualify, but if this is a field in SimulateTransactionResult,\n     * they do not qualify. In order to make this group valid for actual submission,\n     * resources that qualify for group sharing can be made available by any\n     * transaction of the group; otherwise, resources must be placed in the same\n     * transaction which accessed them.\n     */\n    constructor({ txnResults, appBudgetAdded, appBudgetConsumed, failedAt, failureMessage, unnamedResourcesAccessed, }) {\n        super();\n        this.txnResults = txnResults;\n        this.appBudgetAdded = appBudgetAdded;\n        this.appBudgetConsumed = appBudgetConsumed;\n        this.failedAt = failedAt;\n        this.failureMessage = failureMessage;\n        this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n        this.attribute_map = {\n            txnResults: 'txn-results',\n            appBudgetAdded: 'app-budget-added',\n            appBudgetConsumed: 'app-budget-consumed',\n            failedAt: 'failed-at',\n            failureMessage: 'failure-message',\n            unnamedResourcesAccessed: 'unnamed-resources-accessed',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['txn-results']))\n            throw new Error(`Response is missing required array field 'txn-results': ${data}`);\n        return new SimulateTransactionGroupResult({\n            txnResults: data['txn-results'].map(SimulateTransactionResult.from_obj_for_encoding),\n            appBudgetAdded: data['app-budget-added'],\n            appBudgetConsumed: data['app-budget-consumed'],\n            failedAt: data['failed-at'],\n            failureMessage: data['failure-message'],\n            unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined'\n                ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateTransactionGroupResult = SimulateTransactionGroupResult;\n/**\n * Simulation result for an individual transaction\n */\nclass SimulateTransactionResult extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateTransactionResult` object.\n     * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\n     * includes confirmation details like the round and reward details.\n     * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\n     * budged used by inner app calls spawned by this transaction.\n     * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\n     * call trace in a recursive way.\n     * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\n     * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\n     * caused failure, but were allowed in simulation. Depending on where this object\n     * is in the response, the unnamed resources it contains may or may not qualify for\n     * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n     * the resources do qualify, but if this is a field in SimulateTransactionResult,\n     * they do not qualify. In order to make this group valid for actual submission,\n     * resources that qualify for group sharing can be made available by any\n     * transaction of the group; otherwise, resources must be placed in the same\n     * transaction which accessed them.\n     */\n    constructor({ txnResult, appBudgetConsumed, execTrace, logicSigBudgetConsumed, unnamedResourcesAccessed, }) {\n        super();\n        this.txnResult = txnResult;\n        this.appBudgetConsumed = appBudgetConsumed;\n        this.execTrace = execTrace;\n        this.logicSigBudgetConsumed = logicSigBudgetConsumed;\n        this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n        this.attribute_map = {\n            txnResult: 'txn-result',\n            appBudgetConsumed: 'app-budget-consumed',\n            execTrace: 'exec-trace',\n            logicSigBudgetConsumed: 'logic-sig-budget-consumed',\n            unnamedResourcesAccessed: 'unnamed-resources-accessed',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['txn-result'] === 'undefined')\n            throw new Error(`Response is missing required field 'txn-result': ${data}`);\n        return new SimulateTransactionResult({\n            txnResult: PendingTransactionResponse.from_obj_for_encoding(data['txn-result']),\n            appBudgetConsumed: data['app-budget-consumed'],\n            execTrace: typeof data['exec-trace'] !== 'undefined'\n                ? SimulationTransactionExecTrace.from_obj_for_encoding(data['exec-trace'])\n                : undefined,\n            logicSigBudgetConsumed: data['logic-sig-budget-consumed'],\n            unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined'\n                ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateTransactionResult = SimulateTransactionResult;\n/**\n * These are resources that were accessed by this group that would normally have\n * caused failure, but were allowed in simulation. Depending on where this object\n * is in the response, the unnamed resources it contains may or may not qualify for\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\n * they do not qualify. In order to make this group valid for actual submission,\n * resources that qualify for group sharing can be made available by any\n * transaction of the group; otherwise, resources must be placed in the same\n * transaction which accessed them.\n */\nclass SimulateUnnamedResourcesAccessed extends basemodel_1.default {\n    /**\n     * Creates a new `SimulateUnnamedResourcesAccessed` object.\n     * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\n     * @param appLocals - The unnamed application local states that were referenced. The order of this\n     * array is arbitrary.\n     * @param apps - The unnamed applications that were referenced. The order of this array is\n     * arbitrary.\n     * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\n     * arbitrary.\n     * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\n     * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\n     * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\n     * addition to the references defined in the input transaction group and any\n     * referenced to unnamed boxes.\n     */\n    constructor({ accounts, appLocals, apps, assetHoldings, assets, boxes, extraBoxRefs, }) {\n        super();\n        this.accounts = accounts;\n        this.appLocals = appLocals;\n        this.apps = apps;\n        this.assetHoldings = assetHoldings;\n        this.assets = assets;\n        this.boxes = boxes;\n        this.extraBoxRefs = extraBoxRefs;\n        this.attribute_map = {\n            accounts: 'accounts',\n            appLocals: 'app-locals',\n            apps: 'apps',\n            assetHoldings: 'asset-holdings',\n            assets: 'assets',\n            boxes: 'boxes',\n            extraBoxRefs: 'extra-box-refs',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new SimulateUnnamedResourcesAccessed({\n            accounts: data['accounts'],\n            appLocals: typeof data['app-locals'] !== 'undefined'\n                ? data['app-locals'].map(ApplicationLocalReference.from_obj_for_encoding)\n                : undefined,\n            apps: data['apps'],\n            assetHoldings: typeof data['asset-holdings'] !== 'undefined'\n                ? data['asset-holdings'].map(AssetHoldingReference.from_obj_for_encoding)\n                : undefined,\n            assets: data['assets'],\n            boxes: typeof data['boxes'] !== 'undefined'\n                ? data['boxes'].map(BoxReference.from_obj_for_encoding)\n                : undefined,\n            extraBoxRefs: data['extra-box-refs'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulateUnnamedResourcesAccessed = SimulateUnnamedResourcesAccessed;\n/**\n * The set of parameters and limits override during simulation. If this set of\n * parameters is present, then evaluation parameters may differ from standard\n * evaluation in certain ways.\n */\nclass SimulationEvalOverrides extends basemodel_1.default {\n    /**\n     * Creates a new `SimulationEvalOverrides` object.\n     * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\n     * were properly signed.\n     * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\n     * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\n     * @param maxLogCalls - The maximum log calls one can make during simulation\n     * @param maxLogSize - The maximum byte number to log during simulation\n     */\n    constructor({ allowEmptySignatures, allowUnnamedResources, extraOpcodeBudget, maxLogCalls, maxLogSize, }) {\n        super();\n        this.allowEmptySignatures = allowEmptySignatures;\n        this.allowUnnamedResources = allowUnnamedResources;\n        this.extraOpcodeBudget = extraOpcodeBudget;\n        this.maxLogCalls = maxLogCalls;\n        this.maxLogSize = maxLogSize;\n        this.attribute_map = {\n            allowEmptySignatures: 'allow-empty-signatures',\n            allowUnnamedResources: 'allow-unnamed-resources',\n            extraOpcodeBudget: 'extra-opcode-budget',\n            maxLogCalls: 'max-log-calls',\n            maxLogSize: 'max-log-size',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new SimulationEvalOverrides({\n            allowEmptySignatures: data['allow-empty-signatures'],\n            allowUnnamedResources: data['allow-unnamed-resources'],\n            extraOpcodeBudget: data['extra-opcode-budget'],\n            maxLogCalls: data['max-log-calls'],\n            maxLogSize: data['max-log-size'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulationEvalOverrides = SimulationEvalOverrides;\n/**\n * The set of trace information and effect from evaluating a single opcode.\n */\nclass SimulationOpcodeTraceUnit extends basemodel_1.default {\n    /**\n     * Creates a new `SimulationOpcodeTraceUnit` object.\n     * @param pc - The program counter of the current opcode being evaluated.\n     * @param scratchChanges - The writes into scratch slots.\n     * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\n     * @param stackAdditions - The values added by this opcode to the stack.\n     * @param stackPopCount - The number of deleted stack values by this opcode.\n     * @param stateChanges - The operations against the current application's states.\n     */\n    constructor({ pc, scratchChanges, spawnedInners, stackAdditions, stackPopCount, stateChanges, }) {\n        super();\n        this.pc = pc;\n        this.scratchChanges = scratchChanges;\n        this.spawnedInners = spawnedInners;\n        this.stackAdditions = stackAdditions;\n        this.stackPopCount = stackPopCount;\n        this.stateChanges = stateChanges;\n        this.attribute_map = {\n            pc: 'pc',\n            scratchChanges: 'scratch-changes',\n            spawnedInners: 'spawned-inners',\n            stackAdditions: 'stack-additions',\n            stackPopCount: 'stack-pop-count',\n            stateChanges: 'state-changes',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['pc'] === 'undefined')\n            throw new Error(`Response is missing required field 'pc': ${data}`);\n        return new SimulationOpcodeTraceUnit({\n            pc: data['pc'],\n            scratchChanges: typeof data['scratch-changes'] !== 'undefined'\n                ? data['scratch-changes'].map(ScratchChange.from_obj_for_encoding)\n                : undefined,\n            spawnedInners: data['spawned-inners'],\n            stackAdditions: typeof data['stack-additions'] !== 'undefined'\n                ? data['stack-additions'].map(AvmValue.from_obj_for_encoding)\n                : undefined,\n            stackPopCount: data['stack-pop-count'],\n            stateChanges: typeof data['state-changes'] !== 'undefined'\n                ? data['state-changes'].map(ApplicationStateOperation.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulationOpcodeTraceUnit = SimulationOpcodeTraceUnit;\n/**\n * The execution trace of calling an app or a logic sig, containing the inner app\n * call trace in a recursive way.\n */\nclass SimulationTransactionExecTrace extends basemodel_1.default {\n    /**\n     * Creates a new `SimulationTransactionExecTrace` object.\n     * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\n     * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\n     * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\n     * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\n     * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\n     * any inner transactions executed.\n     * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\n     * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\n     */\n    constructor({ approvalProgramHash, approvalProgramTrace, clearStateProgramHash, clearStateProgramTrace, innerTrace, logicSigHash, logicSigTrace, }) {\n        super();\n        this.approvalProgramHash =\n            typeof approvalProgramHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(approvalProgramHash, 'base64'))\n                : approvalProgramHash;\n        this.approvalProgramTrace = approvalProgramTrace;\n        this.clearStateProgramHash =\n            typeof clearStateProgramHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(clearStateProgramHash, 'base64'))\n                : clearStateProgramHash;\n        this.clearStateProgramTrace = clearStateProgramTrace;\n        this.innerTrace = innerTrace;\n        this.logicSigHash =\n            typeof logicSigHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(logicSigHash, 'base64'))\n                : logicSigHash;\n        this.logicSigTrace = logicSigTrace;\n        this.attribute_map = {\n            approvalProgramHash: 'approval-program-hash',\n            approvalProgramTrace: 'approval-program-trace',\n            clearStateProgramHash: 'clear-state-program-hash',\n            clearStateProgramTrace: 'clear-state-program-trace',\n            innerTrace: 'inner-trace',\n            logicSigHash: 'logic-sig-hash',\n            logicSigTrace: 'logic-sig-trace',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new SimulationTransactionExecTrace({\n            approvalProgramHash: data['approval-program-hash'],\n            approvalProgramTrace: typeof data['approval-program-trace'] !== 'undefined'\n                ? data['approval-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding)\n                : undefined,\n            clearStateProgramHash: data['clear-state-program-hash'],\n            clearStateProgramTrace: typeof data['clear-state-program-trace'] !== 'undefined'\n                ? data['clear-state-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding)\n                : undefined,\n            innerTrace: typeof data['inner-trace'] !== 'undefined'\n                ? data['inner-trace'].map(SimulationTransactionExecTrace.from_obj_for_encoding)\n                : undefined,\n            logicSigHash: data['logic-sig-hash'],\n            logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined'\n                ? data['logic-sig-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding)\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SimulationTransactionExecTrace = SimulationTransactionExecTrace;\n/**\n * Represents a state proof and its corresponding message\n */\nclass StateProof extends basemodel_1.default {\n    /**\n     * Creates a new `StateProof` object.\n     * @param message - Represents the message that the state proofs are attesting to.\n     * @param stateproof - The encoded StateProof for the message.\n     */\n    constructor({ message, stateproof, }) {\n        super();\n        this.message = message;\n        this.stateproof =\n            typeof stateproof === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(stateproof, 'base64'))\n                : stateproof;\n        this.attribute_map = {\n            message: 'Message',\n            stateproof: 'StateProof',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['Message'] === 'undefined')\n            throw new Error(`Response is missing required field 'Message': ${data}`);\n        if (typeof data['StateProof'] === 'undefined')\n            throw new Error(`Response is missing required field 'StateProof': ${data}`);\n        return new StateProof({\n            message: StateProofMessage.from_obj_for_encoding(data['Message']),\n            stateproof: data['StateProof'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProof = StateProof;\n/**\n * Represents the message that the state proofs are attesting to.\n */\nclass StateProofMessage extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofMessage` object.\n     * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\n     * interval.\n     * @param firstattestedround - The first round the message attests to.\n     * @param lastattestedround - The last round the message attests to.\n     * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\n     * of precision. This value would be used to verify the next state proof.\n     * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\n     */\n    constructor({ blockheaderscommitment, firstattestedround, lastattestedround, lnprovenweight, voterscommitment, }) {\n        super();\n        this.blockheaderscommitment =\n            typeof blockheaderscommitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(blockheaderscommitment, 'base64'))\n                : blockheaderscommitment;\n        this.firstattestedround = firstattestedround;\n        this.lastattestedround = lastattestedround;\n        this.lnprovenweight = lnprovenweight;\n        this.voterscommitment =\n            typeof voterscommitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(voterscommitment, 'base64'))\n                : voterscommitment;\n        this.attribute_map = {\n            blockheaderscommitment: 'BlockHeadersCommitment',\n            firstattestedround: 'FirstAttestedRound',\n            lastattestedround: 'LastAttestedRound',\n            lnprovenweight: 'LnProvenWeight',\n            voterscommitment: 'VotersCommitment',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['BlockHeadersCommitment'] === 'undefined')\n            throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);\n        if (typeof data['FirstAttestedRound'] === 'undefined')\n            throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);\n        if (typeof data['LastAttestedRound'] === 'undefined')\n            throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);\n        if (typeof data['LnProvenWeight'] === 'undefined')\n            throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);\n        if (typeof data['VotersCommitment'] === 'undefined')\n            throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);\n        return new StateProofMessage({\n            blockheaderscommitment: data['BlockHeadersCommitment'],\n            firstattestedround: data['FirstAttestedRound'],\n            lastattestedround: data['LastAttestedRound'],\n            lnprovenweight: data['LnProvenWeight'],\n            voterscommitment: data['VotersCommitment'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofMessage = StateProofMessage;\n/**\n * Supply represents the current supply of MicroAlgos in the system.\n */\nclass SupplyResponse extends basemodel_1.default {\n    /**\n     * Creates a new `SupplyResponse` object.\n     * @param currentRound - Round\n     * @param onlineMoney - OnlineMoney\n     * @param totalMoney - TotalMoney\n     */\n    constructor({ currentRound, onlineMoney, totalMoney, }) {\n        super();\n        this.currentRound = currentRound;\n        this.onlineMoney = onlineMoney;\n        this.totalMoney = totalMoney;\n        this.attribute_map = {\n            currentRound: 'current_round',\n            onlineMoney: 'online-money',\n            totalMoney: 'total-money',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['current_round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current_round': ${data}`);\n        if (typeof data['online-money'] === 'undefined')\n            throw new Error(`Response is missing required field 'online-money': ${data}`);\n        if (typeof data['total-money'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-money': ${data}`);\n        return new SupplyResponse({\n            currentRound: data['current_round'],\n            onlineMoney: data['online-money'],\n            totalMoney: data['total-money'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.SupplyResponse = SupplyResponse;\n/**\n * Represents a key-value pair in an application store.\n */\nclass TealKeyValue extends basemodel_1.default {\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */\n    constructor({ key, value }) {\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new TealKeyValue({\n            key: data['key'],\n            value: TealValue.from_obj_for_encoding(data['value']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TealKeyValue = TealKeyValue;\n/**\n * Represents a TEAL value.\n */\nclass TealValue extends basemodel_1.default {\n    /**\n     * Creates a new `TealValue` object.\n     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param bytes - (tb) bytes value.\n     * @param uint - (ui) uint value.\n     */\n    constructor({ type, bytes, uint, }) {\n        super();\n        this.type = type;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            type: 'type',\n            bytes: 'bytes',\n            uint: 'uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['type'] === 'undefined')\n            throw new Error(`Response is missing required field 'type': ${data}`);\n        if (typeof data['bytes'] === 'undefined')\n            throw new Error(`Response is missing required field 'bytes': ${data}`);\n        if (typeof data['uint'] === 'undefined')\n            throw new Error(`Response is missing required field 'uint': ${data}`);\n        return new TealValue({\n            type: data['type'],\n            bytes: data['bytes'],\n            uint: data['uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TealValue = TealValue;\n/**\n * Response containing all ledger state deltas for transaction groups, with their\n * associated Ids, in a single round.\n */\nclass TransactionGroupLedgerStateDeltasForRoundResponse extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\n     * @param deltas -\n     */\n    constructor({ deltas }) {\n        super();\n        this.deltas = deltas;\n        this.attribute_map = {\n            deltas: 'Deltas',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['Deltas']))\n            throw new Error(`Response is missing required array field 'Deltas': ${data}`);\n        return new TransactionGroupLedgerStateDeltasForRoundResponse({\n            deltas: data['Deltas'].map(LedgerStateDeltaForTransactionGroup.from_obj_for_encoding),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionGroupLedgerStateDeltasForRoundResponse = TransactionGroupLedgerStateDeltasForRoundResponse;\n/**\n * TransactionParams contains the parameters that help a client construct a new\n * transaction.\n */\nclass TransactionParametersResponse extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionParametersResponse` object.\n     * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\n     * as of LastRound.\n     * @param fee - Fee is the suggested transaction fee\n     * Fee is in units of micro-Algos per byte.\n     * Fee may fall to zero but transactions must still have a fee of\n     * at least MinTxnFee for the current network protocol.\n     * @param genesisHash - GenesisHash is the hash of the genesis block.\n     * @param genesisId - GenesisID is an ID listed in the genesis block.\n     * @param lastRound - LastRound indicates the last round seen\n     * @param minFee - The minimum transaction fee (not per byte) required for the\n     * txn to validate for the current network protocol.\n     */\n    constructor({ consensusVersion, fee, genesisHash, genesisId, lastRound, minFee, }) {\n        super();\n        this.consensusVersion = consensusVersion;\n        this.fee = fee;\n        this.genesisHash =\n            typeof genesisHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(genesisHash, 'base64'))\n                : genesisHash;\n        this.genesisId = genesisId;\n        this.lastRound = lastRound;\n        this.minFee = minFee;\n        this.attribute_map = {\n            consensusVersion: 'consensus-version',\n            fee: 'fee',\n            genesisHash: 'genesis-hash',\n            genesisId: 'genesis-id',\n            lastRound: 'last-round',\n            minFee: 'min-fee',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['consensus-version'] === 'undefined')\n            throw new Error(`Response is missing required field 'consensus-version': ${data}`);\n        if (typeof data['fee'] === 'undefined')\n            throw new Error(`Response is missing required field 'fee': ${data}`);\n        if (typeof data['genesis-hash'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n        if (typeof data['genesis-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n        if (typeof data['last-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'last-round': ${data}`);\n        if (typeof data['min-fee'] === 'undefined')\n            throw new Error(`Response is missing required field 'min-fee': ${data}`);\n        return new TransactionParametersResponse({\n            consensusVersion: data['consensus-version'],\n            fee: data['fee'],\n            genesisHash: data['genesis-hash'],\n            genesisId: data['genesis-id'],\n            lastRound: data['last-round'],\n            minFee: data['min-fee'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionParametersResponse = TransactionParametersResponse;\n/**\n * Proof of transaction in a block.\n */\nclass TransactionProofResponse extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionProofResponse` object.\n     * @param idx - Index of the transaction in the block's payset.\n     * @param proof - Proof of transaction membership.\n     * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\n     * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\n     * from a leaf to the root.\n     * @param hashtype - The type of hash function used to create the proof, must be one of:\n     * * sha512_256\n     * * sha256\n     */\n    constructor({ idx, proof, stibhash, treedepth, hashtype, }) {\n        super();\n        this.idx = idx;\n        this.proof =\n            typeof proof === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(proof, 'base64'))\n                : proof;\n        this.stibhash =\n            typeof stibhash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(stibhash, 'base64'))\n                : stibhash;\n        this.treedepth = treedepth;\n        this.hashtype = hashtype;\n        this.attribute_map = {\n            idx: 'idx',\n            proof: 'proof',\n            stibhash: 'stibhash',\n            treedepth: 'treedepth',\n            hashtype: 'hashtype',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['idx'] === 'undefined')\n            throw new Error(`Response is missing required field 'idx': ${data}`);\n        if (typeof data['proof'] === 'undefined')\n            throw new Error(`Response is missing required field 'proof': ${data}`);\n        if (typeof data['stibhash'] === 'undefined')\n            throw new Error(`Response is missing required field 'stibhash': ${data}`);\n        if (typeof data['treedepth'] === 'undefined')\n            throw new Error(`Response is missing required field 'treedepth': ${data}`);\n        return new TransactionProofResponse({\n            idx: data['idx'],\n            proof: data['proof'],\n            stibhash: data['stibhash'],\n            treedepth: data['treedepth'],\n            hashtype: data['hashtype'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionProofResponse = TransactionProofResponse;\n/**\n * algod version information.\n */\nclass Version extends basemodel_1.default {\n    /**\n     * Creates a new `Version` object.\n     * @param build -\n     * @param genesisHashB64 -\n     * @param genesisId -\n     * @param versions -\n     */\n    constructor({ build, genesisHashB64, genesisId, versions, }) {\n        super();\n        this.build = build;\n        this.genesisHashB64 =\n            typeof genesisHashB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(genesisHashB64, 'base64'))\n                : genesisHashB64;\n        this.genesisId = genesisId;\n        this.versions = versions;\n        this.attribute_map = {\n            build: 'build',\n            genesisHashB64: 'genesis_hash_b64',\n            genesisId: 'genesis_id',\n            versions: 'versions',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['build'] === 'undefined')\n            throw new Error(`Response is missing required field 'build': ${data}`);\n        if (typeof data['genesis_hash_b64'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);\n        if (typeof data['genesis_id'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis_id': ${data}`);\n        if (!Array.isArray(data['versions']))\n            throw new Error(`Response is missing required array field 'versions': ${data}`);\n        return new Version({\n            build: BuildVersion.from_obj_for_encoding(data['build']),\n            genesisHashB64: data['genesis_hash_b64'],\n            genesisId: data['genesis_id'],\n            versions: data['versions'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Version = Version;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\n/**\n * returns the transaction information for a specific txid of a pending transaction\n */\nclass PendingTransactionInformation extends jsonrequest_1.default {\n    constructor(c, txid) {\n        super(c);\n        this.txid = txid;\n        this.txid = txid;\n        this.query.format = 'msgpack';\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return encoding.decode(body);\n        }\n        return undefined;\n    }\n    path() {\n        return `/v2/transactions/pending/${this.txid}`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n}\nexports[\"default\"] = PendingTransactionInformation;\n//# sourceMappingURL=pendingTransactionInformation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlELDhCQUE4QixtQkFBTyxDQUFDLDhGQUE0QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsVUFBVTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9wZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbi5qcz8wMjc5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jb25zdCBlbmNvZGluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmdcIikpO1xuLyoqXG4gKiByZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBzcGVjaWZpYyB0eGlkIG9mIGEgcGVuZGluZyB0cmFuc2FjdGlvblxuICovXG5jbGFzcyBQZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbiBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgdHhpZCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy50eGlkID0gdHhpZDtcbiAgICAgICAgdGhpcy50eGlkID0gdHhpZDtcbiAgICAgICAgdGhpcy5xdWVyeS5mb3JtYXQgPSAnbXNncGFjayc7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcHJlcGFyZShib2R5KSB7XG4gICAgICAgIGlmIChib2R5ICYmIGJvZHkuYnl0ZUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGluZy5kZWNvZGUoYm9keSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvdHJhbnNhY3Rpb25zL3BlbmRpbmcvJHt0aGlzLnR4aWR9YDtcbiAgICB9XG4gICAgLy8gbWF4IHNldHMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHR4cyB0byByZXR1cm5cbiAgICBtYXgobWF4KSB7XG4gICAgICAgIHRoaXMucXVlcnkubWF4ID0gbWF4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbkluZm9ybWF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionInformation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\n/**\n * pendingTransactionsInformation returns transactions that are pending in the pool\n */\nclass PendingTransactions extends jsonrequest_1.default {\n    constructor(c) {\n        super(c);\n        this.query.format = 'msgpack';\n    }\n    /* eslint-disable class-methods-use-this */\n    path() {\n        return '/v2/transactions/pending';\n    }\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return encoding.decode(body);\n        }\n        return undefined;\n    }\n    /* eslint-enable class-methods-use-this */\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n}\nexports[\"default\"] = PendingTransactions;\n//# sourceMappingURL=pendingTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQsOEJBQThCLG1CQUFPLENBQUMsOEZBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnMuanM/OTA1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY29uc3QgZW5jb2RpbmcgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nXCIpKTtcbi8qKlxuICogcGVuZGluZ1RyYW5zYWN0aW9uc0luZm9ybWF0aW9uIHJldHVybnMgdHJhbnNhY3Rpb25zIHRoYXQgYXJlIHBlbmRpbmcgaW4gdGhlIHBvb2xcbiAqL1xuY2xhc3MgUGVuZGluZ1RyYW5zYWN0aW9ucyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYykge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5xdWVyeS5mb3JtYXQgPSAnbXNncGFjayc7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi90cmFuc2FjdGlvbnMvcGVuZGluZyc7XG4gICAgfVxuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICBpZiAoYm9keSAmJiBib2R5LmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RpbmcuZGVjb2RlKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuICAgIC8vIG1heCBzZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0eHMgdG8gcmV0dXJuXG4gICAgbWF4KG1heCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IG1heDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUGVuZGluZ1RyYW5zYWN0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\n/**\n * returns all transactions for a PK [addr] in the [first, last] rounds range.\n */\nclass PendingTransactionsByAddress extends jsonrequest_1.default {\n    constructor(c, address) {\n        super(c);\n        this.address = address;\n        this.address = address;\n        this.query.format = 'msgpack';\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        if (body && body.byteLength > 0) {\n            return encoding.decode(body);\n        }\n        return undefined;\n    }\n    path() {\n        return `/v2/accounts/${this.address}/transactions/pending`;\n    }\n    // max sets the maximum number of txs to return\n    max(max) {\n        this.query.max = max;\n        return this;\n    }\n}\nexports[\"default\"] = PendingTransactionsByAddress;\n//# sourceMappingURL=pendingTransactionsByAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvcGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQsOEJBQThCLG1CQUFPLENBQUMsOEZBQTRCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixhQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3BlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MuanM/MTM3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY29uc3QgZW5jb2RpbmcgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uLy4uLy4uL2VuY29kaW5nL2VuY29kaW5nXCIpKTtcbi8qKlxuICogcmV0dXJucyBhbGwgdHJhbnNhY3Rpb25zIGZvciBhIFBLIFthZGRyXSBpbiB0aGUgW2ZpcnN0LCBsYXN0XSByb3VuZHMgcmFuZ2UuXG4gKi9cbmNsYXNzIFBlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGFkZHJlc3MpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgIHRoaXMucXVlcnkuZm9ybWF0ID0gJ21zZ3BhY2snO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICBpZiAoYm9keSAmJiBib2R5LmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RpbmcuZGVjb2RlKGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hZGRyZXNzfS90cmFuc2FjdGlvbnMvcGVuZGluZ2A7XG4gICAgfVxuICAgIC8vIG1heCBzZXRzIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0eHMgdG8gcmV0dXJuXG4gICAgbWF4KG1heCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm1heCA9IG1heDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUGVuZGluZ1RyYW5zYWN0aW9uc0J5QWRkcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlbmRpbmdUcmFuc2FjdGlvbnNCeUFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/pendingTransactionsByAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/ready.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/ready.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass Ready extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/ready`;\n    }\n}\nexports[\"default\"] = Ready;\n//# sourceMappingURL=ready.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvcmVhZHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3JlYWR5LmpzP2QwYjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBSZWFkeSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC9yZWFkeWA7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhZHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFkeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/ready.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setSendTransactionHeaders = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst utils_1 = __webpack_require__(/*! ../../../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\");\n/**\n * Sets the default header (if not previously set) for sending a raw\n * transaction.\n * @param headers - A headers object\n */\nfunction setSendTransactionHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n        hdrs = { ...headers };\n        hdrs['Content-Type'] = 'application/x-binary';\n    }\n    return hdrs;\n}\nexports.setSendTransactionHeaders = setSendTransactionHeaders;\nfunction isByteArray(array) {\n    return array && array.byteLength !== undefined;\n}\n/**\n * broadcasts the passed signed txns to the network\n */\nclass SendRawTransaction extends jsonrequest_1.default {\n    constructor(c, stxOrStxs) {\n        super(c);\n        let forPosting = stxOrStxs;\n        if (Array.isArray(stxOrStxs)) {\n            if (!stxOrStxs.every(isByteArray)) {\n                throw new TypeError('Array elements must be byte arrays');\n            }\n            // Flatten into a single Uint8Array\n            forPosting = (0, utils_1.concatArrays)(...stxOrStxs);\n        }\n        else if (!isByteArray(forPosting)) {\n            throw new TypeError('Argument must be byte array');\n        }\n        this.txnBytesToPost = forPosting;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/transactions';\n    }\n    async do(headers = {}) {\n        const txHeaders = setSendTransactionHeaders(headers);\n        const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.txnBytesToPost), txHeaders);\n        return res.body;\n    }\n}\nexports[\"default\"] = SendRawTransaction;\n//# sourceMappingURL=sendRawTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc2VuZFJhd1RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyxrRkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9zZW5kUmF3VHJhbnNhY3Rpb24uanM/NWM1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0U2VuZFRyYW5zYWN0aW9uSGVhZGVycyA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIik7XG4vKipcbiAqIFNldHMgdGhlIGRlZmF1bHQgaGVhZGVyIChpZiBub3QgcHJldmlvdXNseSBzZXQpIGZvciBzZW5kaW5nIGEgcmF3XG4gKiB0cmFuc2FjdGlvbi5cbiAqIEBwYXJhbSBoZWFkZXJzIC0gQSBoZWFkZXJzIG9iamVjdFxuICovXG5mdW5jdGlvbiBzZXRTZW5kVHJhbnNhY3Rpb25IZWFkZXJzKGhlYWRlcnMgPSB7fSkge1xuICAgIGxldCBoZHJzID0gaGVhZGVycztcbiAgICBpZiAoT2JqZWN0LmtleXMoaGRycykuZXZlcnkoKGtleSkgPT4ga2V5LnRvTG93ZXJDYXNlKCkgIT09ICdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBoZHJzID0geyAuLi5oZWFkZXJzIH07XG4gICAgICAgIGhkcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtYmluYXJ5JztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG5leHBvcnRzLnNldFNlbmRUcmFuc2FjdGlvbkhlYWRlcnMgPSBzZXRTZW5kVHJhbnNhY3Rpb25IZWFkZXJzO1xuZnVuY3Rpb24gaXNCeXRlQXJyYXkoYXJyYXkpIHtcbiAgICByZXR1cm4gYXJyYXkgJiYgYXJyYXkuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBicm9hZGNhc3RzIHRoZSBwYXNzZWQgc2lnbmVkIHR4bnMgdG8gdGhlIG5ldHdvcmtcbiAqL1xuY2xhc3MgU2VuZFJhd1RyYW5zYWN0aW9uIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihjLCBzdHhPclN0eHMpIHtcbiAgICAgICAgc3VwZXIoYyk7XG4gICAgICAgIGxldCBmb3JQb3N0aW5nID0gc3R4T3JTdHhzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHhPclN0eHMpKSB7XG4gICAgICAgICAgICBpZiAoIXN0eE9yU3R4cy5ldmVyeShpc0J5dGVBcnJheSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSBlbGVtZW50cyBtdXN0IGJlIGJ5dGUgYXJyYXlzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGbGF0dGVuIGludG8gYSBzaW5nbGUgVWludDhBcnJheVxuICAgICAgICAgICAgZm9yUG9zdGluZyA9ICgwLCB1dGlsc18xLmNvbmNhdEFycmF5cykoLi4uc3R4T3JTdHhzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNCeXRlQXJyYXkoZm9yUG9zdGluZykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYnl0ZSBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHhuQnl0ZXNUb1Bvc3QgPSBmb3JQb3N0aW5nO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RyYW5zYWN0aW9ucyc7XG4gICAgfVxuICAgIGFzeW5jIGRvKGhlYWRlcnMgPSB7fSkge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRTZW5kVHJhbnNhY3Rpb25IZWFkZXJzKGhlYWRlcnMpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmMucG9zdCh0aGlzLnBhdGgoKSwgYnVmZmVyXzEuQnVmZmVyLmZyb20odGhpcy50eG5CeXRlc1RvUG9zdCksIHR4SGVhZGVycyk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZW5kUmF3VHJhbnNhY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW5kUmF3VHJhbnNhY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/sendRawTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass SetBlockOffsetTimestamp extends jsonrequest_1.default {\n    constructor(c, intDecoding, offset) {\n        super(c, intDecoding);\n        this.offset = offset;\n        this.offset = offset;\n    }\n    path() {\n        return `/v2/devmode/blocks/offset/${this.offset}`;\n    }\n    async do(headers = {}) {\n        const res = await this.c.post(this.path(), headers);\n        return res.body;\n    }\n}\nexports[\"default\"] = SetBlockOffsetTimestamp;\n//# sourceMappingURL=setBlockOffsetTimestamp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9zZXRCbG9ja09mZnNldFRpbWVzdGFtcC5qcz9lY2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgU2V0QmxvY2tPZmZzZXRUaW1lc3RhbXAgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBvZmZzZXQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2Rldm1vZGUvYmxvY2tzL29mZnNldC8ke3RoaXMub2Zmc2V0fWA7XG4gICAgfVxuICAgIGFzeW5jIGRvKGhlYWRlcnMgPSB7fSkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmMucG9zdCh0aGlzLnBhdGgoKSwgaGVhZGVycyk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZXRCbG9ja09mZnNldFRpbWVzdGFtcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldEJsb2NrT2Zmc2V0VGltZXN0YW1wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setBlockOffsetTimestamp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js":
/*!***********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass SetSyncRound extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    path() {\n        return `/v2/ledger/sync/${this.round}`;\n    }\n    async do(headers = {}) {\n        const res = await this.c.post(this.path(), headers);\n        return res.body;\n    }\n}\nexports[\"default\"] = SetSyncRound;\n//# sourceMappingURL=setSyncRound.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc2V0U3luY1JvdW5kLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0M7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc2V0U3luY1JvdW5kLmpzPzY0MTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBTZXRTeW5jUm91bmQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgIH1cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9sZWRnZXIvc3luYy8ke3RoaXMucm91bmR9YDtcbiAgICB9XG4gICAgYXN5bmMgZG8oaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5wb3N0KHRoaXMucGF0aCgpLCBoZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNldFN5bmNSb3VuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldFN5bmNSb3VuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/setSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setSimulateTransactionsHeaders = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst encoding = __importStar(__webpack_require__(/*! ../../../encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\n/**\n * Sets the default header (if not previously set) for simulating a raw\n * transaction.\n * @param headers - A headers object\n */\nfunction setSimulateTransactionsHeaders(headers = {}) {\n    let hdrs = headers;\n    if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\n        hdrs = { ...headers };\n        hdrs['Content-Type'] = 'application/msgpack';\n    }\n    return hdrs;\n}\nexports.setSimulateTransactionsHeaders = setSimulateTransactionsHeaders;\n/**\n * Simulates signed txns.\n */\nclass SimulateRawTransactions extends jsonrequest_1.default {\n    constructor(c, request) {\n        super(c);\n        this.query.format = 'msgpack';\n        this.requestBytes = encoding.rawEncode(request.get_obj_for_encoding(true));\n    }\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/transactions/simulate';\n    }\n    async do(headers = {}) {\n        const txHeaders = setSimulateTransactionsHeaders(headers);\n        const res = await this.c.post(this.path(), buffer_1.Buffer.from(this.requestBytes), txHeaders, this.query, false);\n        return this.prepare(res.body);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        const decoded = encoding.decode(body);\n        return types_1.SimulateResponse.from_obj_for_encoding(decoded);\n    }\n}\nexports[\"default\"] = SimulateRawTransactions;\n//# sourceMappingURL=simulateTransaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc2ltdWxhdGVUcmFuc2FjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsOEJBQThCLG1CQUFPLENBQUMsOEZBQTRCO0FBQ2xFLHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3NpbXVsYXRlVHJhbnNhY3Rpb24uanM/MTMzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRTaW11bGF0ZVRyYW5zYWN0aW9uc0hlYWRlcnMgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBlbmNvZGluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vLi4vLi4vZW5jb2RpbmcvZW5jb2RpbmdcIikpO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL21vZGVscy90eXBlc1wiKTtcbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBoZWFkZXIgKGlmIG5vdCBwcmV2aW91c2x5IHNldCkgZm9yIHNpbXVsYXRpbmcgYSByYXdcbiAqIHRyYW5zYWN0aW9uLlxuICogQHBhcmFtIGhlYWRlcnMgLSBBIGhlYWRlcnMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHNldFNpbXVsYXRlVHJhbnNhY3Rpb25zSGVhZGVycyhoZWFkZXJzID0ge30pIHtcbiAgICBsZXQgaGRycyA9IGhlYWRlcnM7XG4gICAgaWYgKE9iamVjdC5rZXlzKGhkcnMpLmV2ZXJ5KChrZXkpID0+IGtleS50b0xvd2VyQ2FzZSgpICE9PSAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaGRycyA9IHsgLi4uaGVhZGVycyB9O1xuICAgICAgICBoZHJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9tc2dwYWNrJztcbiAgICB9XG4gICAgcmV0dXJuIGhkcnM7XG59XG5leHBvcnRzLnNldFNpbXVsYXRlVHJhbnNhY3Rpb25zSGVhZGVycyA9IHNldFNpbXVsYXRlVHJhbnNhY3Rpb25zSGVhZGVycztcbi8qKlxuICogU2ltdWxhdGVzIHNpZ25lZCB0eG5zLlxuICovXG5jbGFzcyBTaW11bGF0ZVJhd1RyYW5zYWN0aW9ucyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgcmVxdWVzdCkge1xuICAgICAgICBzdXBlcihjKTtcbiAgICAgICAgdGhpcy5xdWVyeS5mb3JtYXQgPSAnbXNncGFjayc7XG4gICAgICAgIHRoaXMucmVxdWVzdEJ5dGVzID0gZW5jb2RpbmcucmF3RW5jb2RlKHJlcXVlc3QuZ2V0X29ial9mb3JfZW5jb2RpbmcodHJ1ZSkpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RyYW5zYWN0aW9ucy9zaW11bGF0ZSc7XG4gICAgfVxuICAgIGFzeW5jIGRvKGhlYWRlcnMgPSB7fSkge1xuICAgICAgICBjb25zdCB0eEhlYWRlcnMgPSBzZXRTaW11bGF0ZVRyYW5zYWN0aW9uc0hlYWRlcnMoaGVhZGVycyk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5wb3N0KHRoaXMucGF0aCgpLCBidWZmZXJfMS5CdWZmZXIuZnJvbSh0aGlzLnJlcXVlc3RCeXRlcyksIHR4SGVhZGVycywgdGhpcy5xdWVyeSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVwYXJlKHJlcy5ib2R5KTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IGVuY29kaW5nLmRlY29kZShib2R5KTtcbiAgICAgICAgcmV0dXJuIHR5cGVzXzEuU2ltdWxhdGVSZXNwb25zZS5mcm9tX29ial9mb3JfZW5jb2RpbmcoZGVjb2RlZCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2ltdWxhdGVSYXdUcmFuc2FjdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW11bGF0ZVRyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/simulateTransaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass StateProof extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    path() {\n        return `/v2/stateproofs/${this.round}`;\n    }\n}\nexports[\"default\"] = StateProof;\n//# sourceMappingURL=stateproof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3RhdGVwcm9vZi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxXQUFXO0FBQzdDO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3RhdGVwcm9vZi5qcz9jN2M5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgU3RhdGVQcm9vZiBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIHJvdW5kKSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5yb3VuZCA9IHJvdW5kO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL3N0YXRlcHJvb2ZzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0YXRlUHJvb2Y7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZXByb29mLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/stateproof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/status.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/status.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass Status extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/status';\n    }\n}\nexports[\"default\"] = Status;\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9zdGF0dXMuanM/ZjM1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIFN0YXR1cyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9zdGF0dXMnO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN0YXR1cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/status.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js":
/*!***************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass StatusAfterBlock extends jsonrequest_1.default {\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        if (!Number.isInteger(round))\n            throw Error('round should be an integer');\n        this.round = round;\n    }\n    path() {\n        return `/v2/status/wait-for-block-after/${this.round}`;\n    }\n}\nexports[\"default\"] = StatusAfterBlock;\n//# sourceMappingURL=statusAfterBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3RhdHVzQWZ0ZXJCbG9jay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsV0FBVztBQUM3RDtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3N0YXR1c0FmdGVyQmxvY2suanM/ODNmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIFN0YXR1c0FmdGVyQmxvY2sgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCByb3VuZCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHJvdW5kKSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdyb3VuZCBzaG91bGQgYmUgYW4gaW50ZWdlcicpO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgfVxuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL3N0YXR1cy93YWl0LWZvci1ibG9jay1hZnRlci8ke3RoaXMucm91bmR9YDtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0dXNBZnRlckJsb2NrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzQWZ0ZXJCbG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/statusAfterBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js":
/*!**************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Returns the common needed parameters for a new transaction, in a format the transaction builder expects\n */\nclass SuggestedParamsRequest extends jsonrequest_1.default {\n    /* eslint-disable class-methods-use-this */\n    path() {\n        return '/v2/transactions/params';\n    }\n    prepare(body) {\n        return {\n            flatFee: false,\n            fee: body.fee,\n            firstRound: body['last-round'],\n            lastRound: body['last-round'] + 1000,\n            genesisID: body['genesis-id'],\n            genesisHash: body['genesis-hash'],\n            minFee: body['min-fee'],\n        };\n    }\n}\nexports[\"default\"] = SuggestedParamsRequest;\n//# sourceMappingURL=suggestedParams.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3VnZ2VzdGVkUGFyYW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3VnZ2VzdGVkUGFyYW1zLmpzP2ZiYzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbW1vbiBuZWVkZWQgcGFyYW1ldGVycyBmb3IgYSBuZXcgdHJhbnNhY3Rpb24sIGluIGEgZm9ybWF0IHRoZSB0cmFuc2FjdGlvbiBidWlsZGVyIGV4cGVjdHNcbiAqL1xuY2xhc3MgU3VnZ2VzdGVkUGFyYW1zUmVxdWVzdCBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL3RyYW5zYWN0aW9ucy9wYXJhbXMnO1xuICAgIH1cbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZsYXRGZWU6IGZhbHNlLFxuICAgICAgICAgICAgZmVlOiBib2R5LmZlZSxcbiAgICAgICAgICAgIGZpcnN0Um91bmQ6IGJvZHlbJ2xhc3Qtcm91bmQnXSxcbiAgICAgICAgICAgIGxhc3RSb3VuZDogYm9keVsnbGFzdC1yb3VuZCddICsgMTAwMCxcbiAgICAgICAgICAgIGdlbmVzaXNJRDogYm9keVsnZ2VuZXNpcy1pZCddLFxuICAgICAgICAgICAgZ2VuZXNpc0hhc2g6IGJvZHlbJ2dlbmVzaXMtaGFzaCddLFxuICAgICAgICAgICAgbWluRmVlOiBib2R5WydtaW4tZmVlJ10sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU3VnZ2VzdGVkUGFyYW1zUmVxdWVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Z2dlc3RlZFBhcmFtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/suggestedParams.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/supply.js":
/*!*****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/supply.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass Supply extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/ledger/supply';\n    }\n}\nexports[\"default\"] = Supply;\n//# sourceMappingURL=supply.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2Qvc3VwcGx5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC9zdXBwbHkuanM/NGQyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIFN1cHBseSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9sZWRnZXIvc3VwcGx5JztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTdXBwbHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwbHkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/supply.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js":
/*!*************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass UnsetSyncRound extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return `/v2/ledger/sync`;\n    }\n    async do(headers = {}) {\n        const res = await this.c.delete(this.path(), headers);\n        return res.body;\n    }\n}\nexports[\"default\"] = UnsetSyncRound;\n//# sourceMappingURL=unsetSyncRound.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvdW5zZXRTeW5jUm91bmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9hbGdvZC91bnNldFN5bmNSb3VuZC5qcz8xN2YyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgVW5zZXRTeW5jUm91bmQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvbGVkZ2VyL3N5bmNgO1xuICAgIH1cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLmRlbGV0ZSh0aGlzLnBhdGgoKSwgaGVhZGVycyk7XG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBVbnNldFN5bmNSb3VuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuc2V0U3luY1JvdW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/unsetSyncRound.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/versions.js":
/*!*******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/algod/versions.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * retrieves the VersionResponse from the running node\n */\nclass Versions extends jsonrequest_1.default {\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/versions';\n    }\n}\nexports[\"default\"] = Versions;\n//# sourceMappingURL=versions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYWxnb2QvdmVyc2lvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2FsZ29kL3ZlcnNpb25zLmpzP2FjZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG4vKipcbiAqIHJldHJpZXZlcyB0aGUgVmVyc2lvblJlc3BvbnNlIGZyb20gdGhlIHJ1bm5pbmcgbm9kZVxuICovXG5jbGFzcyBWZXJzaW9ucyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92ZXJzaW9ucyc7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVmVyc2lvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/versions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/basemodel.js":
/*!**************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/basemodel.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\n/**\n * Base class for models\n */\n/* eslint-disable no-underscore-dangle,camelcase */\nfunction _is_primitive(val) {\n    /* eslint-enable no-underscore-dangle,camelcase */\n    return (val === undefined ||\n        val == null ||\n        (typeof val !== 'object' && typeof val !== 'function'));\n}\nfunction _get_obj_for_encoding(val, binary) {\n    /* eslint-enable no-underscore-dangle,camelcase,no-redeclare,no-unused-vars */\n    let targetPropValue;\n    if (val instanceof Uint8Array) {\n        targetPropValue = binary ? val : buffer_1.Buffer.from(val).toString('base64');\n    }\n    else if (typeof val.get_obj_for_encoding === 'function') {\n        targetPropValue = val.get_obj_for_encoding(binary);\n    }\n    else if (Array.isArray(val)) {\n        targetPropValue = [];\n        for (const elem of val) {\n            targetPropValue.push(_get_obj_for_encoding(elem, binary));\n        }\n    }\n    else if (typeof val === 'object') {\n        const obj = {};\n        for (const prop of Object.keys(val)) {\n            obj[prop] = _get_obj_for_encoding(val[prop], binary);\n        }\n        targetPropValue = obj;\n    }\n    else if (_is_primitive(val)) {\n        targetPropValue = val;\n    }\n    else {\n        throw new Error(`Unsupported value: ${String(val)}`);\n    }\n    return targetPropValue;\n}\nclass BaseModel {\n    /**\n     * Get an object ready for encoding to either JSON or msgpack.\n     * @param binary - Use true to indicate that the encoding can handle raw binary objects\n     *   (Uint8Arrays). Use false to indicate that raw binary objects should be converted to base64\n     *   strings. True should be used for objects that will be encoded with msgpack, and false should\n     *   be used for objects that will be encoded with JSON.\n     */\n    get_obj_for_encoding(binary = false) {\n        /* eslint-enable no-underscore-dangle,camelcase */\n        const obj = {};\n        for (const prop of Object.keys(this.attribute_map)) {\n            const name = this.attribute_map[prop];\n            const value = this[prop];\n            if (typeof value !== 'undefined') {\n                obj[name] =\n                    value === null ? null : _get_obj_for_encoding(value, binary);\n            }\n        }\n        return obj;\n    }\n}\nexports[\"default\"] = BaseModel;\n//# sourceMappingURL=basemodel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvYmFzZW1vZGVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2Jhc2Vtb2RlbC5qcz9lZGU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBtb2RlbHNcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUsY2FtZWxjYXNlICovXG5mdW5jdGlvbiBfaXNfcHJpbWl0aXZlKHZhbCkge1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUsY2FtZWxjYXNlICovXG4gICAgcmV0dXJuICh2YWwgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICB2YWwgPT0gbnVsbCB8fFxuICAgICAgICAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJykpO1xufVxuZnVuY3Rpb24gX2dldF9vYmpfZm9yX2VuY29kaW5nKHZhbCwgYmluYXJ5KSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSxjYW1lbGNhc2Usbm8tcmVkZWNsYXJlLG5vLXVudXNlZC12YXJzICovXG4gICAgbGV0IHRhcmdldFByb3BWYWx1ZTtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICB0YXJnZXRQcm9wVmFsdWUgPSBiaW5hcnkgPyB2YWwgOiBidWZmZXJfMS5CdWZmZXIuZnJvbSh2YWwpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbC5nZXRfb2JqX2Zvcl9lbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0YXJnZXRQcm9wVmFsdWUgPSB2YWwuZ2V0X29ial9mb3JfZW5jb2RpbmcoYmluYXJ5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHRhcmdldFByb3BWYWx1ZSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW0gb2YgdmFsKSB7XG4gICAgICAgICAgICB0YXJnZXRQcm9wVmFsdWUucHVzaChfZ2V0X29ial9mb3JfZW5jb2RpbmcoZWxlbSwgYmluYXJ5KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3Qgb2JqID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBPYmplY3Qua2V5cyh2YWwpKSB7XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBfZ2V0X29ial9mb3JfZW5jb2RpbmcodmFsW3Byb3BdLCBiaW5hcnkpO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldFByb3BWYWx1ZSA9IG9iajtcbiAgICB9XG4gICAgZWxzZSBpZiAoX2lzX3ByaW1pdGl2ZSh2YWwpKSB7XG4gICAgICAgIHRhcmdldFByb3BWYWx1ZSA9IHZhbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdmFsdWU6ICR7U3RyaW5nKHZhbCl9YCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRQcm9wVmFsdWU7XG59XG5jbGFzcyBCYXNlTW9kZWwge1xuICAgIC8qKlxuICAgICAqIEdldCBhbiBvYmplY3QgcmVhZHkgZm9yIGVuY29kaW5nIHRvIGVpdGhlciBKU09OIG9yIG1zZ3BhY2suXG4gICAgICogQHBhcmFtIGJpbmFyeSAtIFVzZSB0cnVlIHRvIGluZGljYXRlIHRoYXQgdGhlIGVuY29kaW5nIGNhbiBoYW5kbGUgcmF3IGJpbmFyeSBvYmplY3RzXG4gICAgICogICAoVWludDhBcnJheXMpLiBVc2UgZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCByYXcgYmluYXJ5IG9iamVjdHMgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBiYXNlNjRcbiAgICAgKiAgIHN0cmluZ3MuIFRydWUgc2hvdWxkIGJlIHVzZWQgZm9yIG9iamVjdHMgdGhhdCB3aWxsIGJlIGVuY29kZWQgd2l0aCBtc2dwYWNrLCBhbmQgZmFsc2Ugc2hvdWxkXG4gICAgICogICBiZSB1c2VkIGZvciBvYmplY3RzIHRoYXQgd2lsbCBiZSBlbmNvZGVkIHdpdGggSlNPTi5cbiAgICAgKi9cbiAgICBnZXRfb2JqX2Zvcl9lbmNvZGluZyhiaW5hcnkgPSBmYWxzZSkge1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLGNhbWVsY2FzZSAqL1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlidXRlX21hcCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmF0dHJpYnV0ZV9tYXBbcHJvcF07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNbcHJvcF07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIG9ialtuYW1lXSA9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSBudWxsID8gbnVsbCA6IF9nZXRfb2JqX2Zvcl9lbmNvZGluZyh2YWx1ZSwgYmluYXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VNb2RlbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2Vtb2RlbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/basemodel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js":
/*!********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst serviceClient_1 = __importDefault(__webpack_require__(/*! ../serviceClient */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js\"));\nconst makeHealthCheck_1 = __importDefault(__webpack_require__(/*! ./makeHealthCheck */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js\"));\nconst lookupAssetBalances_1 = __importDefault(__webpack_require__(/*! ./lookupAssetBalances */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js\"));\nconst lookupAssetTransactions_1 = __importDefault(__webpack_require__(/*! ./lookupAssetTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js\"));\nconst lookupAccountTransactions_1 = __importDefault(__webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js\"));\nconst lookupBlock_1 = __importDefault(__webpack_require__(/*! ./lookupBlock */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js\"));\nconst lookupTransactionByID_1 = __importDefault(__webpack_require__(/*! ./lookupTransactionByID */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js\"));\nconst lookupAccountByID_1 = __importDefault(__webpack_require__(/*! ./lookupAccountByID */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js\"));\nconst lookupAccountAssets_1 = __importDefault(__webpack_require__(/*! ./lookupAccountAssets */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js\"));\nconst lookupAccountCreatedAssets_1 = __importDefault(__webpack_require__(/*! ./lookupAccountCreatedAssets */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js\"));\nconst lookupAccountAppLocalStates_1 = __importDefault(__webpack_require__(/*! ./lookupAccountAppLocalStates */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js\"));\nconst lookupAccountCreatedApplications_1 = __importDefault(__webpack_require__(/*! ./lookupAccountCreatedApplications */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js\"));\nconst lookupAssetByID_1 = __importDefault(__webpack_require__(/*! ./lookupAssetByID */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js\"));\nconst lookupApplications_1 = __importDefault(__webpack_require__(/*! ./lookupApplications */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js\"));\nconst lookupApplicationLogs_1 = __importDefault(__webpack_require__(/*! ./lookupApplicationLogs */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js\"));\nconst lookupApplicationBoxByIDandName_1 = __importDefault(__webpack_require__(/*! ./lookupApplicationBoxByIDandName */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js\"));\nconst searchAccounts_1 = __importDefault(__webpack_require__(/*! ./searchAccounts */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js\"));\nconst searchForTransactions_1 = __importDefault(__webpack_require__(/*! ./searchForTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js\"));\nconst searchForAssets_1 = __importDefault(__webpack_require__(/*! ./searchForAssets */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js\"));\nconst searchForApplications_1 = __importDefault(__webpack_require__(/*! ./searchForApplications */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js\"));\nconst searchForApplicationBoxes_1 = __importDefault(__webpack_require__(/*! ./searchForApplicationBoxes */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js\"));\n/**\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\n *\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\n *\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\n *\n * This node must also be an Archival node to make searching the entire blockchain possible.\n *\n * #### Relevant Information\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\n *\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\n */\nclass IndexerClient extends serviceClient_1.default {\n    /**\n     * Create an IndexerClient from\n     * * either a token, baseServer, port, and optional headers\n     * * or a base client server for interoperability with external dApp wallets\n     *\n     * #### Example\n     * ```typescript\n     * const token  = \"\";\n     * const server = \"http://localhost\";\n     * const port   = 8980;\n     * const indexerClient = new algosdk.Indexer(token, server, port);\n     * ```\n     * @remarks\n     * The above configuration is for a sandbox private network.\n     * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\n     *\n     * @param tokenOrBaseClient - The API token for the Indexer API\n     * @param baseServer - REST endpoint\n     * @param port - Port number if specifically configured by the server\n     * @param headers - Optional headers\n     */\n    constructor(tokenOrBaseClient, baseServer = 'http://127.0.0.1', port = 8080, headers = {}) {\n        super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);\n    }\n    /**\n     * Returns the health object for the service.\n     * Returns 200 if healthy.\n     *\n     * #### Example\n     * ```typescript\n     * const health = await indexerClient.makeHealthCheck().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n     * @category GET\n     */\n    makeHealthCheck() {\n        return new makeHealthCheck_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns the list of accounts who hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */\n    lookupAssetBalances(index) {\n        return new lookupAssetBalances_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     * @category GET\n     */\n    lookupAssetTransactions(index) {\n        return new lookupAssetTransactions_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     * @category GET\n     */\n    lookupAccountTransactions(account) {\n        return new lookupAccountTransactions_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */\n    lookupBlock(round) {\n        return new lookupBlock_1.default(this.c, this.intDecoding, round);\n    }\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */\n    lookupTransactionByID(txID) {\n        return new lookupTransactionByID_1.default(this.c, this.intDecoding, txID);\n    }\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    lookupAccountByID(account) {\n        return new lookupAccountByID_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    lookupAccountAssets(account) {\n        return new lookupAccountAssets_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    lookupAccountCreatedAssets(account) {\n        return new lookupAccountCreatedAssets_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    lookupAccountAppLocalStates(account) {\n        return new lookupAccountAppLocalStates_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    lookupAccountCreatedApplications(account) {\n        return new lookupAccountCreatedApplications_1.default(this.c, this.intDecoding, account);\n    }\n    /**\n     * Returns information about the passed asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The ID of the asset ot look up.\n     * @category GET\n     */\n    lookupAssetByID(index) {\n        return new lookupAssetByID_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */\n    lookupApplications(index) {\n        return new lookupApplications_1.default(this.c, this.intDecoding, index);\n    }\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */\n    lookupApplicationLogs(appID) {\n        return new lookupApplicationLogs_1.default(this.c, this.intDecoding, appID);\n    }\n    /**\n     * Returns information about indexed accounts.\n     *\n     * #### Example\n     * ```typescript\n     * const accounts = await indexerClient.searchAccounts().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n     * @category GET\n     */\n    searchAccounts() {\n        return new searchAccounts_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient.searchForTransactions().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n     * @category GET\n     */\n    searchForTransactions() {\n        return new searchForTransactions_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed assets.\n     *\n     * #### Example\n     * ```typescript\n     * const assets = await indexerClient.searchForAssets().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n     * @category GET\n     */\n    searchForAssets() {\n        return new searchForAssets_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed applications.\n     *\n     * #### Example\n     * ```typescript\n     * const apps = await indexerClient.searchForApplications().do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n     * @category GET\n     */\n    searchForApplications() {\n        return new searchForApplications_1.default(this.c, this.intDecoding);\n    }\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */\n    searchForApplicationBoxes(appID) {\n        return new searchForApplicationBoxes_1.default(this.c, this.intDecoding, appID);\n    }\n    /**\n     * Returns information about the application box given its name.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @param appID - The ID of the application with boxes.\n     * @category GET\n     */\n    lookupApplicationBoxByIDandName(appID, boxName) {\n        return new lookupApplicationBoxByIDandName_1.default(this.c, this.intDecoding, appID, boxName);\n    }\n}\nexports[\"default\"] = IndexerClient;\n//# sourceMappingURL=indexer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9pbmRleGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0NBQXdDLG1CQUFPLENBQUMsMEZBQWtCO0FBQ2xFLDBDQUEwQyxtQkFBTyxDQUFDLHFHQUFtQjtBQUNyRSw4Q0FBOEMsbUJBQU8sQ0FBQyw2R0FBdUI7QUFDN0Usa0RBQWtELG1CQUFPLENBQUMscUhBQTJCO0FBQ3JGLG9EQUFvRCxtQkFBTyxDQUFDLHlIQUE2QjtBQUN6RixzQ0FBc0MsbUJBQU8sQ0FBQyw2RkFBZTtBQUM3RCxnREFBZ0QsbUJBQU8sQ0FBQyxpSEFBeUI7QUFDakYsNENBQTRDLG1CQUFPLENBQUMseUdBQXFCO0FBQ3pFLDhDQUE4QyxtQkFBTyxDQUFDLDZHQUF1QjtBQUM3RSxxREFBcUQsbUJBQU8sQ0FBQywySEFBOEI7QUFDM0Ysc0RBQXNELG1CQUFPLENBQUMsNkhBQStCO0FBQzdGLDJEQUEyRCxtQkFBTyxDQUFDLHVJQUFvQztBQUN2RywwQ0FBMEMsbUJBQU8sQ0FBQyxxR0FBbUI7QUFDckUsNkNBQTZDLG1CQUFPLENBQUMsMkdBQXNCO0FBQzNFLGdEQUFnRCxtQkFBTyxDQUFDLGlIQUF5QjtBQUNqRiwwREFBMEQsbUJBQU8sQ0FBQyxxSUFBbUM7QUFDckcseUNBQXlDLG1CQUFPLENBQUMsbUdBQWtCO0FBQ25FLGdEQUFnRCxtQkFBTyxDQUFDLGlIQUF5QjtBQUNqRiwwQ0FBMEMsbUJBQU8sQ0FBQyxxR0FBbUI7QUFDckUsZ0RBQWdELG1CQUFPLENBQUMsaUhBQXlCO0FBQ2pGLG9EQUFvRCxtQkFBTyxDQUFDLHlIQUE2QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RkFBNkY7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvaW5kZXhlci5qcz9kNzc1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3Qgc2VydmljZUNsaWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zZXJ2aWNlQ2xpZW50XCIpKTtcbmNvbnN0IG1ha2VIZWFsdGhDaGVja18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21ha2VIZWFsdGhDaGVja1wiKSk7XG5jb25zdCBsb29rdXBBc3NldEJhbGFuY2VzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwQXNzZXRCYWxhbmNlc1wiKSk7XG5jb25zdCBsb29rdXBBc3NldFRyYW5zYWN0aW9uc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvb2t1cEFzc2V0VHJhbnNhY3Rpb25zXCIpKTtcbmNvbnN0IGxvb2t1cEFjY291bnRUcmFuc2FjdGlvbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb29rdXBBY2NvdW50VHJhbnNhY3Rpb25zXCIpKTtcbmNvbnN0IGxvb2t1cEJsb2NrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwQmxvY2tcIikpO1xuY29uc3QgbG9va3VwVHJhbnNhY3Rpb25CeUlEXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwVHJhbnNhY3Rpb25CeUlEXCIpKTtcbmNvbnN0IGxvb2t1cEFjY291bnRCeUlEXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwQWNjb3VudEJ5SURcIikpO1xuY29uc3QgbG9va3VwQWNjb3VudEFzc2V0c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvb2t1cEFjY291bnRBc3NldHNcIikpO1xuY29uc3QgbG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0c1wiKSk7XG5jb25zdCBsb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXNcIikpO1xuY29uc3QgbG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9uc1wiKSk7XG5jb25zdCBsb29rdXBBc3NldEJ5SURfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9sb29rdXBBc3NldEJ5SURcIikpO1xuY29uc3QgbG9va3VwQXBwbGljYXRpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwQXBwbGljYXRpb25zXCIpKTtcbmNvbnN0IGxvb2t1cEFwcGxpY2F0aW9uTG9nc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvb2t1cEFwcGxpY2F0aW9uTG9nc1wiKSk7XG5jb25zdCBsb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZVwiKSk7XG5jb25zdCBzZWFyY2hBY2NvdW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NlYXJjaEFjY291bnRzXCIpKTtcbmNvbnN0IHNlYXJjaEZvclRyYW5zYWN0aW9uc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NlYXJjaEZvclRyYW5zYWN0aW9uc1wiKSk7XG5jb25zdCBzZWFyY2hGb3JBc3NldHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zZWFyY2hGb3JBc3NldHNcIikpO1xuY29uc3Qgc2VhcmNoRm9yQXBwbGljYXRpb25zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc2VhcmNoRm9yQXBwbGljYXRpb25zXCIpKTtcbmNvbnN0IHNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzXCIpKTtcbi8qKlxuICogVGhlIEluZGV4ZXIgcHJvdmlkZXMgYSBSRVNUIEFQSSBpbnRlcmZhY2Ugb2YgQVBJIGNhbGxzIHRvIHN1cHBvcnQgc2VhcmNoaW5nIHRoZSBBbGdvcmFuZCBCbG9ja2NoYWluLlxuICpcbiAqIFRoZSBJbmRleGVyIFJFU1QgQVBJcyByZXRyaWV2ZSB0aGUgYmxvY2tjaGFpbiBkYXRhIGZyb20gYSBQb3N0Z3JlU1FMIGNvbXBhdGlibGUgZGF0YWJhc2UgdGhhdCBtdXN0IGJlIHBvcHVsYXRlZC5cbiAqXG4gKiBUaGlzIGRhdGFiYXNlIGlzIHBvcHVsYXRlZCB1c2luZyB0aGUgc2FtZSBpbmRleGVyIGluc3RhbmNlIG9yIGEgc2VwYXJhdGUgaW5zdGFuY2Ugb2YgdGhlIGluZGV4ZXIgd2hpY2ggbXVzdCBjb25uZWN0IHRvIHRoZSBhbGdvZCBwcm9jZXNzIG9mIGEgcnVubmluZyBBbGdvcmFuZCBub2RlIHRvIHJlYWQgYmxvY2sgZGF0YS5cbiAqXG4gKiBUaGlzIG5vZGUgbXVzdCBhbHNvIGJlIGFuIEFyY2hpdmFsIG5vZGUgdG8gbWFrZSBzZWFyY2hpbmcgdGhlIGVudGlyZSBibG9ja2NoYWluIHBvc3NpYmxlLlxuICpcbiAqICMjIyMgUmVsZXZhbnQgSW5mb3JtYXRpb25cbiAqIFtMZWFybiBtb3JlIGFib3V0IEluZGV4ZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL2dldC1kZXRhaWxzL2luZGV4ZXIvKVxuICpcbiAqIFtSdW4gSW5kZXhlciBpbiBQb3N0bWFuIE9BUzNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9yZXN0ZW5kcG9pbnRzLyNhbGdvZC1pbmRleGVyLWFuZC1rbWQtcmVzdC1lbmRwb2ludHMpXG4gKi9cbmNsYXNzIEluZGV4ZXJDbGllbnQgZXh0ZW5kcyBzZXJ2aWNlQ2xpZW50XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEluZGV4ZXJDbGllbnQgZnJvbVxuICAgICAqICogZWl0aGVyIGEgdG9rZW4sIGJhc2VTZXJ2ZXIsIHBvcnQsIGFuZCBvcHRpb25hbCBoZWFkZXJzXG4gICAgICogKiBvciBhIGJhc2UgY2xpZW50IHNlcnZlciBmb3IgaW50ZXJvcGVyYWJpbGl0eSB3aXRoIGV4dGVybmFsIGRBcHAgd2FsbGV0c1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHRva2VuICA9IFwiXCI7XG4gICAgICogY29uc3Qgc2VydmVyID0gXCJodHRwOi8vbG9jYWxob3N0XCI7XG4gICAgICogY29uc3QgcG9ydCAgID0gODk4MDtcbiAgICAgKiBjb25zdCBpbmRleGVyQ2xpZW50ID0gbmV3IGFsZ29zZGsuSW5kZXhlcih0b2tlbiwgc2VydmVyLCBwb3J0KTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoZSBhYm92ZSBjb25maWd1cmF0aW9uIGlzIGZvciBhIHNhbmRib3ggcHJpdmF0ZSBuZXR3b3JrLlxuICAgICAqIEZvciBhcHBsaWNhdGlvbnMgb24gcHJvZHVjdGlvbiwgeW91IGFyZSBlbmNvdXJhZ2VkIHRvIHJ1biB5b3VyIG93biBub2RlIHdpdGggaW5kZXhlciwgb3IgdXNlIGFuIEFsZ29yYW5kIFJFU1QgQVBJIHByb3ZpZGVyIHdpdGggYSBkZWRpY2F0ZWQgQVBJIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b2tlbk9yQmFzZUNsaWVudCAtIFRoZSBBUEkgdG9rZW4gZm9yIHRoZSBJbmRleGVyIEFQSVxuICAgICAqIEBwYXJhbSBiYXNlU2VydmVyIC0gUkVTVCBlbmRwb2ludFxuICAgICAqIEBwYXJhbSBwb3J0IC0gUG9ydCBudW1iZXIgaWYgc3BlY2lmaWNhbGx5IGNvbmZpZ3VyZWQgYnkgdGhlIHNlcnZlclxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gT3B0aW9uYWwgaGVhZGVyc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuT3JCYXNlQ2xpZW50LCBiYXNlU2VydmVyID0gJ2h0dHA6Ly8xMjcuMC4wLjEnLCBwb3J0ID0gODA4MCwgaGVhZGVycyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCdYLUluZGV4ZXItQVBJLVRva2VuJywgdG9rZW5PckJhc2VDbGllbnQsIGJhc2VTZXJ2ZXIsIHBvcnQsIGhlYWRlcnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoZWFsdGggb2JqZWN0IGZvciB0aGUgc2VydmljZS5cbiAgICAgKiBSZXR1cm5zIDIwMCBpZiBoZWFsdGh5LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGhlYWx0aCA9IGF3YWl0IGluZGV4ZXJDbGllbnQubWFrZUhlYWx0aENoZWNrKCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LWhlYWx0aClcbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgbWFrZUhlYWx0aENoZWNrKCkge1xuICAgICAgICByZXR1cm4gbmV3IG1ha2VIZWFsdGhDaGVja18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhY2NvdW50cyB3aG8gaG9sZCB0aGUgZ2l2ZW4gYXNzZXQgYW5kIHRoZWlyIGJhbGFuY2UuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFzc2V0c2Fzc2V0LWlkYmFsYW5jZXMpXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIGFzc2V0IElEIHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFzc2V0QmFsYW5jZXMoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBBc3NldEJhbGFuY2VzXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcsIGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cmFuc2FjdGlvbnMgcmVsYXRpbmcgdG8gdGhlIGdpdmVuIGFzc2V0LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRUeG5zID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBc3NldFRyYW5zYWN0aW9ucyhhc3NldElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhc3NldHNhc3NldC1pZHRyYW5zYWN0aW9ucylcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgYXNzZXQgSUQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgbG9va3VwQXNzZXRUcmFuc2FjdGlvbnMoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBBc3NldFRyYW5zYWN0aW9uc18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJhbnNhY3Rpb25zIHJlbGF0aW5nIHRvIHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50VHhucyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQWNjb3VudFRyYW5zYWN0aW9ucyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWR0cmFuc2FjdGlvbnMpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgbG9va3VwQWNjb3VudFRyYW5zYWN0aW9ucyhhY2NvdW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9va3VwQWNjb3VudFRyYW5zYWN0aW9uc18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBhY2NvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYmxvY2sgZm9yIHRoZSBwYXNzZWQgcm91bmQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBibG9ja0luZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEJsb2NrKHRhcmdldEJsb2NrKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJibG9ja3Nyb3VuZC1udW1iZXIpXG4gICAgICogQHBhcmFtIHJvdW5kIC0gVGhlIG51bWJlciBvZiB0aGUgcm91bmQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgbG9va3VwQmxvY2socm91bmQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBCbG9ja18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCByb3VuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHR4bklkID0gXCJNRVVPQzRSUUpCMjNDUVpSRlJLWUVJNldCTzczVlRUUFNUNUE3QjNTNU9LQlVZNkxGVURBXCI7XG4gICAgICogY29uc3QgdHhuSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwVHJhbnNhY3Rpb25CeUlEKHR4bklkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJ0cmFuc2FjdGlvbnN0eGlkKVxuICAgICAqIEBwYXJhbSB0eElEIC0gVGhlIElEIG9mIHRoZSB0cmFuc2FjdGlvbiB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBsb29rdXBUcmFuc2FjdGlvbkJ5SUQodHhJRCkge1xuICAgICAgICByZXR1cm4gbmV3IGxvb2t1cFRyYW5zYWN0aW9uQnlJRF8xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCB0eElEKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFjY291bnRzYWNjb3VudC1pZClcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFjY291bnRCeUlEKGFjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBBY2NvdW50QnlJRF8xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBhY2NvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhc3NldCBhYm91dCB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQWNjb3VudEFzc2V0cyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRhc3NldHMpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBsb29rdXBBY2NvdW50QXNzZXRzKGFjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBBY2NvdW50QXNzZXRzXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcsIGFjY291bnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFzc2V0IGluZm9ybWF0aW9uIGNyZWF0ZWQgYnkgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRDcmVhdGVkQXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRjcmVhdGVkLWFzc2V0cylcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFjY291bnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBsb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0c18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBhY2NvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcHBsaWNhdGlvbiBsb2NhbCBzdGF0ZSBhYm91dCB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFwcExvY2FsU3RhdGVzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkYXBwcy1sb2NhbC1zdGF0ZSlcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhY2NvdW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcsIGFjY291bnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFwcGxpY2F0aW9uIGluZm9ybWF0aW9uIGNyZWF0ZWQgYnkgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRDcmVhdGVkQXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkY3JlYXRlZC1hcHBsaWNhdGlvbnMpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBsb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhY2NvdW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnNfMS5kZWZhdWx0KHRoaXMuYywgdGhpcy5pbnREZWNvZGluZywgYWNjb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhc3NlZCBhc3NldC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFzc2V0c2Fzc2V0LWlkKVxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBJRCBvZiB0aGUgYXNzZXQgb3QgbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgbG9va3VwQXNzZXRCeUlEKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9va3VwQXNzZXRCeUlEXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcsIGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGFzc2VkIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXBwbGljYXRpb25zKGFwcElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZClcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFwcGxpY2F0aW9ucyhpbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IGxvb2t1cEFwcGxpY2F0aW9uc18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBieSB0aGUgcGFzc2VkIGluIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGxvZ3MpXG4gICAgICogQHBhcmFtIGFwcElEIC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB3aGljaCBnZW5lcmF0ZWQgdGhlIGxvZ3MuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJRCkge1xuICAgICAgICByZXR1cm4gbmV3IGxvb2t1cEFwcGxpY2F0aW9uTG9nc18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBhcHBJRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaW5kZXhlZCBhY2NvdW50cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhY2NvdW50cyA9IGF3YWl0IGluZGV4ZXJDbGllbnQuc2VhcmNoQWNjb3VudHMoKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50cylcbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgc2VhcmNoQWNjb3VudHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgc2VhcmNoQWNjb3VudHNfMS5kZWZhdWx0KHRoaXMuYywgdGhpcy5pbnREZWNvZGluZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgaW5kZXhlZCB0cmFuc2FjdGlvbnMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdHhucyA9IGF3YWl0IGluZGV4ZXJDbGllbnQuc2VhcmNoRm9yVHJhbnNhY3Rpb25zKCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYydHJhbnNhY3Rpb25zKVxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBzZWFyY2hGb3JUcmFuc2FjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgc2VhcmNoRm9yVHJhbnNhY3Rpb25zXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGluZGV4ZWQgYXNzZXRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnQuc2VhcmNoRm9yQXNzZXRzKCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXNzZXRzKVxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBzZWFyY2hGb3JBc3NldHMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgc2VhcmNoRm9yQXNzZXRzXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGluZGV4ZWQgYXBwbGljYXRpb25zLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50LnNlYXJjaEZvckFwcGxpY2F0aW9ucygpLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFwcGxpY2F0aW9ucylcbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgc2VhcmNoRm9yQXBwbGljYXRpb25zKCkge1xuICAgICAgICByZXR1cm4gbmV3IHNlYXJjaEZvckFwcGxpY2F0aW9uc18xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFwcGxpY2F0aW9uIGJveGVzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhcHBJRCA9IDEyMzQ7XG4gICAgICpcbiAgICAgKiBjb25zdCByZXNwb25zZVBhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcyhhcHBJRClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGNvbnN0IGJveE5hbWVzUGFnZTEgPSByZXNwb25zZVBhZ2UxLmJveGVzLm1hcChib3ggPT4gYm94Lm5hbWUpO1xuICAgICAqXG4gICAgICogY29uc3QgcmVzcG9uc2VQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dFRva2VuKHJlc3BvbnNlUGFnZTEubmV4dFRva2VuKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBjb25zdCBib3hOYW1lc1BhZ2UyID0gcmVzcG9uc2VQYWdlMi5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3hlcylcbiAgICAgKiBAcGFyYW0gYXBwSUQgLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHdpdGggYm94ZXMuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIHNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBzZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzXzEuZGVmYXVsdCh0aGlzLmMsIHRoaXMuaW50RGVjb2RpbmcsIGFwcElEKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwbGljYXRpb24gYm94IGdpdmVuIGl0cyBuYW1lLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGJveE5hbWUgPSBCdWZmZXIuZnJvbShcImZvb1wiKTtcbiAgICAgKiBjb25zdCBib3hSZXNwb25zZSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLkxvb2t1cEFwcGxpY2F0aW9uQm94QnlJRGFuZE5hbWUoMTIzNCwgYm94TmFtZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94VmFsdWUgPSBib3hSZXNwb25zZS52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3gpXG4gICAgICogQHBhcmFtIGFwcElEIC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRoIGJveGVzLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBsb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lKGFwcElELCBib3hOYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgbG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZV8xLmRlZmF1bHQodGhpcy5jLCB0aGlzLmludERlY29kaW5nLCBhcHBJRCwgYm94TmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gSW5kZXhlckNsaWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAccountAppLocalStates extends jsonrequest_1.default {\n    /**\n     * Returns application local state about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/apps-local-state`\n     */\n    path() {\n        return `/v2/accounts/${this.account}/apps-local-state`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */\n    applicationID(index) {\n        this.query['application-id'] = index;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountAppLocalStates;\n//# sourceMappingURL=lookupAccountAppLocalStates.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDO0FBQ0E7QUFDQSwrQkFBK0IsYUFBYTtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcy5qcz9jYzc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgTG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFwcGxpY2F0aW9uIGxvY2FsIHN0YXRlIGFib3V0IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwTG9jYWxTdGF0ZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRhcHBzLWxvY2FsLXN0YXRlKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vYXBwcy1sb2NhbC1zdGF0ZWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vYXBwcy1sb2NhbC1zdGF0ZWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpbWl0IGZvciBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgcm91bmQgdG8gZmlsdGVyIHdpdGguXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IHRhcmdldEJsb2NrID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXBwTG9jYWxTdGF0ZXMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dChhY2NvdW50QXNzZXRzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFwcGxpY2F0aW9uSUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBsaWNhdGlvbklEID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXBwbGljYXRpb25zID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFwcExvY2FsU3RhdGVzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5hcHBsaWNhdGlvbklEKGFwcGxpY2F0aW9uSUQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBhcHBsaWNhdGlvbklEXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgYXBwbGljYXRpb25JRChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IExvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAppLocalStates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAccountAssets extends jsonrequest_1.default {\n    /**\n     * Returns asset about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/assets`\n     */\n    path() {\n        return `/v2/accounts/${this.account}/assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountAssets(address)\n     *        .assetId(assetId)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */\n    assetId(index) {\n        this.query['asset-id'] = index;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountAssets;\n//# sourceMappingURL=lookupAccountAssets.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QXNzZXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0EsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFjY291bnRBc3NldHMuanM/YmNjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIExvb2t1cEFjY291bnRBc3NldHMgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXNzZXQgYWJvdXQgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkYXNzZXRzKVxuICAgICAqIEBwYXJhbSBhY2NvdW50IC0gVGhlIGFkZHJlc3Mgb2YgdGhlIGFjY291bnQgdG8gbG9vayB1cC5cbiAgICAgKiBAY2F0ZWdvcnkgR0VUXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYywgaW50RGVjb2RpbmcsIGFjY291bnQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgICAgICB0aGlzLmFjY291bnQgPSBhY2NvdW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FjY291bnRzLyR7YWNjb3VudH0vYXNzZXRzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fS9hc3NldHNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsaW1pdCBmb3IgZmlsdGVyLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSByb3VuZCB0byBmaWx0ZXIgd2l0aC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEFzc2V0cyhhZGRyZXNzKVxuICAgICAqICAgICAgICAucm91bmQodGFyZ2V0QmxvY2spXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSByb3VuZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHJvdW5kKHJvdW5kKSB7XG4gICAgICAgIHRoaXMucXVlcnkucm91bmQgPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICpcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0KGFjY291bnRBc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGFuIGFzc2V0SUQgdG8gc2VhcmNoIGZvci5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhc3NldEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmFzc2V0SWQoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGluZGV4IC0gdGhlIGFzc2V0SURcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBhc3NldElkKGluZGV4KSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2Fzc2V0LWlkJ10gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTG9va3VwQWNjb3VudEFzc2V0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRBc3NldHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js":
/*!******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAccountByID extends jsonrequest_1.default {\n    /**\n     * Returns information about the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient.lookupAccountByID(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}`\n     */\n    path() {\n        return `/v2/accounts/${this.account}`;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .includeAll()\n     *        .do();\n     * ```\n     * @param value\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountInfo = await indexerClient\n     *        .lookupAccountByID(address)\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */\n    exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountByID;\n//# sourceMappingURL=lookupAccountByID.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QnlJRC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBLCtCQUErQixhQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50QnlJRC5qcz9iNWM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgTG9va3VwQWNjb3VudEJ5SUQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIGFjY291bnQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWQpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgYWNjb3VudCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYWNjb3VudHMvJHthY2NvdW50fWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHJvdW5kIHRvIGZpbHRlciB3aXRoLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50SW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRCeUlEKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhjbHVkZSBhZGRpdGlvbmFsIGl0ZW1zIHN1Y2ggYXMgYXNzZXQgaG9sZGluZ3MsIGFwcGxpY2F0aW9uIGxvY2FsIGRhdGEgc3RvcmVkIGZvciB0aGlzIGFjY291bnQsIGFzc2V0IHBhcmFtZXRlcnMgY3JlYXRlZCBieSB0aGlzIGFjY291bnQsIGFuZCBhcHBsaWNhdGlvbiBwYXJhbWV0ZXJzIGNyZWF0ZWQgYnkgdGhpcyBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudEJ5SUQoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmV4Y2x1ZGUoXCJhbGxcIilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50QnlJRChhZGRyZXNzKVxuICAgICAqICAgICAgICAuZXhjbHVkZShcImFzc2V0cyxjcmVhdGVkLWFzc2V0c1wiKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrcyBCeSBkZWZhdWx0LCBpdCBiZWhhdmVzIGFzIGV4Y2x1ZGU9bm9uZVxuICAgICAqIEBwYXJhbSBleGNsdWRlIC0gQXJyYXkgb2YgYGFsbGAsIGBhc3NldHNgLCBgY3JlYXRlZC1hc3NldHNgLCBgYXBwcy1sb2NhbC1zdGF0ZWAsIGBjcmVhdGVkLWFwcHNgLCBgbm9uZWBcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBleGNsdWRlKGV4Y2x1ZGUpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5leGNsdWRlID0gZXhjbHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTG9va3VwQWNjb3VudEJ5SUQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBY2NvdW50QnlJRC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAccountCreatedApplications extends jsonrequest_1.default {\n    /**\n     * Returns application information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-applications`\n     */\n    path() {\n        return `/v2/accounts/${this.account}/created-applications`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedApplications(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Specify an applicationID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const applicationID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountApplications = await indexerClient\n     *        .lookupAccountAppLocalStates(address)\n     *        .applicationID(applicationID)\n     *        .do();\n     * ```\n     * @param index - the applicationID\n     * @category query\n     */\n    applicationID(index) {\n        this.query['application-id'] = index;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountCreatedApplications;\n//# sourceMappingURL=lookupAccountCreatedApplications.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBLCtCQUErQixhQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucy5qcz80MTFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgTG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXBwbGljYXRpb24gaW5mb3JtYXRpb24gY3JlYXRlZCBieSB0aGUgZ2l2ZW4gYWNjb3VudC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudENyZWF0ZWRBcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhY2NvdW50c2FjY291bnQtaWRjcmVhdGVkLWFwcGxpY2F0aW9ucylcbiAgICAgKiBAcGFyYW0gYWNjb3VudCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBhY2NvdW50KSB7XG4gICAgICAgIHN1cGVyKGMsIGludERlY29kaW5nKTtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICAgICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hY2NvdW50cy8ke2FjY291bnR9L2NyZWF0ZWQtYXBwbGljYXRpb25zYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FjY291bnRzLyR7dGhpcy5hY2NvdW50fS9jcmVhdGVkLWFwcGxpY2F0aW9uc2A7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpbWl0IGZvciBmaWx0ZXIuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpbWl0IC0gbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbGltaXQobGltaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5saW1pdCA9IGxpbWl0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSByb3VuZCB0byBmaWx0ZXIgd2l0aC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgdGFyZ2V0QmxvY2sgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLnJvdW5kKHRhcmdldEJsb2NrKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcm91bmRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICByb3VuZChyb3VuZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0c1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBcHBsaWNhdGlvbnMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0KGFjY291bnRBc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgYWxsIGl0ZW1zIGluY2x1ZGluZyBjbG9zZWQgYWNjb3VudHMsIGRlbGV0ZWQgYXBwbGljYXRpb25zLCBkZXN0cm95ZWQgYXNzZXRzLCBvcHRlZC1vdXQgYXNzZXQgaG9sZGluZ3MsIGFuZCBjbG9zZWQtb3V0IGFwcGxpY2F0aW9uIGxvY2Fsc3RhdGVzXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBhbiBhcHBsaWNhdGlvbklEIHRvIHNlYXJjaCBmb3IuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwbGljYXRpb25JRCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhZGRyZXNzID0gXCJYQllMUzJFNllJNlhYTDVCV0NBTU9BNEdUV0hYV0VOWk1YNVVIWE1STldXVVE3QlhDWTVXQzVURVBBXCI7XG4gICAgICogY29uc3QgYWNjb3VudEFwcGxpY2F0aW9ucyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRBcHBMb2NhbFN0YXRlcyhhZGRyZXNzKVxuICAgICAqICAgICAgICAuYXBwbGljYXRpb25JRChhcHBsaWNhdGlvbklEKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgYXBwbGljYXRpb25JRFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGFwcGxpY2F0aW9uSUQoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnYXBwbGljYXRpb24taWQnXSA9IGluZGV4O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb29rdXBBY2NvdW50Q3JlYXRlZEFwcGxpY2F0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFjY291bnRDcmVhdGVkQXBwbGljYXRpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAccountCreatedAssets extends jsonrequest_1.default {\n    /**\n     * Returns asset information created by the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\n     * @param account - The address of the account to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/created-assets`\n     */\n    path() {\n        return `/v2/accounts/${this.account}/created-assets`;\n    }\n    /**\n     * Add a limit for filter.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Specify round to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const targetBlock = 18309917;\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const maxResults = 20;\n     *\n     * const accountAssetsPage1 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * const accountAssetsPage2 = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .limit(maxResults)\n     *        .next(accountAssetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     * @param value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Specify an assetID to search for.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetAssets = await indexerClient\n     *        .lookupAccountCreatedAssets(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @param index - the assetID\n     * @category query\n     */\n    assetID(index) {\n        this.query['asset-id'] = index;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountCreatedAssets;\n//# sourceMappingURL=lookupAccountCreatedAssets.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBLCtCQUErQixhQUFhO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9pbmRleGVyL2xvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzLmpzPzg3MTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBMb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhc3NldCBpbmZvcm1hdGlvbiBjcmVhdGVkIGJ5IHRoZSBnaXZlbiBhY2NvdW50LlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50Q3JlYXRlZEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcykuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYWNjb3VudHNhY2NvdW50LWlkY3JlYXRlZC1hc3NldHMpXG4gICAgICogQHBhcmFtIGFjY291bnQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgYWNjb3VudCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgYWNjb3VudCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvYWNjb3VudHMvJHthY2NvdW50fS9jcmVhdGVkLWFzc2V0c2BcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hY2NvdW50cy8ke3RoaXMuYWNjb3VudH0vY3JlYXRlZC1hc3NldHNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsaW1pdCBmb3IgZmlsdGVyLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgcm91bmQgdG8gZmlsdGVyIHdpdGguXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IHRhcmdldEJsb2NrID0gMTgzMDk5MTc7XG4gICAgICogY29uc3QgYWNjb3VudEFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5yb3VuZCh0YXJnZXRCbG9jaylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHJvdW5kXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgcm91bmQocm91bmQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5yb3VuZCA9IHJvdW5kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHNQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGNvbnN0IGFjY291bnRBc3NldHNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFjY291bnRDcmVhdGVkQXNzZXRzKGFkZHJlc3MpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dChhY2NvdW50QXNzZXRzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhY2NvdW50QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgYW4gYXNzZXRJRCB0byBzZWFyY2ggZm9yLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SUQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYWRkcmVzcyA9IFwiWEJZTFMyRTZZSTZYWEw1QldDQU1PQTRHVFdIWFdFTlpNWDVVSFhNUk5XV1VRN0JYQ1k1V0M1VEVQQVwiO1xuICAgICAqIGNvbnN0IGFzc2V0QXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHMoYWRkcmVzcylcbiAgICAgKiAgICAgICAgLmFzc2V0SUQoYXNzZXRJRClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGluZGV4IC0gdGhlIGFzc2V0SURcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBhc3NldElEKGluZGV4KSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2Fzc2V0LWlkJ10gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTG9va3VwQWNjb3VudENyZWF0ZWRBc3NldHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBY2NvdW50Q3JlYXRlZEFzc2V0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountCreatedAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.base64StringFunnel = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Accept base64 string or Uint8Array and output base64 string\n * @param data - Base64 string or Uint8Array\n * @returns The inputted base64 string, or a base64 string representation of the Uint8Array\n */\nfunction base64StringFunnel(data) {\n    if (typeof data === 'string') {\n        return data;\n    }\n    return buffer_1.Buffer.from(data).toString('base64');\n}\nexports.base64StringFunnel = base64StringFunnel;\nclass LookupAccountTransactions extends jsonrequest_1.default {\n    /**\n     * Returns transactions relating to the given account.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\n     * @param account - The address of the account.\n     */\n    constructor(c, intDecoding, account) {\n        super(c, intDecoding);\n        this.account = account;\n        this.account = account;\n    }\n    /**\n     * @returns `/v2/accounts/${account}/transactions`\n     */\n    path() {\n        return `/v2/accounts/${this.account}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */\n    notePrefix(prefix) {\n        this.query['note-prefix'] = base64StringFunnel(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txType(\"appl\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */\n    txType(type) {\n        this.query['tx-type'] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .sigType(\"msig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */\n    sigType(type) {\n        this.query['sig-type'] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */\n    txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    minRound(round) {\n        this.query['min-round'] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    maxRound(round) {\n        this.query['max-round'] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */\n    assetID(id) {\n        this.query['asset-id'] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */\n    beforeTime(before) {\n        this.query['before-time'] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */\n    afterTime(after) {\n        this.query['after-time'] = after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */\n    currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query['currency-greater-than'] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n    currencyLessThan(lesser) {\n        this.query['currency-less-than'] = lesser;\n        return this;\n    }\n    /**\n     * The next page of results. Use the next token provided by the previous results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     *\n     * const accountTxnsPage1 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountTxnsPage2 = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .limit(maxResults)\n     *        .nextToken(accountTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accountTxns = await indexerClient\n     *        .lookupAccountTransactions(address)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */\n    rekeyTo(rekeyTo) {\n        this.query['rekey-to'] = rekeyTo;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAccountTransactions;\n//# sourceMappingURL=lookupAccountTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js\");\nclass LookupApplicationBoxByIDandName extends jsonrequest_1.default {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const boxName = Buffer.from(\"foo\");\n     * const boxResponse = await indexerClient\n     *        .LookupApplicationBoxByIDandName(1234, boxName)\n     *        .do();\n     * const boxValue = boxResponse.value;\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\n     * @oaram index - application index.\n     * @category GET\n     */\n    constructor(c, intDecoding, index, boxName) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n        // Encode query in base64 format and append the encoding prefix.\n        const encodedName = buffer_1.Buffer.from(boxName).toString('base64');\n        this.query.name = encodeURI(`b64:${encodedName}`);\n    }\n    /**\n     * @returns `/v2/applications/${index}/box`\n     */\n    path() {\n        return `/v2/applications/${this.index}/box`;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.Box.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = LookupApplicationBoxByIDandName;\n//# sourceMappingURL=lookupApplicationBoxByIDandName.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLCtGQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQ7QUFDQTtBQUNBLG9DQUFvQyxNQUFNO0FBQzFDO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lLmpzPzdkMTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vbW9kZWxzL3R5cGVzXCIpO1xuY2xhc3MgTG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZSBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFwcGxpY2F0aW9uIGJveGVzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGJveE5hbWUgPSBCdWZmZXIuZnJvbShcImZvb1wiKTtcbiAgICAgKiBjb25zdCBib3hSZXNwb25zZSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLkxvb2t1cEFwcGxpY2F0aW9uQm94QnlJRGFuZE5hbWUoMTIzNCwgYm94TmFtZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94VmFsdWUgPSBib3hSZXNwb25zZS52YWx1ZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXBwbGljYXRpb25zYXBwbGljYXRpb24taWRib3gpXG4gICAgICogQG9hcmFtIGluZGV4IC0gYXBwbGljYXRpb24gaW5kZXguXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBpbmRleCwgYm94TmFtZSkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICAvLyBFbmNvZGUgcXVlcnkgaW4gYmFzZTY0IGZvcm1hdCBhbmQgYXBwZW5kIHRoZSBlbmNvZGluZyBwcmVmaXguXG4gICAgICAgIGNvbnN0IGVuY29kZWROYW1lID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oYm94TmFtZSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5hbWUgPSBlbmNvZGVVUkkoYGI2NDoke2VuY29kZWROYW1lfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fS9ib3hgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH0vYm94YDtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzXzEuQm94LmZyb21fb2JqX2Zvcl9lbmNvZGluZyhib2R5KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb29rdXBBcHBsaWNhdGlvbkJveEJ5SURhbmROYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXBwbGljYXRpb25Cb3hCeUlEYW5kTmFtZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationBoxByIDandName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupApplicationLogs extends jsonrequest_1.default {\n    /**\n     * Returns log messages generated by the passed in application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\n     * @param appID - The ID of the application which generated the logs.\n     * @category GET\n     */\n    constructor(c, intDecoding, appID) {\n        super(c, intDecoding);\n        this.appID = appID;\n        this.appID = appID;\n    }\n    /**\n     * @returns `/v2/applications/${appID}/logs`\n     */\n    path() {\n        return `/v2/applications/${this.appID}/logs`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    minRound(round) {\n        this.query['min-round'] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    maxRound(round) {\n        this.query['max-round'] = round;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const appLogsPage1 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appLogsPage2 = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .limit(maxResults)\n     *        .nextToken(appLogsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Only include transactions with this sender address.\n     *\n     * #### Example\n     * ```typescript\n     * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .sender(sender)\n     *        .do();\n     * ```\n     *\n     * @param senderAddress\n     * @category query\n     */\n    sender(senderAddress) {\n        this.query['sender-address'] = senderAddress;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const appLogs = await indexerClient\n     *        .lookupApplicationLogs(appId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */\n    txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n}\nexports[\"default\"] = LookupApplicationLogs;\n//# sourceMappingURL=lookupApplicationLogs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbkxvZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxNQUFNO0FBQzFDO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXBwbGljYXRpb25Mb2dzLmpzPzM3NGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBMb29rdXBBcHBsaWNhdGlvbkxvZ3MgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBieSB0aGUgcGFzc2VkIGluIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGxvZ3MpXG4gICAgICogQHBhcmFtIGFwcElEIC0gVGhlIElEIG9mIHRoZSBhcHBsaWNhdGlvbiB3aGljaCBnZW5lcmF0ZWQgdGhlIGxvZ3MuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBhcHBJRCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuYXBwSUQgPSBhcHBJRDtcbiAgICAgICAgdGhpcy5hcHBJRCA9IGFwcElEO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2FwcElEfS9sb2dzYFxuICAgICAqL1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiBgL3YyL2FwcGxpY2F0aW9ucy8ke3RoaXMuYXBwSUR9L2xvZ3NgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIHJlc3VsdHMgYXQgb3IgYWZ0ZXIgdGhlIHNwZWNpZmllZCBtaW4tcm91bmQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWluUm91bmQgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAubWluUm91bmQobWluUm91bmQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHJvdW5kXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbWluUm91bmQocm91bmQpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnbWluLXJvdW5kJ10gPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGUgcmVzdWx0cyBhdCBvciBiZWZvcmUgdGhlIHNwZWNpZmllZCBtYXgtcm91bmQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4Um91bmQgPSAxODMwOTkxNztcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAubWF4Um91bmQobWF4Um91bmQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHJvdW5kXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbWF4Um91bmQocm91bmQpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnbWF4LXJvdW5kJ10gPSByb3VuZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjU7XG4gICAgICpcbiAgICAgKiBjb25zdCBhcHBMb2dzUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbkxvZ3MoYXBwSWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFwcExvZ3NQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0VG9rZW4oYXBwTG9nc1BhZ2UxW1wibmV4dC10b2tlblwiXSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPbmx5IGluY2x1ZGUgdHJhbnNhY3Rpb25zIHdpdGggdGhpcyBzZW5kZXIgYWRkcmVzcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBzZW5kZXIgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhcHBMb2dzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25Mb2dzKGFwcElkKVxuICAgICAqICAgICAgICAuc2VuZGVyKHNlbmRlcilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VuZGVyQWRkcmVzc1xuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHNlbmRlcihzZW5kZXJBZGRyZXNzKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ3NlbmRlci1hZGRyZXNzJ10gPSBzZW5kZXJBZGRyZXNzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9va3VwIHRoZSBzcGVjaWZpYyB0cmFuc2FjdGlvbiBieSBJRC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0eElkID0gXCJNRVVPQzRSUUpCMjNDUVpSRlJLWUVJNldCTzczVlRUUFNUNUE3QjNTNU9LQlVZNkxGVURBXCI7XG4gICAgICogY29uc3QgYXBwTG9ncyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFwcGxpY2F0aW9uTG9ncyhhcHBJZClcbiAgICAgKiAgICAgICAgLnR4aWQodHhJZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHhpZFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIHR4aWQodHhpZCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LnR4aWQgPSB0eGlkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb29rdXBBcHBsaWNhdGlvbkxvZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBBcHBsaWNhdGlvbkxvZ3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplicationLogs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupApplications extends jsonrequest_1.default {\n    /**\n     * Returns information about the passed application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient.lookupApplications(appId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\n     * @param index - The ID of the application to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/applications/${index}`\n     */\n    path() {\n        return `/v2/applications/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const appId = 60553466;\n     * const appInfo = await indexerClient\n     *        .lookupApplications(appId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n}\nexports[\"default\"] = LookupApplications;\n//# sourceMappingURL=lookupApplications.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxNQUFNO0FBQzFDO0FBQ0E7QUFDQSxtQ0FBbUMsV0FBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBcHBsaWNhdGlvbnMuanM/NzE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIExvb2t1cEFwcGxpY2F0aW9ucyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGFzc2VkIGFwcGxpY2F0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQXBwbGljYXRpb25zKGFwcElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZClcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIGxvb2sgdXAuXG4gICAgICogQGNhdGVnb3J5IEdFVFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGMsIGludERlY29kaW5nLCBpbmRleCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9ucy8ke2luZGV4fWBcbiAgICAgKi9cbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gYC92Mi9hcHBsaWNhdGlvbnMvJHt0aGlzLmluZGV4fWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGVzIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwSWQgPSA2MDU1MzQ2NjtcbiAgICAgKiBjb25zdCBhcHBJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXBwbGljYXRpb25zKGFwcElkKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbChmYWxzZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGUgMlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhcHBJZCA9IDYwNTUzNDY2O1xuICAgICAqIGNvbnN0IGFwcEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBcHBsaWNhdGlvbnMoYXBwSWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZhdWx0IHRydWUgd2hlbiBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IExvb2t1cEFwcGxpY2F0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFwcGxpY2F0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js":
/*!********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAssetBalances extends jsonrequest_1.default {\n    /**\n     * Returns the list of accounts which hold the given asset and their balance.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\n     * @param index - The asset ID to look up.\n     */\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}/balances`\n     */\n    path() {\n        return `/v2/assets/${this.index}/balances`;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance greater than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const minBalance = 1000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyGreaterThan(minBalance)\n     *        .do();\n     * ```\n     * @param greater\n     * @category query\n     */\n    currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query['currency-greater-than'] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an asset balance less than this value.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxBalance = 2000000;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .currencyLessThan(maxBalance)\n     *        .do();\n     * ```\n     * @param lesser\n     * @category query\n     */\n    currencyLessThan(lesser) {\n        this.query['currency-less-than'] = lesser;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const maxResults = 20;\n     *\n     * const assetBalancesPage1 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetBalancesPage2 = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetBalancesPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetBalances = await indexerClient\n     *        .lookupAssetBalances(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAssetBalances;\n//# sourceMappingURL=lookupAssetBalances.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJhbGFuY2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBLDZCQUE2QixXQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXNzZXRCYWxhbmNlcy5qcz9jYzU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuY2xhc3MgTG9va3VwQXNzZXRCYWxhbmNlcyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhY2NvdW50cyB3aGljaCBob2xkIHRoZSBnaXZlbiBhc3NldCBhbmQgdGhlaXIgYmFsYW5jZS5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZCkuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LXYyYXNzZXRzYXNzZXQtaWRiYWxhbmNlcylcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgYXNzZXQgSUQgdG8gbG9vayB1cC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHMvJHtpbmRleH0vYmFsYW5jZXNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXNzZXRzLyR7dGhpcy5pbmRleH0vYmFsYW5jZXNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZpbHRlcmVkIHJlc3VsdHMgc2hvdWxkIGhhdmUgYW4gYXNzZXQgYmFsYW5jZSBncmVhdGVyIHRoYW4gdGhpcyB2YWx1ZS5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IG1pbkJhbGFuY2UgPSAxMDAwMDAwO1xuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5sb29rdXBBc3NldEJhbGFuY2VzKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5jdXJyZW5jeUdyZWF0ZXJUaGFuKG1pbkJhbGFuY2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBncmVhdGVyXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgY3VycmVuY3lHcmVhdGVyVGhhbihncmVhdGVyKSB7XG4gICAgICAgIC8vIFdlIGNvbnZlcnQgdGhlIGZvbGxvd2luZyB0byBhIHN0cmluZyBmb3Igbm93IHRvIGNvcnJlY3RseSBpbmNsdWRlIHplcm8gdmFsdWVzIGluIHJlcXVlc3QgcGFyYW1ldGVycy5cbiAgICAgICAgdGhpcy5xdWVyeVsnY3VycmVuY3ktZ3JlYXRlci10aGFuJ10gPSBncmVhdGVyLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJlZCByZXN1bHRzIHNob3VsZCBoYXZlIGFuIGFzc2V0IGJhbGFuY2UgbGVzcyB0aGFuIHRoaXMgdmFsdWUuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBtYXhCYWxhbmNlID0gMjAwMDAwMDtcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKVxuICAgICAqICAgICAgICAuY3VycmVuY3lMZXNzVGhhbihtYXhCYWxhbmNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbGVzc2VyXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgY3VycmVuY3lMZXNzVGhhbihsZXNzZXIpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnY3VycmVuY3ktbGVzcy10aGFuJ10gPSBsZXNzZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFzc2V0QmFsYW5jZXNQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlc1BhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihhc3NldEJhbGFuY2VzUGFnZTFbXCJuZXh0LXRva2VuXCJdKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gbmV4dFRva2VuIC0gcHJvdmlkZWQgYnkgdGhlIHByZXZpb3VzIHJlc3VsdHMuXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgbmV4dFRva2VuKG5leHRUb2tlbikge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0VG9rZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlcy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRCYWxhbmNlcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLmxvb2t1cEFzc2V0QmFsYW5jZXMoYXNzZXRJZClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEJhbGFuY2VzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCYWxhbmNlcyhhc3NldElkKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbCgpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBMb29rdXBBc3NldEJhbGFuY2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwQXNzZXRCYWxhbmNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetBalances.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupAssetByID extends jsonrequest_1.default {\n    /**\n     * Returns asset information of the queried asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\n     * @param index - The asset ID to look up.\n     */\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}`\n     */\n    path() {\n        return `/v2/assets/${this.index}`;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const assetInfo = await indexerClient\n     *        .lookupAssetByID(assetId)\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAssetByID;\n//# sourceMappingURL=lookupAssetByID.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBBc3NldEJ5SUQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsTUFBTTtBQUNwQztBQUNBO0FBQ0EsNkJBQTZCLFdBQVc7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQXNzZXRCeUlELmpzPzk1YjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBMb29rdXBBc3NldEJ5SUQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYXNzZXQgaW5mb3JtYXRpb24gb2YgdGhlIHF1ZXJpZWQgYXNzZXQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRJZCA9IDE2MzY1MDtcbiAgICAgKiBjb25zdCBhc3NldEluZm8gPSBhd2FpdCBpbmRleGVyQ2xpZW50Lmxvb2t1cEFzc2V0QnlJRChhc3NldElkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhc3NldHNhc3NldC1pZClcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgYXNzZXQgSUQgdG8gbG9vayB1cC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHMvJHtpbmRleH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXNzZXRzLyR7dGhpcy5pbmRleH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNsdWRlcyBhbGwgaXRlbXMgaW5jbHVkaW5nIGNsb3NlZCBhY2NvdW50cywgZGVsZXRlZCBhcHBsaWNhdGlvbnMsIGRlc3Ryb3llZCBhc3NldHMsIG9wdGVkLW91dCBhc3NldCBob2xkaW5ncywgYW5kIGNsb3NlZC1vdXQgYXBwbGljYXRpb24gbG9jYWxzdGF0ZXNcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAxXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFzc2V0SWQgPSAxNjM2NTA7XG4gICAgICogY29uc3QgYXNzZXRJbmZvID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZhdWx0IHRydWUgd2hlbiBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWVcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmNsdWRlQWxsKHZhbHVlID0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydpbmNsdWRlLWFsbCddID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IExvb2t1cEFzc2V0QnlJRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvb2t1cEFzc2V0QnlJRC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js":
/*!************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst lookupAccountTransactions_1 = __webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js\");\nclass LookupAssetTransactions extends jsonrequest_1.default {\n    /**\n     * Returns transactions relating to the given asset.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\n     * @param index - The asset ID to look up.\n     */\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/assets/${index}/transactions`\n     */\n    path() {\n        return `/v2/assets/${this.index}/transactions`;\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */\n    notePrefix(prefix) {\n        this.query['note-prefix'] = (0, lookupAccountTransactions_1.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txType(\"axfer\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`\n     * @category query\n     */\n    txType(type) {\n        this.query['tx-type'] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .sigType(\"lsig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */\n    sigType(type) {\n        this.query['sig-type'] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .txid(txId)\n     *        .do();\n     * ```\n     *\n     * @param txid\n     * @category query\n     */\n    txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    minRound(round) {\n        this.query['min-round'] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    maxRound(round) {\n        this.query['max-round'] = round;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */\n    beforeTime(before) {\n        this.query['before-time'] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */\n    afterTime(after) {\n        this.query['after-time'] = after;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const minBalance = 300000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */\n    currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query['currency-greater-than'] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing asset units.\n     *\n     * #### Example\n     * ```typescript\n     * const maxBalance = 500000;\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n    currencyLessThan(lesser) {\n        this.query['currency-less-than'] = lesser;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"sender\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */\n    addressRole(role) {\n        this.query['address-role'] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .address(address)\n     *        .do();\n     * ```\n     *\n     * @param address\n     * @category query\n     */\n    address(address) {\n        this.query.address = address;\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */\n    excludeCloseTo(exclude) {\n        this.query['exclude-close-to'] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const assetId = 163650;\n     *\n     * const assetTxnsPage1 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetTxnsPage2 = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .limit(maxResults)\n     *        .nextToken(assetTxnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assetTxns = await indexerClient\n     *        .lookupAssetTransactions(assetId)\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */\n    rekeyTo(rekeyTo) {\n        this.query['rekey-to'] = rekeyTo;\n        return this;\n    }\n}\nexports[\"default\"] = LookupAssetTransactions;\n//# sourceMappingURL=lookupAssetTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAssetTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js":
/*!************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupBlock extends jsonrequest_1.default {\n    /**\n     * Returns the block for the passed round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\n     * @param round - The number of the round to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, round) {\n        super(c, intDecoding);\n        this.round = round;\n        this.round = round;\n    }\n    /**\n     * @returns `/v2/blocks/${round}`\n     */\n    path() {\n        return `/v2/blocks/${this.round}`;\n    }\n    /**\n     * Header only flag. When this is set to true, returned block does not contain the\n     * transactions.\n     */\n    headerOnly(headerOnly) {\n        this.query['header-only'] = headerOnly;\n        return this;\n    }\n}\nexports[\"default\"] = LookupBlock;\n//# sourceMappingURL=lookupBlock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBCbG9jay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxtQkFBTyxDQUFDLHNGQUFnQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLE1BQU07QUFDcEM7QUFDQTtBQUNBLDZCQUE2QixXQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwQmxvY2suanM/ZmMzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNsYXNzIExvb2t1cEJsb2NrIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBibG9jayBmb3IgdGhlIHBhc3NlZCByb3VuZC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCB0YXJnZXRCbG9jayA9IDE4MzA5OTE3O1xuICAgICAqIGNvbnN0IGJsb2NrSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwQmxvY2sodGFyZ2V0QmxvY2spLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmJsb2Nrc3JvdW5kLW51bWJlcilcbiAgICAgKiBAcGFyYW0gcm91bmQgLSBUaGUgbnVtYmVyIG9mIHRoZSByb3VuZCB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgcm91bmQpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLnJvdW5kID0gcm91bmQ7XG4gICAgICAgIHRoaXMucm91bmQgPSByb3VuZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9ibG9ja3MvJHtyb3VuZH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYmxvY2tzLyR7dGhpcy5yb3VuZH1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIZWFkZXIgb25seSBmbGFnLiBXaGVuIHRoaXMgaXMgc2V0IHRvIHRydWUsIHJldHVybmVkIGJsb2NrIGRvZXMgbm90IGNvbnRhaW4gdGhlXG4gICAgICogdHJhbnNhY3Rpb25zLlxuICAgICAqL1xuICAgIGhlYWRlck9ubHkoaGVhZGVyT25seSkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydoZWFkZXItb25seSddID0gaGVhZGVyT25seTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTG9va3VwQmxvY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb29rdXBCbG9jay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupBlock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nclass LookupTransactionByID extends jsonrequest_1.default {\n    /**\n     * Returns information about the given transaction.\n     *\n     * #### Example\n     * ```typescript\n     * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\n     * @param txID - The ID of the transaction to look up.\n     * @category GET\n     */\n    constructor(c, intDecoding, txID) {\n        super(c, intDecoding);\n        this.txID = txID;\n        this.txID = txID;\n    }\n    /**\n     * @returns `/v2/transactions/${txID}`\n     */\n    path() {\n        return `/v2/transactions/${this.txID}`;\n    }\n}\nexports[\"default\"] = LookupTransactionByID;\n//# sourceMappingURL=lookupTransactionByID.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9sb29rdXBUcmFuc2FjdGlvbkJ5SUQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxLQUFLO0FBQ3pDO0FBQ0E7QUFDQSxtQ0FBbUMsVUFBVTtBQUM3QztBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbG9va3VwVHJhbnNhY3Rpb25CeUlELmpzP2FhODIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG5jbGFzcyBMb29rdXBUcmFuc2FjdGlvbkJ5SUQgZXh0ZW5kcyBqc29ucmVxdWVzdF8xLmRlZmF1bHQge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGdpdmVuIHRyYW5zYWN0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHR4bklkID0gXCJNRVVPQzRSUUpCMjNDUVpSRlJLWUVJNldCTzczVlRUUFNUNUE3QjNTNU9LQlVZNkxGVURBXCI7XG4gICAgICogY29uc3QgdHhuSW5mbyA9IGF3YWl0IGluZGV4ZXJDbGllbnQubG9va3VwVHJhbnNhY3Rpb25CeUlEKHR4bklkKS5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJ0cmFuc2FjdGlvbnN0eGlkKVxuICAgICAqIEBwYXJhbSB0eElEIC0gVGhlIElEIG9mIHRoZSB0cmFuc2FjdGlvbiB0byBsb29rIHVwLlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgdHhJRCkge1xuICAgICAgICBzdXBlcihjLCBpbnREZWNvZGluZyk7XG4gICAgICAgIHRoaXMudHhJRCA9IHR4SUQ7XG4gICAgICAgIHRoaXMudHhJRCA9IHR4SUQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGAvdjIvdHJhbnNhY3Rpb25zLyR7dHhJRH1gXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvdHJhbnNhY3Rpb25zLyR7dGhpcy50eElEfWA7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTG9va3VwVHJhbnNhY3Rpb25CeUlEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9va3VwVHJhbnNhY3Rpb25CeUlELmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupTransactionByID.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Returns the health object for the service.\n * Returns 200 if healthy.\n *\n * #### Example\n * ```typescript\n * const health = await indexerClient.makeHealthCheck().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\n * @category GET\n */\nclass MakeHealthCheck extends jsonrequest_1.default {\n    /**\n     * @returns `/health`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/health';\n    }\n}\nexports[\"default\"] = MakeHealthCheck;\n//# sourceMappingURL=makeHealthCheck.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9tYWtlSGVhbHRoQ2hlY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL2luZGV4ZXIvbWFrZUhlYWx0aENoZWNrLmpzPzBjYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBqc29ucmVxdWVzdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9qc29ucmVxdWVzdFwiKSk7XG4vKipcbiAqIFJldHVybnMgdGhlIGhlYWx0aCBvYmplY3QgZm9yIHRoZSBzZXJ2aWNlLlxuICogUmV0dXJucyAyMDAgaWYgaGVhbHRoeS5cbiAqXG4gKiAjIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGhlYWx0aCA9IGF3YWl0IGluZGV4ZXJDbGllbnQubWFrZUhlYWx0aENoZWNrKCkuZG8oKTtcbiAqIGBgYFxuICpcbiAqIFtSZXNwb25zZSBkYXRhIHNjaGVtYSBkZXRhaWxzXShodHRwczovL2RldmVsb3Blci5hbGdvcmFuZC5vcmcvZG9jcy9yZXN0LWFwaXMvaW5kZXhlci8jZ2V0LWhlYWx0aClcbiAqIEBjYXRlZ29yeSBHRVRcbiAqL1xuY2xhc3MgTWFrZUhlYWx0aENoZWNrIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL2hlYWx0aGBcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL2hlYWx0aCc7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTWFrZUhlYWx0aENoZWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUhlYWx0aENoZWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/makeHealthCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js":
/*!*************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * NOTICE: This file was generated. Editing this file manually is not recommended.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionAssetConfig = exports.TransactionApplication = exports.Transaction = exports.TealValue = exports.TealKeyValue = exports.StateSchema = exports.StateProofVerifier = exports.StateProofTracking = exports.StateProofSignature = exports.StateProofSigSlot = exports.StateProofReveal = exports.StateProofParticipant = exports.StateProofFields = exports.ParticipationUpdates = exports.MiniAssetHolding = exports.MerkleArrayProof = exports.IndexerStateProofMessage = exports.HealthCheck = exports.HashFactory = exports.EvalDeltaKeyValue = exports.EvalDelta = exports.ErrorResponse = exports.BoxesResponse = exports.BoxDescriptor = exports.Box = exports.BlockUpgradeVote = exports.BlockUpgradeState = exports.BlockRewards = exports.Block = exports.AssetsResponse = exports.AssetResponse = exports.AssetParams = exports.AssetHoldingsResponse = exports.AssetHolding = exports.AssetBalancesResponse = exports.Asset = exports.ApplicationsResponse = exports.ApplicationStateSchema = exports.ApplicationResponse = exports.ApplicationParams = exports.ApplicationLogsResponse = exports.ApplicationLogData = exports.ApplicationLocalStatesResponse = exports.ApplicationLocalState = exports.Application = exports.AccountsResponse = exports.AccountStateDelta = exports.AccountResponse = exports.AccountParticipation = exports.Account = void 0;\nexports.TransactionsResponse = exports.TransactionStateProof = exports.TransactionSignatureMultisigSubsignature = exports.TransactionSignatureMultisig = exports.TransactionSignatureLogicsig = exports.TransactionSignature = exports.TransactionResponse = exports.TransactionPayment = exports.TransactionKeyreg = exports.TransactionAssetTransfer = exports.TransactionAssetFreeze = void 0;\n/* eslint-disable no-use-before-define */\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst basemodel_1 = __importDefault(__webpack_require__(/*! ../../basemodel */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/basemodel.js\"));\n/**\n * Account information at a given round.\n * Definition:\n * data/basics/userBalance.go : AccountData\n */\nclass Account extends basemodel_1.default {\n    /**\n     * Creates a new `Account` object.\n     * @param address - the account public key\n     * @param amount - (algo) total number of MicroAlgos in the account\n     * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\n     * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\n     * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\n     * rewards.\n     * @param round - The round for which this information is relevant.\n     * @param status - (onl) delegation status of the account's MicroAlgos\n     * * Offline - indicates that the associated account is delegated.\n     * * Online - indicates that the associated account used as part of the delegation\n     * pool.\n     * * NotParticipating - indicates that the associated account is neither a\n     * delegator nor a delegate.\n     * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\n     * of application local data (AppLocalState objects) stored in this account.\n     * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\n     * AssetHolding objects held by this account.\n     * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\n     * values of boxes which belong to the associated application.\n     * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\n     * application.\n     * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\n     * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\n     * @param appsLocalState - (appl) applications local data stored in this account.\n     * Note the raw object uses `map[int] -> AppLocalState` for this type.\n     * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\n     * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\n     * account.\n     * Note: the raw account uses `StateSchema` for this type.\n     * @param assets - (asset) assets held by this account.\n     * Note the raw object uses `map[int] -> AssetHolding` for this type.\n     * @param authAddr - (spend) the address against which signing should be checked. If empty, the\n     * address of the current account is used. This field can be updated in any\n     * transaction by setting the RekeyTo field.\n     * @param closedAtRound - Round during which this account was most recently closed.\n     * @param createdApps - (appp) parameters of applications created by this account including app global\n     * data.\n     * Note: the raw account uses `map[int] -> AppParams` for this type.\n     * @param createdAssets - (apar) parameters of assets created by this account.\n     * Note: the raw account uses `map[int] -> Asset` for this type.\n     * @param createdAtRound - Round during which this account first appeared in a transaction.\n     * @param deleted - Whether or not this account is currently closed.\n     * @param participation - AccountParticipation describes the parameters used by this account in consensus\n     * protocol.\n     * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\n     * which are participating.\n     * @param sigType - Indicates what type of signature is used by this account, must be one of:\n     * * sig\n     * * msig\n     * * lsig\n     * * or null if unknown\n     */\n    constructor({ address, amount, amountWithoutPendingRewards, pendingRewards, rewards, round, status, totalAppsOptedIn, totalAssetsOptedIn, totalBoxBytes, totalBoxes, totalCreatedApps, totalCreatedAssets, appsLocalState, appsTotalExtraPages, appsTotalSchema, assets, authAddr, closedAtRound, createdApps, createdAssets, createdAtRound, deleted, participation, rewardBase, sigType, }) {\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n        this.pendingRewards = pendingRewards;\n        this.rewards = rewards;\n        this.round = round;\n        this.status = status;\n        this.totalAppsOptedIn = totalAppsOptedIn;\n        this.totalAssetsOptedIn = totalAssetsOptedIn;\n        this.totalBoxBytes = totalBoxBytes;\n        this.totalBoxes = totalBoxes;\n        this.totalCreatedApps = totalCreatedApps;\n        this.totalCreatedAssets = totalCreatedAssets;\n        this.appsLocalState = appsLocalState;\n        this.appsTotalExtraPages = appsTotalExtraPages;\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.authAddr = authAddr;\n        this.closedAtRound = closedAtRound;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.participation = participation;\n        this.rewardBase = rewardBase;\n        this.sigType = sigType;\n        this.attribute_map = {\n            address: 'address',\n            amount: 'amount',\n            amountWithoutPendingRewards: 'amount-without-pending-rewards',\n            pendingRewards: 'pending-rewards',\n            rewards: 'rewards',\n            round: 'round',\n            status: 'status',\n            totalAppsOptedIn: 'total-apps-opted-in',\n            totalAssetsOptedIn: 'total-assets-opted-in',\n            totalBoxBytes: 'total-box-bytes',\n            totalBoxes: 'total-boxes',\n            totalCreatedApps: 'total-created-apps',\n            totalCreatedAssets: 'total-created-assets',\n            appsLocalState: 'apps-local-state',\n            appsTotalExtraPages: 'apps-total-extra-pages',\n            appsTotalSchema: 'apps-total-schema',\n            assets: 'assets',\n            authAddr: 'auth-addr',\n            closedAtRound: 'closed-at-round',\n            createdApps: 'created-apps',\n            createdAssets: 'created-assets',\n            createdAtRound: 'created-at-round',\n            deleted: 'deleted',\n            participation: 'participation',\n            rewardBase: 'reward-base',\n            sigType: 'sig-type',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['amount-without-pending-rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n        if (typeof data['pending-rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n        if (typeof data['rewards'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data['status'] === 'undefined')\n            throw new Error(`Response is missing required field 'status': ${data}`);\n        if (typeof data['total-apps-opted-in'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n        if (typeof data['total-assets-opted-in'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n        if (typeof data['total-box-bytes'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-box-bytes': ${data}`);\n        if (typeof data['total-boxes'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-boxes': ${data}`);\n        if (typeof data['total-created-apps'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n        if (typeof data['total-created-assets'] === 'undefined')\n            throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n        return new Account({\n            address: data['address'],\n            amount: data['amount'],\n            amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n            pendingRewards: data['pending-rewards'],\n            rewards: data['rewards'],\n            round: data['round'],\n            status: data['status'],\n            totalAppsOptedIn: data['total-apps-opted-in'],\n            totalAssetsOptedIn: data['total-assets-opted-in'],\n            totalBoxBytes: data['total-box-bytes'],\n            totalBoxes: data['total-boxes'],\n            totalCreatedApps: data['total-created-apps'],\n            totalCreatedAssets: data['total-created-assets'],\n            appsLocalState: typeof data['apps-local-state'] !== 'undefined'\n                ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding)\n                : undefined,\n            appsTotalExtraPages: data['apps-total-extra-pages'],\n            appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema'])\n                : undefined,\n            assets: typeof data['assets'] !== 'undefined'\n                ? data['assets'].map(AssetHolding.from_obj_for_encoding)\n                : undefined,\n            authAddr: data['auth-addr'],\n            closedAtRound: data['closed-at-round'],\n            createdApps: typeof data['created-apps'] !== 'undefined'\n                ? data['created-apps'].map(Application.from_obj_for_encoding)\n                : undefined,\n            createdAssets: typeof data['created-assets'] !== 'undefined'\n                ? data['created-assets'].map(Asset.from_obj_for_encoding)\n                : undefined,\n            createdAtRound: data['created-at-round'],\n            deleted: data['deleted'],\n            participation: typeof data['participation'] !== 'undefined'\n                ? AccountParticipation.from_obj_for_encoding(data['participation'])\n                : undefined,\n            rewardBase: data['reward-base'],\n            sigType: data['sig-type'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Account = Account;\n/**\n * AccountParticipation describes the parameters used by this account in consensus\n * protocol.\n */\nclass AccountParticipation extends basemodel_1.default {\n    /**\n     * Creates a new `AccountParticipation` object.\n     * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\n     * @param voteFirstValid - (voteFst) First round for which this participation is valid.\n     * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (voteLst) Last round for which this participation is valid.\n     * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\n     * round.\n     * @param stateProofKey - (stprf) Root of the state proof key (if any)\n     */\n    constructor({ selectionParticipationKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, stateProofKey, }) {\n        super();\n        this.selectionParticipationKey =\n            typeof selectionParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, 'base64'))\n                : selectionParticipationKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey =\n            typeof voteParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, 'base64'))\n                : voteParticipationKey;\n        this.stateProofKey =\n            typeof stateProofKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, 'base64'))\n                : stateProofKey;\n        this.attribute_map = {\n            selectionParticipationKey: 'selection-participation-key',\n            voteFirstValid: 'vote-first-valid',\n            voteKeyDilution: 'vote-key-dilution',\n            voteLastValid: 'vote-last-valid',\n            voteParticipationKey: 'vote-participation-key',\n            stateProofKey: 'state-proof-key',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['selection-participation-key'] === 'undefined')\n            throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n        if (typeof data['vote-first-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n        if (typeof data['vote-key-dilution'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n        if (typeof data['vote-last-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n        if (typeof data['vote-participation-key'] === 'undefined')\n            throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n        return new AccountParticipation({\n            selectionParticipationKey: data['selection-participation-key'],\n            voteFirstValid: data['vote-first-valid'],\n            voteKeyDilution: data['vote-key-dilution'],\n            voteLastValid: data['vote-last-valid'],\n            voteParticipationKey: data['vote-participation-key'],\n            stateProofKey: data['state-proof-key'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountParticipation = AccountParticipation;\n/**\n *\n */\nclass AccountResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AccountResponse` object.\n     * @param account - Account information at a given round.\n     * Definition:\n     * data/basics/userBalance.go : AccountData\n     * @param currentRound - Round at which the results were computed.\n     */\n    constructor({ account, currentRound, }) {\n        super();\n        this.account = account;\n        this.currentRound = currentRound;\n        this.attribute_map = {\n            account: 'account',\n            currentRound: 'current-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['account'] === 'undefined')\n            throw new Error(`Response is missing required field 'account': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AccountResponse({\n            account: Account.from_obj_for_encoding(data['account']),\n            currentRound: data['current-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountResponse = AccountResponse;\n/**\n * Application state delta.\n */\nclass AccountStateDelta extends basemodel_1.default {\n    /**\n     * Creates a new `AccountStateDelta` object.\n     * @param address -\n     * @param delta - Application state delta.\n     */\n    constructor({ address, delta, }) {\n        super();\n        this.address = address;\n        this.delta = delta;\n        this.attribute_map = {\n            address: 'address',\n            delta: 'delta',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (!Array.isArray(data['delta']))\n            throw new Error(`Response is missing required array field 'delta': ${data}`);\n        return new AccountStateDelta({\n            address: data['address'],\n            delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountStateDelta = AccountStateDelta;\n/**\n *\n */\nclass AccountsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AccountsResponse` object.\n     * @param accounts -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ accounts, currentRound, nextToken, }) {\n        super();\n        this.accounts = accounts;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            accounts: 'accounts',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['accounts']))\n            throw new Error(`Response is missing required array field 'accounts': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AccountsResponse({\n            accounts: data['accounts'].map(Account.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AccountsResponse = AccountsResponse;\n/**\n * Application index and its parameters\n */\nclass Application extends basemodel_1.default {\n    /**\n     * Creates a new `Application` object.\n     * @param id - (appidx) application index.\n     * @param params - (appparams) application parameters.\n     * @param createdAtRound - Round when this application was created.\n     * @param deleted - Whether or not this application is currently deleted.\n     * @param deletedAtRound - Round when this application was deleted.\n     */\n    constructor({ id, params, createdAtRound, deleted, deletedAtRound, }) {\n        super();\n        this.id = id;\n        this.params = params;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.deletedAtRound = deletedAtRound;\n        this.attribute_map = {\n            id: 'id',\n            params: 'params',\n            createdAtRound: 'created-at-round',\n            deleted: 'deleted',\n            deletedAtRound: 'deleted-at-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['id'] === 'undefined')\n            throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data['params'] === 'undefined')\n            throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Application({\n            id: data['id'],\n            params: ApplicationParams.from_obj_for_encoding(data['params']),\n            createdAtRound: data['created-at-round'],\n            deleted: data['deleted'],\n            deletedAtRound: data['deleted-at-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Application = Application;\n/**\n * Stores local state associated with an application.\n */\nclass ApplicationLocalState extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLocalState` object.\n     * @param id - The application which this local state is for.\n     * @param schema - (hsch) schema.\n     * @param closedOutAtRound - Round when account closed out of the application.\n     * @param deleted - Whether or not the application local state is currently deleted from its\n     * account.\n     * @param keyValue - (tkv) storage.\n     * @param optedInAtRound - Round when the account opted into the application.\n     */\n    constructor({ id, schema, closedOutAtRound, deleted, keyValue, optedInAtRound, }) {\n        super();\n        this.id = id;\n        this.schema = schema;\n        this.closedOutAtRound = closedOutAtRound;\n        this.deleted = deleted;\n        this.keyValue = keyValue;\n        this.optedInAtRound = optedInAtRound;\n        this.attribute_map = {\n            id: 'id',\n            schema: 'schema',\n            closedOutAtRound: 'closed-out-at-round',\n            deleted: 'deleted',\n            keyValue: 'key-value',\n            optedInAtRound: 'opted-in-at-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['id'] === 'undefined')\n            throw new Error(`Response is missing required field 'id': ${data}`);\n        if (typeof data['schema'] === 'undefined')\n            throw new Error(`Response is missing required field 'schema': ${data}`);\n        return new ApplicationLocalState({\n            id: data['id'],\n            schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n            closedOutAtRound: data['closed-out-at-round'],\n            deleted: data['deleted'],\n            keyValue: typeof data['key-value'] !== 'undefined'\n                ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\n                : undefined,\n            optedInAtRound: data['opted-in-at-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLocalState = ApplicationLocalState;\n/**\n *\n */\nclass ApplicationLocalStatesResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLocalStatesResponse` object.\n     * @param appsLocalStates -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ appsLocalStates, currentRound, nextToken, }) {\n        super();\n        this.appsLocalStates = appsLocalStates;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            appsLocalStates: 'apps-local-states',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['apps-local-states']))\n            throw new Error(`Response is missing required array field 'apps-local-states': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationLocalStatesResponse({\n            appsLocalStates: data['apps-local-states'].map(ApplicationLocalState.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLocalStatesResponse = ApplicationLocalStatesResponse;\n/**\n * Stores the global information associated with an application.\n */\nclass ApplicationLogData extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLogData` object.\n     * @param logs - (lg) Logs for the application being executed by the transaction.\n     * @param txid - Transaction ID\n     */\n    constructor({ logs, txid }) {\n        super();\n        this.logs = logs;\n        this.txid = txid;\n        this.attribute_map = {\n            logs: 'logs',\n            txid: 'txid',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['logs']))\n            throw new Error(`Response is missing required array field 'logs': ${data}`);\n        if (typeof data['txid'] === 'undefined')\n            throw new Error(`Response is missing required field 'txid': ${data}`);\n        return new ApplicationLogData({\n            logs: data['logs'],\n            txid: data['txid'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLogData = ApplicationLogData;\n/**\n *\n */\nclass ApplicationLogsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationLogsResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param currentRound - Round at which the results were computed.\n     * @param logData -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ applicationId, currentRound, logData, nextToken, }) {\n        super();\n        this.applicationId = applicationId;\n        this.currentRound = currentRound;\n        this.logData = logData;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applicationId: 'application-id',\n            currentRound: 'current-round',\n            logData: 'log-data',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['application-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'application-id': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationLogsResponse({\n            applicationId: data['application-id'],\n            currentRound: data['current-round'],\n            logData: typeof data['log-data'] !== 'undefined'\n                ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding)\n                : undefined,\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationLogsResponse = ApplicationLogsResponse;\n/**\n * Stores the global information associated with an application.\n */\nclass ApplicationParams extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationParams` object.\n     * @param approvalProgram - (approv) approval program.\n     * @param clearStateProgram - (clearp) approval program.\n     * @param creator - The address that created this application. This is the address where the\n     * parameters and global state for this application can be found.\n     * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\n     * @param globalState - [\\gs) global schema\n     * @param globalStateSchema - [\\gsch) global schema\n     * @param localStateSchema - [\\lsch) local schema\n     */\n    constructor({ approvalProgram, clearStateProgram, creator, extraProgramPages, globalState, globalStateSchema, localStateSchema, }) {\n        super();\n        this.approvalProgram =\n            typeof approvalProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, 'base64'))\n                : approvalProgram;\n        this.clearStateProgram =\n            typeof clearStateProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, 'base64'))\n                : clearStateProgram;\n        this.creator = creator;\n        this.extraProgramPages = extraProgramPages;\n        this.globalState = globalState;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.attribute_map = {\n            approvalProgram: 'approval-program',\n            clearStateProgram: 'clear-state-program',\n            creator: 'creator',\n            extraProgramPages: 'extra-program-pages',\n            globalState: 'global-state',\n            globalStateSchema: 'global-state-schema',\n            localStateSchema: 'local-state-schema',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['approval-program'] === 'undefined')\n            throw new Error(`Response is missing required field 'approval-program': ${data}`);\n        if (typeof data['clear-state-program'] === 'undefined')\n            throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n        return new ApplicationParams({\n            approvalProgram: data['approval-program'],\n            clearStateProgram: data['clear-state-program'],\n            creator: data['creator'],\n            extraProgramPages: data['extra-program-pages'],\n            globalState: typeof data['global-state'] !== 'undefined'\n                ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\n                : undefined,\n            globalStateSchema: typeof data['global-state-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema'])\n                : undefined,\n            localStateSchema: typeof data['local-state-schema'] !== 'undefined'\n                ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationParams = ApplicationParams;\n/**\n *\n */\nclass ApplicationResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param application - Application index and its parameters\n     */\n    constructor({ currentRound, application, }) {\n        super();\n        this.currentRound = currentRound;\n        this.application = application;\n        this.attribute_map = {\n            currentRound: 'current-round',\n            application: 'application',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationResponse({\n            currentRound: data['current-round'],\n            application: typeof data['application'] !== 'undefined'\n                ? Application.from_obj_for_encoding(data['application'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationResponse = ApplicationResponse;\n/**\n * Specifies maximums on the number of each type that may be stored.\n */\nclass ApplicationStateSchema extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationStateSchema` object.\n     * @param numByteSlice - (nbs) num of byte slices.\n     * @param numUint - (nui) num of uints.\n     */\n    constructor({ numByteSlice, numUint, }) {\n        super();\n        this.numByteSlice = numByteSlice;\n        this.numUint = numUint;\n        this.attribute_map = {\n            numByteSlice: 'num-byte-slice',\n            numUint: 'num-uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['num-byte-slice'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        if (typeof data['num-uint'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        return new ApplicationStateSchema({\n            numByteSlice: data['num-byte-slice'],\n            numUint: data['num-uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationStateSchema = ApplicationStateSchema;\n/**\n *\n */\nclass ApplicationsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ApplicationsResponse` object.\n     * @param applications -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ applications, currentRound, nextToken, }) {\n        super();\n        this.applications = applications;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applications: 'applications',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['applications']))\n            throw new Error(`Response is missing required array field 'applications': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new ApplicationsResponse({\n            applications: data['applications'].map(Application.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ApplicationsResponse = ApplicationsResponse;\n/**\n * Specifies both the unique identifier and the parameters for an asset\n */\nclass Asset extends basemodel_1.default {\n    /**\n     * Creates a new `Asset` object.\n     * @param index - unique asset identifier\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     * @param createdAtRound - Round during which this asset was created.\n     * @param deleted - Whether or not this asset is currently deleted.\n     * @param destroyedAtRound - Round during which this asset was destroyed.\n     */\n    constructor({ index, params, createdAtRound, deleted, destroyedAtRound, }) {\n        super();\n        this.index = index;\n        this.params = params;\n        this.createdAtRound = createdAtRound;\n        this.deleted = deleted;\n        this.destroyedAtRound = destroyedAtRound;\n        this.attribute_map = {\n            index: 'index',\n            params: 'params',\n            createdAtRound: 'created-at-round',\n            deleted: 'deleted',\n            destroyedAtRound: 'destroyed-at-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['index'] === 'undefined')\n            throw new Error(`Response is missing required field 'index': ${data}`);\n        if (typeof data['params'] === 'undefined')\n            throw new Error(`Response is missing required field 'params': ${data}`);\n        return new Asset({\n            index: data['index'],\n            params: AssetParams.from_obj_for_encoding(data['params']),\n            createdAtRound: data['created-at-round'],\n            deleted: data['deleted'],\n            destroyedAtRound: data['destroyed-at-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Asset = Asset;\n/**\n *\n */\nclass AssetBalancesResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AssetBalancesResponse` object.\n     * @param balances -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ balances, currentRound, nextToken, }) {\n        super();\n        this.balances = balances;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            balances: 'balances',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['balances']))\n            throw new Error(`Response is missing required array field 'balances': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetBalancesResponse({\n            balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetBalancesResponse = AssetBalancesResponse;\n/**\n * Describes an asset held by an account.\n * Definition:\n * data/basics/userBalance.go : AssetHolding\n */\nclass AssetHolding extends basemodel_1.default {\n    /**\n     * Creates a new `AssetHolding` object.\n     * @param amount - (a) number of units held.\n     * @param assetId - Asset ID of the holding.\n     * @param isFrozen - (f) whether or not the holding is frozen.\n     * @param deleted - Whether or not the asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into this asset holding.\n     * @param optedOutAtRound - Round during which the account opted out of this asset holding.\n     */\n    constructor({ amount, assetId, isFrozen, deleted, optedInAtRound, optedOutAtRound, }) {\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = optedInAtRound;\n        this.optedOutAtRound = optedOutAtRound;\n        this.attribute_map = {\n            amount: 'amount',\n            assetId: 'asset-id',\n            isFrozen: 'is-frozen',\n            deleted: 'deleted',\n            optedInAtRound: 'opted-in-at-round',\n            optedOutAtRound: 'opted-out-at-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['asset-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data['is-frozen'] === 'undefined')\n            throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new AssetHolding({\n            amount: data['amount'],\n            assetId: data['asset-id'],\n            isFrozen: data['is-frozen'],\n            deleted: data['deleted'],\n            optedInAtRound: data['opted-in-at-round'],\n            optedOutAtRound: data['opted-out-at-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetHolding = AssetHolding;\n/**\n *\n */\nclass AssetHoldingsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AssetHoldingsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ assets, currentRound, nextToken, }) {\n        super();\n        this.assets = assets;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            assets: 'assets',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['assets']))\n            throw new Error(`Response is missing required array field 'assets': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetHoldingsResponse({\n            assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetHoldingsResponse = AssetHoldingsResponse;\n/**\n * AssetParams specifies the parameters for an asset.\n * (apar) when part of an AssetConfig transaction.\n * Definition:\n * data/transactions/asset.go : AssetParams\n */\nclass AssetParams extends basemodel_1.default {\n    /**\n     * Creates a new `AssetParams` object.\n     * @param creator - The address that created this asset. This is the address where the parameters\n     * for this asset can be found, and also the address where unwanted asset units can\n     * be sent in the worst case.\n     * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\n     * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\n     * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\n     * must be between 0 and 19 (inclusive).\n     * @param total - (t) The total number of units of this asset.\n     * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\n     * clawback is not permitted.\n     * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\n     * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\n     * is not permitted.\n     * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\n     * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\n     * metadata is up to the application.\n     * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\n     * asset name is composed of printable utf-8 characters.\n     * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\n     * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\n     * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\n     * when the name of a unit of this asset is composed of printable utf-8 characters.\n     * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\n     * @param url - (au) URL where more information about the asset can be retrieved. Included only\n     * when the URL is composed of printable utf-8 characters.\n     * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\n     */\n    constructor({ creator, decimals, total, clawback, defaultFrozen, freeze, manager, metadataHash, name, nameB64, reserve, unitName, unitNameB64, url, urlB64, }) {\n        super();\n        this.creator = creator;\n        this.decimals = decimals;\n        this.total = total;\n        this.clawback = clawback;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash =\n            typeof metadataHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(metadataHash, 'base64'))\n                : metadataHash;\n        this.name = name;\n        this.nameB64 =\n            typeof nameB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(nameB64, 'base64'))\n                : nameB64;\n        this.reserve = reserve;\n        this.unitName = unitName;\n        this.unitNameB64 =\n            typeof unitNameB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(unitNameB64, 'base64'))\n                : unitNameB64;\n        this.url = url;\n        this.urlB64 =\n            typeof urlB64 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(urlB64, 'base64'))\n                : urlB64;\n        this.attribute_map = {\n            creator: 'creator',\n            decimals: 'decimals',\n            total: 'total',\n            clawback: 'clawback',\n            defaultFrozen: 'default-frozen',\n            freeze: 'freeze',\n            manager: 'manager',\n            metadataHash: 'metadata-hash',\n            name: 'name',\n            nameB64: 'name-b64',\n            reserve: 'reserve',\n            unitName: 'unit-name',\n            unitNameB64: 'unit-name-b64',\n            url: 'url',\n            urlB64: 'url-b64',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['creator'] === 'undefined')\n            throw new Error(`Response is missing required field 'creator': ${data}`);\n        if (typeof data['decimals'] === 'undefined')\n            throw new Error(`Response is missing required field 'decimals': ${data}`);\n        if (typeof data['total'] === 'undefined')\n            throw new Error(`Response is missing required field 'total': ${data}`);\n        return new AssetParams({\n            creator: data['creator'],\n            decimals: data['decimals'],\n            total: data['total'],\n            clawback: data['clawback'],\n            defaultFrozen: data['default-frozen'],\n            freeze: data['freeze'],\n            manager: data['manager'],\n            metadataHash: data['metadata-hash'],\n            name: data['name'],\n            nameB64: data['name-b64'],\n            reserve: data['reserve'],\n            unitName: data['unit-name'],\n            unitNameB64: data['unit-name-b64'],\n            url: data['url'],\n            urlB64: data['url-b64'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetParams = AssetParams;\n/**\n *\n */\nclass AssetResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AssetResponse` object.\n     * @param asset - Specifies both the unique identifier and the parameters for an asset\n     * @param currentRound - Round at which the results were computed.\n     */\n    constructor({ asset, currentRound, }) {\n        super();\n        this.asset = asset;\n        this.currentRound = currentRound;\n        this.attribute_map = {\n            asset: 'asset',\n            currentRound: 'current-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['asset'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetResponse({\n            asset: Asset.from_obj_for_encoding(data['asset']),\n            currentRound: data['current-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetResponse = AssetResponse;\n/**\n *\n */\nclass AssetsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `AssetsResponse` object.\n     * @param assets -\n     * @param currentRound - Round at which the results were computed.\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ assets, currentRound, nextToken, }) {\n        super();\n        this.assets = assets;\n        this.currentRound = currentRound;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            assets: 'assets',\n            currentRound: 'current-round',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (!Array.isArray(data['assets']))\n            throw new Error(`Response is missing required array field 'assets': ${data}`);\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        return new AssetsResponse({\n            assets: data['assets'].map(Asset.from_obj_for_encoding),\n            currentRound: data['current-round'],\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.AssetsResponse = AssetsResponse;\n/**\n * Block information.\n * Definition:\n * data/bookkeeping/block.go : Block\n */\nclass Block extends basemodel_1.default {\n    /**\n     * Creates a new `Block` object.\n     * @param genesisHash - (gh) hash to which this block belongs.\n     * @param genesisId - (gen) ID to which this block belongs.\n     * @param previousBlockHash - (prev) Previous block hash.\n     * @param round - (rnd) Current round on which this block was appended to the chain.\n     * @param seed - (seed) Sortition seed.\n     * @param timestamp - (ts) Block creation timestamp in seconds since eposh\n     * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\n     * block. More specifically, it's the root of a merkle tree whose leaves are the\n     * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\n     * the TxnRoot does not authenticate the signatures on the transactions, only the\n     * transactions themselves. Two blocks with the same transactions but in a\n     * different order and with different signatures will have the same TxnRoot.\n     * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\n     * vector commitment instead of a merkle tree, and SHA256 hash function instead of\n     * the default SHA512_256. This commitment can be used on environments where only\n     * the SHA256 function exists.\n     * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\n     * @param rewards - Fields relating to rewards,\n     * @param stateProofTracking - Tracks the status of state proofs.\n     * @param transactions - (txns) list of transactions corresponding to a given round.\n     * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\n     * the time at which support for this feature was introduced.\n     * Specifically, TxnCounter is the number of the next transaction that will be\n     * committed after this block. It is 0 when no transactions have ever been\n     * committed (since TxnCounter started being supported).\n     * @param upgradeState - Fields relating to a protocol upgrade.\n     * @param upgradeVote - Fields relating to voting for a protocol upgrade.\n     */\n    constructor({ genesisHash, genesisId, previousBlockHash, round, seed, timestamp, transactionsRoot, transactionsRootSha256, participationUpdates, rewards, stateProofTracking, transactions, txnCounter, upgradeState, upgradeVote, }) {\n        super();\n        this.genesisHash =\n            typeof genesisHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(genesisHash, 'base64'))\n                : genesisHash;\n        this.genesisId = genesisId;\n        this.previousBlockHash =\n            typeof previousBlockHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(previousBlockHash, 'base64'))\n                : previousBlockHash;\n        this.round = round;\n        this.seed =\n            typeof seed === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(seed, 'base64'))\n                : seed;\n        this.timestamp = timestamp;\n        this.transactionsRoot =\n            typeof transactionsRoot === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(transactionsRoot, 'base64'))\n                : transactionsRoot;\n        this.transactionsRootSha256 =\n            typeof transactionsRootSha256 === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(transactionsRootSha256, 'base64'))\n                : transactionsRootSha256;\n        this.participationUpdates = participationUpdates;\n        this.rewards = rewards;\n        this.stateProofTracking = stateProofTracking;\n        this.transactions = transactions;\n        this.txnCounter = txnCounter;\n        this.upgradeState = upgradeState;\n        this.upgradeVote = upgradeVote;\n        this.attribute_map = {\n            genesisHash: 'genesis-hash',\n            genesisId: 'genesis-id',\n            previousBlockHash: 'previous-block-hash',\n            round: 'round',\n            seed: 'seed',\n            timestamp: 'timestamp',\n            transactionsRoot: 'transactions-root',\n            transactionsRootSha256: 'transactions-root-sha256',\n            participationUpdates: 'participation-updates',\n            rewards: 'rewards',\n            stateProofTracking: 'state-proof-tracking',\n            transactions: 'transactions',\n            txnCounter: 'txn-counter',\n            upgradeState: 'upgrade-state',\n            upgradeVote: 'upgrade-vote',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['genesis-hash'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n        if (typeof data['genesis-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n        if (typeof data['previous-block-hash'] === 'undefined')\n            throw new Error(`Response is missing required field 'previous-block-hash': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data['seed'] === 'undefined')\n            throw new Error(`Response is missing required field 'seed': ${data}`);\n        if (typeof data['timestamp'] === 'undefined')\n            throw new Error(`Response is missing required field 'timestamp': ${data}`);\n        if (typeof data['transactions-root'] === 'undefined')\n            throw new Error(`Response is missing required field 'transactions-root': ${data}`);\n        if (typeof data['transactions-root-sha256'] === 'undefined')\n            throw new Error(`Response is missing required field 'transactions-root-sha256': ${data}`);\n        return new Block({\n            genesisHash: data['genesis-hash'],\n            genesisId: data['genesis-id'],\n            previousBlockHash: data['previous-block-hash'],\n            round: data['round'],\n            seed: data['seed'],\n            timestamp: data['timestamp'],\n            transactionsRoot: data['transactions-root'],\n            transactionsRootSha256: data['transactions-root-sha256'],\n            participationUpdates: typeof data['participation-updates'] !== 'undefined'\n                ? ParticipationUpdates.from_obj_for_encoding(data['participation-updates'])\n                : undefined,\n            rewards: typeof data['rewards'] !== 'undefined'\n                ? BlockRewards.from_obj_for_encoding(data['rewards'])\n                : undefined,\n            stateProofTracking: typeof data['state-proof-tracking'] !== 'undefined'\n                ? data['state-proof-tracking'].map(StateProofTracking.from_obj_for_encoding)\n                : undefined,\n            transactions: typeof data['transactions'] !== 'undefined'\n                ? data['transactions'].map(Transaction.from_obj_for_encoding)\n                : undefined,\n            txnCounter: data['txn-counter'],\n            upgradeState: typeof data['upgrade-state'] !== 'undefined'\n                ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state'])\n                : undefined,\n            upgradeVote: typeof data['upgrade-vote'] !== 'undefined'\n                ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Block = Block;\n/**\n * Fields relating to rewards,\n */\nclass BlockRewards extends basemodel_1.default {\n    /**\n     * Creates a new `BlockRewards` object.\n     * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\n     * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\n     * MicroAlgos for every reward unit in the next round.\n     * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\n     * of MicroAlgos since genesis.\n     * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\n     * redistributes them as rewards.\n     * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\n     * the next round.\n     * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\n     * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\n     */\n    constructor({ feeSink, rewardsCalculationRound, rewardsLevel, rewardsPool, rewardsRate, rewardsResidue, }) {\n        super();\n        this.feeSink = feeSink;\n        this.rewardsCalculationRound = rewardsCalculationRound;\n        this.rewardsLevel = rewardsLevel;\n        this.rewardsPool = rewardsPool;\n        this.rewardsRate = rewardsRate;\n        this.rewardsResidue = rewardsResidue;\n        this.attribute_map = {\n            feeSink: 'fee-sink',\n            rewardsCalculationRound: 'rewards-calculation-round',\n            rewardsLevel: 'rewards-level',\n            rewardsPool: 'rewards-pool',\n            rewardsRate: 'rewards-rate',\n            rewardsResidue: 'rewards-residue',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['fee-sink'] === 'undefined')\n            throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n        if (typeof data['rewards-calculation-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards-calculation-round': ${data}`);\n        if (typeof data['rewards-level'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards-level': ${data}`);\n        if (typeof data['rewards-pool'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards-pool': ${data}`);\n        if (typeof data['rewards-rate'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards-rate': ${data}`);\n        if (typeof data['rewards-residue'] === 'undefined')\n            throw new Error(`Response is missing required field 'rewards-residue': ${data}`);\n        return new BlockRewards({\n            feeSink: data['fee-sink'],\n            rewardsCalculationRound: data['rewards-calculation-round'],\n            rewardsLevel: data['rewards-level'],\n            rewardsPool: data['rewards-pool'],\n            rewardsRate: data['rewards-rate'],\n            rewardsResidue: data['rewards-residue'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockRewards = BlockRewards;\n/**\n * Fields relating to a protocol upgrade.\n */\nclass BlockUpgradeState extends basemodel_1.default {\n    /**\n     * Creates a new `BlockUpgradeState` object.\n     * @param currentProtocol - (proto) The current protocol version.\n     * @param nextProtocol - (nextproto) The next proposed protocol version.\n     * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\n     * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\n     * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\n     * after this round).\n     */\n    constructor({ currentProtocol, nextProtocol, nextProtocolApprovals, nextProtocolSwitchOn, nextProtocolVoteBefore, }) {\n        super();\n        this.currentProtocol = currentProtocol;\n        this.nextProtocol = nextProtocol;\n        this.nextProtocolApprovals = nextProtocolApprovals;\n        this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n        this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n        this.attribute_map = {\n            currentProtocol: 'current-protocol',\n            nextProtocol: 'next-protocol',\n            nextProtocolApprovals: 'next-protocol-approvals',\n            nextProtocolSwitchOn: 'next-protocol-switch-on',\n            nextProtocolVoteBefore: 'next-protocol-vote-before',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['current-protocol'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-protocol': ${data}`);\n        return new BlockUpgradeState({\n            currentProtocol: data['current-protocol'],\n            nextProtocol: data['next-protocol'],\n            nextProtocolApprovals: data['next-protocol-approvals'],\n            nextProtocolSwitchOn: data['next-protocol-switch-on'],\n            nextProtocolVoteBefore: data['next-protocol-vote-before'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockUpgradeState = BlockUpgradeState;\n/**\n * Fields relating to voting for a protocol upgrade.\n */\nclass BlockUpgradeVote extends basemodel_1.default {\n    /**\n     * Creates a new `BlockUpgradeVote` object.\n     * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\n     * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\n     * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\n     */\n    constructor({ upgradeApprove, upgradeDelay, upgradePropose, }) {\n        super();\n        this.upgradeApprove = upgradeApprove;\n        this.upgradeDelay = upgradeDelay;\n        this.upgradePropose = upgradePropose;\n        this.attribute_map = {\n            upgradeApprove: 'upgrade-approve',\n            upgradeDelay: 'upgrade-delay',\n            upgradePropose: 'upgrade-propose',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new BlockUpgradeVote({\n            upgradeApprove: data['upgrade-approve'],\n            upgradeDelay: data['upgrade-delay'],\n            upgradePropose: data['upgrade-propose'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BlockUpgradeVote = BlockUpgradeVote;\n/**\n * Box name and its content.\n */\nclass Box extends basemodel_1.default {\n    /**\n     * Creates a new `Box` object.\n     * @param name - (name) box name, base64 encoded\n     * @param value - (value) box value, base64 encoded.\n     */\n    constructor({ name, value, }) {\n        super();\n        this.name =\n            typeof name === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(name, 'base64'))\n                : name;\n        this.value =\n            typeof value === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(value, 'base64'))\n                : value;\n        this.attribute_map = {\n            name: 'name',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['name'] === 'undefined')\n            throw new Error(`Response is missing required field 'name': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new Box({\n            name: data['name'],\n            value: data['value'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Box = Box;\n/**\n * Box descriptor describes an app box without a value.\n */\nclass BoxDescriptor extends basemodel_1.default {\n    /**\n     * Creates a new `BoxDescriptor` object.\n     * @param name - Base64 encoded box name\n     */\n    constructor({ name }) {\n        super();\n        this.name =\n            typeof name === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(name, 'base64'))\n                : name;\n        this.attribute_map = {\n            name: 'name',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['name'] === 'undefined')\n            throw new Error(`Response is missing required field 'name': ${data}`);\n        return new BoxDescriptor({\n            name: data['name'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BoxDescriptor = BoxDescriptor;\n/**\n * Box names of an application\n */\nclass BoxesResponse extends basemodel_1.default {\n    /**\n     * Creates a new `BoxesResponse` object.\n     * @param applicationId - (appidx) application index.\n     * @param boxes -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ applicationId, boxes, nextToken, }) {\n        super();\n        this.applicationId = applicationId;\n        this.boxes = boxes;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            applicationId: 'application-id',\n            boxes: 'boxes',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['application-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'application-id': ${data}`);\n        if (!Array.isArray(data['boxes']))\n            throw new Error(`Response is missing required array field 'boxes': ${data}`);\n        return new BoxesResponse({\n            applicationId: data['application-id'],\n            boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.BoxesResponse = BoxesResponse;\n/**\n * Response for errors\n */\nclass ErrorResponse extends basemodel_1.default {\n    /**\n     * Creates a new `ErrorResponse` object.\n     * @param message -\n     * @param data -\n     */\n    constructor({ message, data, }) {\n        super();\n        this.message = message;\n        this.data = data;\n        this.attribute_map = {\n            message: 'message',\n            data: 'data',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['message'] === 'undefined')\n            throw new Error(`Response is missing required field 'message': ${data}`);\n        return new ErrorResponse({\n            message: data['message'],\n            data: data['data'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ErrorResponse = ErrorResponse;\n/**\n * Represents a TEAL value delta.\n */\nclass EvalDelta extends basemodel_1.default {\n    /**\n     * Creates a new `EvalDelta` object.\n     * @param action - (at) delta action.\n     * @param bytes - (bs) bytes value.\n     * @param uint - (ui) uint value.\n     */\n    constructor({ action, bytes, uint, }) {\n        super();\n        this.action = action;\n        this.bytes = bytes;\n        this.uint = uint;\n        this.attribute_map = {\n            action: 'action',\n            bytes: 'bytes',\n            uint: 'uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['action'] === 'undefined')\n            throw new Error(`Response is missing required field 'action': ${data}`);\n        return new EvalDelta({\n            action: data['action'],\n            bytes: data['bytes'],\n            uint: data['uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.EvalDelta = EvalDelta;\n/**\n * Key-value pairs for StateDelta.\n */\nclass EvalDeltaKeyValue extends basemodel_1.default {\n    /**\n     * Creates a new `EvalDeltaKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value delta.\n     */\n    constructor({ key, value }) {\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new EvalDeltaKeyValue({\n            key: data['key'],\n            value: EvalDelta.from_obj_for_encoding(data['value']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.EvalDeltaKeyValue = EvalDeltaKeyValue;\nclass HashFactory extends basemodel_1.default {\n    /**\n     * Creates a new `HashFactory` object.\n     * @param hashType - (t)\n     */\n    constructor({ hashType }) {\n        super();\n        this.hashType = hashType;\n        this.attribute_map = {\n            hashType: 'hash-type',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new HashFactory({\n            hashType: data['hash-type'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.HashFactory = HashFactory;\n/**\n * A health check response.\n */\nclass HealthCheck extends basemodel_1.default {\n    /**\n     * Creates a new `HealthCheck` object.\n     * @param dbAvailable -\n     * @param isMigrating -\n     * @param message -\n     * @param round -\n     * @param version - Current version.\n     * @param data -\n     * @param errors -\n     */\n    constructor({ dbAvailable, isMigrating, message, round, version, data, errors, }) {\n        super();\n        this.dbAvailable = dbAvailable;\n        this.isMigrating = isMigrating;\n        this.message = message;\n        this.round = round;\n        this.version = version;\n        this.data = data;\n        this.errors = errors;\n        this.attribute_map = {\n            dbAvailable: 'db-available',\n            isMigrating: 'is-migrating',\n            message: 'message',\n            round: 'round',\n            version: 'version',\n            data: 'data',\n            errors: 'errors',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['db-available'] === 'undefined')\n            throw new Error(`Response is missing required field 'db-available': ${data}`);\n        if (typeof data['is-migrating'] === 'undefined')\n            throw new Error(`Response is missing required field 'is-migrating': ${data}`);\n        if (typeof data['message'] === 'undefined')\n            throw new Error(`Response is missing required field 'message': ${data}`);\n        if (typeof data['round'] === 'undefined')\n            throw new Error(`Response is missing required field 'round': ${data}`);\n        if (typeof data['version'] === 'undefined')\n            throw new Error(`Response is missing required field 'version': ${data}`);\n        return new HealthCheck({\n            dbAvailable: data['db-available'],\n            isMigrating: data['is-migrating'],\n            message: data['message'],\n            round: data['round'],\n            version: data['version'],\n            data: data['data'],\n            errors: data['errors'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.HealthCheck = HealthCheck;\nclass IndexerStateProofMessage extends basemodel_1.default {\n    /**\n     * Creates a new `IndexerStateProofMessage` object.\n     * @param blockHeadersCommitment - (b)\n     * @param firstAttestedRound - (f)\n     * @param latestAttestedRound - (l)\n     * @param lnProvenWeight - (P)\n     * @param votersCommitment - (v)\n     */\n    constructor({ blockHeadersCommitment, firstAttestedRound, latestAttestedRound, lnProvenWeight, votersCommitment, }) {\n        super();\n        this.blockHeadersCommitment =\n            typeof blockHeadersCommitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(blockHeadersCommitment, 'base64'))\n                : blockHeadersCommitment;\n        this.firstAttestedRound = firstAttestedRound;\n        this.latestAttestedRound = latestAttestedRound;\n        this.lnProvenWeight = lnProvenWeight;\n        this.votersCommitment =\n            typeof votersCommitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(votersCommitment, 'base64'))\n                : votersCommitment;\n        this.attribute_map = {\n            blockHeadersCommitment: 'block-headers-commitment',\n            firstAttestedRound: 'first-attested-round',\n            latestAttestedRound: 'latest-attested-round',\n            lnProvenWeight: 'ln-proven-weight',\n            votersCommitment: 'voters-commitment',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new IndexerStateProofMessage({\n            blockHeadersCommitment: data['block-headers-commitment'],\n            firstAttestedRound: data['first-attested-round'],\n            latestAttestedRound: data['latest-attested-round'],\n            lnProvenWeight: data['ln-proven-weight'],\n            votersCommitment: data['voters-commitment'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.IndexerStateProofMessage = IndexerStateProofMessage;\nclass MerkleArrayProof extends basemodel_1.default {\n    /**\n     * Creates a new `MerkleArrayProof` object.\n     * @param hashFactory -\n     * @param path - (pth)\n     * @param treeDepth - (td)\n     */\n    constructor({ hashFactory, path, treeDepth, }) {\n        super();\n        this.hashFactory = hashFactory;\n        this.path = path;\n        this.treeDepth = treeDepth;\n        this.attribute_map = {\n            hashFactory: 'hash-factory',\n            path: 'path',\n            treeDepth: 'tree-depth',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new MerkleArrayProof({\n            hashFactory: typeof data['hash-factory'] !== 'undefined'\n                ? HashFactory.from_obj_for_encoding(data['hash-factory'])\n                : undefined,\n            path: data['path'],\n            treeDepth: data['tree-depth'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.MerkleArrayProof = MerkleArrayProof;\n/**\n * A simplified version of AssetHolding\n */\nclass MiniAssetHolding extends basemodel_1.default {\n    /**\n     * Creates a new `MiniAssetHolding` object.\n     * @param address -\n     * @param amount -\n     * @param isFrozen -\n     * @param deleted - Whether or not this asset holding is currently deleted from its account.\n     * @param optedInAtRound - Round during which the account opted into the asset.\n     * @param optedOutAtRound - Round during which the account opted out of the asset.\n     */\n    constructor({ address, amount, isFrozen, deleted, optedInAtRound, optedOutAtRound, }) {\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.isFrozen = isFrozen;\n        this.deleted = deleted;\n        this.optedInAtRound = optedInAtRound;\n        this.optedOutAtRound = optedOutAtRound;\n        this.attribute_map = {\n            address: 'address',\n            amount: 'amount',\n            isFrozen: 'is-frozen',\n            deleted: 'deleted',\n            optedInAtRound: 'opted-in-at-round',\n            optedOutAtRound: 'opted-out-at-round',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['is-frozen'] === 'undefined')\n            throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n        return new MiniAssetHolding({\n            address: data['address'],\n            amount: data['amount'],\n            isFrozen: data['is-frozen'],\n            deleted: data['deleted'],\n            optedInAtRound: data['opted-in-at-round'],\n            optedOutAtRound: data['opted-out-at-round'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.MiniAssetHolding = MiniAssetHolding;\n/**\n * Participation account data that needs to be checked/acted on by the network.\n */\nclass ParticipationUpdates extends basemodel_1.default {\n    /**\n     * Creates a new `ParticipationUpdates` object.\n     * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\n     * since their participation key expired.\n     */\n    constructor({ expiredParticipationAccounts, }) {\n        super();\n        this.expiredParticipationAccounts = expiredParticipationAccounts;\n        this.attribute_map = {\n            expiredParticipationAccounts: 'expired-participation-accounts',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new ParticipationUpdates({\n            expiredParticipationAccounts: data['expired-participation-accounts'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.ParticipationUpdates = ParticipationUpdates;\n/**\n * (sp) represents a state proof.\n * Definition:\n * crypto/stateproof/structs.go : StateProof\n */\nclass StateProofFields extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofFields` object.\n     * @param partProofs - (P)\n     * @param positionsToReveal - (pr) Sequence of reveal positions.\n     * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\n     * msgp\n     * @param saltVersion - (v) Salt version of the merkle signature.\n     * @param sigCommit - (c)\n     * @param sigProofs - (S)\n     * @param signedWeight - (w)\n     */\n    constructor({ partProofs, positionsToReveal, reveals, saltVersion, sigCommit, sigProofs, signedWeight, }) {\n        super();\n        this.partProofs = partProofs;\n        this.positionsToReveal = positionsToReveal;\n        this.reveals = reveals;\n        this.saltVersion = saltVersion;\n        this.sigCommit =\n            typeof sigCommit === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(sigCommit, 'base64'))\n                : sigCommit;\n        this.sigProofs = sigProofs;\n        this.signedWeight = signedWeight;\n        this.attribute_map = {\n            partProofs: 'part-proofs',\n            positionsToReveal: 'positions-to-reveal',\n            reveals: 'reveals',\n            saltVersion: 'salt-version',\n            sigCommit: 'sig-commit',\n            sigProofs: 'sig-proofs',\n            signedWeight: 'signed-weight',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofFields({\n            partProofs: typeof data['part-proofs'] !== 'undefined'\n                ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs'])\n                : undefined,\n            positionsToReveal: data['positions-to-reveal'],\n            reveals: typeof data['reveals'] !== 'undefined'\n                ? data['reveals'].map(StateProofReveal.from_obj_for_encoding)\n                : undefined,\n            saltVersion: data['salt-version'],\n            sigCommit: data['sig-commit'],\n            sigProofs: typeof data['sig-proofs'] !== 'undefined'\n                ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs'])\n                : undefined,\n            signedWeight: data['signed-weight'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofFields = StateProofFields;\nclass StateProofParticipant extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofParticipant` object.\n     * @param verifier - (p)\n     * @param weight - (w)\n     */\n    constructor({ verifier, weight, }) {\n        super();\n        this.verifier = verifier;\n        this.weight = weight;\n        this.attribute_map = {\n            verifier: 'verifier',\n            weight: 'weight',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofParticipant({\n            verifier: typeof data['verifier'] !== 'undefined'\n                ? StateProofVerifier.from_obj_for_encoding(data['verifier'])\n                : undefined,\n            weight: data['weight'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofParticipant = StateProofParticipant;\nclass StateProofReveal extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofReveal` object.\n     * @param participant - (p)\n     * @param position - The position in the signature and participants arrays corresponding to this\n     * entry.\n     * @param sigSlot - (s)\n     */\n    constructor({ participant, position, sigSlot, }) {\n        super();\n        this.participant = participant;\n        this.position = position;\n        this.sigSlot = sigSlot;\n        this.attribute_map = {\n            participant: 'participant',\n            position: 'position',\n            sigSlot: 'sig-slot',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofReveal({\n            participant: typeof data['participant'] !== 'undefined'\n                ? StateProofParticipant.from_obj_for_encoding(data['participant'])\n                : undefined,\n            position: data['position'],\n            sigSlot: typeof data['sig-slot'] !== 'undefined'\n                ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofReveal = StateProofReveal;\nclass StateProofSigSlot extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofSigSlot` object.\n     * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\n     * @param signature -\n     */\n    constructor({ lowerSigWeight, signature, }) {\n        super();\n        this.lowerSigWeight = lowerSigWeight;\n        this.signature = signature;\n        this.attribute_map = {\n            lowerSigWeight: 'lower-sig-weight',\n            signature: 'signature',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofSigSlot({\n            lowerSigWeight: data['lower-sig-weight'],\n            signature: typeof data['signature'] !== 'undefined'\n                ? StateProofSignature.from_obj_for_encoding(data['signature'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofSigSlot = StateProofSigSlot;\nclass StateProofSignature extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofSignature` object.\n     * @param falconSignature -\n     * @param merkleArrayIndex -\n     * @param proof -\n     * @param verifyingKey - (vkey)\n     */\n    constructor({ falconSignature, merkleArrayIndex, proof, verifyingKey, }) {\n        super();\n        this.falconSignature =\n            typeof falconSignature === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(falconSignature, 'base64'))\n                : falconSignature;\n        this.merkleArrayIndex = merkleArrayIndex;\n        this.proof = proof;\n        this.verifyingKey =\n            typeof verifyingKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(verifyingKey, 'base64'))\n                : verifyingKey;\n        this.attribute_map = {\n            falconSignature: 'falcon-signature',\n            merkleArrayIndex: 'merkle-array-index',\n            proof: 'proof',\n            verifyingKey: 'verifying-key',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofSignature({\n            falconSignature: data['falcon-signature'],\n            merkleArrayIndex: data['merkle-array-index'],\n            proof: typeof data['proof'] !== 'undefined'\n                ? MerkleArrayProof.from_obj_for_encoding(data['proof'])\n                : undefined,\n            verifyingKey: data['verifying-key'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofSignature = StateProofSignature;\nclass StateProofTracking extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofTracking` object.\n     * @param nextRound - (n) Next round for which we will accept a state proof transaction.\n     * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\n     * StateProof round.\n     * @param type - State Proof Type. Note the raw object uses map with this as key.\n     * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\n     * the proof.\n     */\n    constructor({ nextRound, onlineTotalWeight, type, votersCommitment, }) {\n        super();\n        this.nextRound = nextRound;\n        this.onlineTotalWeight = onlineTotalWeight;\n        this.type = type;\n        this.votersCommitment =\n            typeof votersCommitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(votersCommitment, 'base64'))\n                : votersCommitment;\n        this.attribute_map = {\n            nextRound: 'next-round',\n            onlineTotalWeight: 'online-total-weight',\n            type: 'type',\n            votersCommitment: 'voters-commitment',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofTracking({\n            nextRound: data['next-round'],\n            onlineTotalWeight: data['online-total-weight'],\n            type: data['type'],\n            votersCommitment: data['voters-commitment'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofTracking = StateProofTracking;\nclass StateProofVerifier extends basemodel_1.default {\n    /**\n     * Creates a new `StateProofVerifier` object.\n     * @param commitment - (cmt) Represents the root of the vector commitment tree.\n     * @param keyLifetime - (lf) Key lifetime.\n     */\n    constructor({ commitment, keyLifetime, }) {\n        super();\n        this.commitment =\n            typeof commitment === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(commitment, 'base64'))\n                : commitment;\n        this.keyLifetime = keyLifetime;\n        this.attribute_map = {\n            commitment: 'commitment',\n            keyLifetime: 'key-lifetime',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new StateProofVerifier({\n            commitment: data['commitment'],\n            keyLifetime: data['key-lifetime'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateProofVerifier = StateProofVerifier;\n/**\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\n * determine how much storage may be used in a local-state or global-state for an\n * application. The more space used, the larger minimum balance must be maintained\n * in the account holding the data.\n */\nclass StateSchema extends basemodel_1.default {\n    /**\n     * Creates a new `StateSchema` object.\n     * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\n     * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\n     */\n    constructor({ numByteSlice, numUint, }) {\n        super();\n        this.numByteSlice = numByteSlice;\n        this.numUint = numUint;\n        this.attribute_map = {\n            numByteSlice: 'num-byte-slice',\n            numUint: 'num-uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['num-byte-slice'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n        if (typeof data['num-uint'] === 'undefined')\n            throw new Error(`Response is missing required field 'num-uint': ${data}`);\n        return new StateSchema({\n            numByteSlice: data['num-byte-slice'],\n            numUint: data['num-uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.StateSchema = StateSchema;\n/**\n * Represents a key-value pair in an application store.\n */\nclass TealKeyValue extends basemodel_1.default {\n    /**\n     * Creates a new `TealKeyValue` object.\n     * @param key -\n     * @param value - Represents a TEAL value.\n     */\n    constructor({ key, value }) {\n        super();\n        this.key = key;\n        this.value = value;\n        this.attribute_map = {\n            key: 'key',\n            value: 'value',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['key'] === 'undefined')\n            throw new Error(`Response is missing required field 'key': ${data}`);\n        if (typeof data['value'] === 'undefined')\n            throw new Error(`Response is missing required field 'value': ${data}`);\n        return new TealKeyValue({\n            key: data['key'],\n            value: TealValue.from_obj_for_encoding(data['value']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TealKeyValue = TealKeyValue;\n/**\n * Represents a TEAL value.\n */\nclass TealValue extends basemodel_1.default {\n    /**\n     * Creates a new `TealValue` object.\n     * @param bytes - (tb) bytes value.\n     * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\n     * @param uint - (ui) uint value.\n     */\n    constructor({ bytes, type, uint, }) {\n        super();\n        this.bytes = bytes;\n        this.type = type;\n        this.uint = uint;\n        this.attribute_map = {\n            bytes: 'bytes',\n            type: 'type',\n            uint: 'uint',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['bytes'] === 'undefined')\n            throw new Error(`Response is missing required field 'bytes': ${data}`);\n        if (typeof data['type'] === 'undefined')\n            throw new Error(`Response is missing required field 'type': ${data}`);\n        if (typeof data['uint'] === 'undefined')\n            throw new Error(`Response is missing required field 'uint': ${data}`);\n        return new TealValue({\n            bytes: data['bytes'],\n            type: data['type'],\n            uint: data['uint'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TealValue = TealValue;\n/**\n * Contains all fields common to all transactions and serves as an envelope to all\n * transactions type. Represents both regular and inner transactions.\n * Definition:\n * data/transactions/signedtxn.go : SignedTxn\n * data/transactions/transaction.go : Transaction\n */\nclass Transaction extends basemodel_1.default {\n    /**\n     * Creates a new `Transaction` object.\n     * @param fee - (fee) Transaction fee.\n     * @param firstValid - (fv) First valid round for this transaction.\n     * @param lastValid - (lv) Last valid round for this transaction.\n     * @param sender - (snd) Sender's address.\n     * @param applicationTransaction - Fields for application transactions.\n     * Definition:\n     * data/transactions/application.go : ApplicationCallTxnFields\n     * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\n     * A zero value for asset-id indicates asset creation.\n     * A zero value for the params indicates asset destruction.\n     * Definition:\n     * data/transactions/asset.go : AssetConfigTxnFields\n     * @param assetFreezeTransaction - Fields for an asset freeze transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetFreezeTxnFields\n     * @param assetTransferTransaction - Fields for an asset transfer transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetTransferTxnFields\n     * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\n     * not equal the sender. The backend can use this to ensure that auth addr is equal\n     * to the accounts auth addr.\n     * @param closeRewards - (rc) rewards applied to close-remainder-to account.\n     * @param closingAmount - (ca) closing amount for transaction.\n     * @param confirmedRound - Round when the transaction was confirmed.\n     * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\n     * transaction.\n     * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\n     * @param genesisHash - (gh) Hash of genesis block.\n     * @param genesisId - (gen) genesis block ID.\n     * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\n     * transaction.\n     * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\n     * that this transaction is part of a transaction group and the value is the\n     * sha512/256 hash of the transactions in that group.\n     * @param id - Transaction ID\n     * @param innerTxns - Inner transactions produced by application execution.\n     * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\n     * @param keyregTransaction - Fields for a keyreg transaction.\n     * Definition:\n     * data/transactions/keyreg.go : KeyregTxnFields\n     * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\n     * transactions. If this field is nonzero, then once the transaction is confirmed,\n     * it acquires the lease identified by the (Sender, Lease) pair of the transaction\n     * until the LastValid round passes. While this transaction possesses the lease, no\n     * other transaction specifying this lease can be confirmed.\n     * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\n     * transaction.\n     * @param logs - (lg) Logs for the application being executed by this transaction.\n     * @param note - (note) Free form data.\n     * @param paymentTransaction - Fields for a payment transaction.\n     * Definition:\n     * data/transactions/payment.go : PaymentTxnFields\n     * @param receiverRewards - (rr) rewards applied to receiver account.\n     * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\n     * updated with this value and future signatures must be signed with the key\n     * represented by this address.\n     * @param roundTime - Time when the block this transaction is in was confirmed.\n     * @param senderRewards - (rs) rewards applied to sender account.\n     * @param signature - Validation signature associated with some data. Only one of the signatures\n     * should be provided.\n     * @param stateProofTransaction - Fields for a state proof transaction.\n     * Definition:\n     * data/transactions/stateproof.go : StateProofTxnFields\n     * @param txType - (type) Indicates what type of transaction this is. Different types have\n     * different fields.\n     * Valid types, and where their fields are stored:\n     * * (pay) payment-transaction\n     * * (keyreg) keyreg-transaction\n     * * (acfg) asset-config-transaction\n     * * (axfer) asset-transfer-transaction\n     * * (afrz) asset-freeze-transaction\n     * * (appl) application-transaction\n     * * (stpf) state-proof-transaction\n     */\n    constructor({ fee, firstValid, lastValid, sender, applicationTransaction, assetConfigTransaction, assetFreezeTransaction, assetTransferTransaction, authAddr, closeRewards, closingAmount, confirmedRound, createdApplicationIndex, createdAssetIndex, genesisHash, genesisId, globalStateDelta, group, id, innerTxns, intraRoundOffset, keyregTransaction, lease, localStateDelta, logs, note, paymentTransaction, receiverRewards, rekeyTo, roundTime, senderRewards, signature, stateProofTransaction, txType, }) {\n        super();\n        this.fee = fee;\n        this.firstValid = firstValid;\n        this.lastValid = lastValid;\n        this.sender = sender;\n        this.applicationTransaction = applicationTransaction;\n        this.assetConfigTransaction = assetConfigTransaction;\n        this.assetFreezeTransaction = assetFreezeTransaction;\n        this.assetTransferTransaction = assetTransferTransaction;\n        this.authAddr = authAddr;\n        this.closeRewards = closeRewards;\n        this.closingAmount = closingAmount;\n        this.confirmedRound = confirmedRound;\n        this.createdApplicationIndex = createdApplicationIndex;\n        this.createdAssetIndex = createdAssetIndex;\n        this.genesisHash =\n            typeof genesisHash === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(genesisHash, 'base64'))\n                : genesisHash;\n        this.genesisId = genesisId;\n        this.globalStateDelta = globalStateDelta;\n        this.group =\n            typeof group === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(group, 'base64'))\n                : group;\n        this.id = id;\n        this.innerTxns = innerTxns;\n        this.intraRoundOffset = intraRoundOffset;\n        this.keyregTransaction = keyregTransaction;\n        this.lease =\n            typeof lease === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(lease, 'base64'))\n                : lease;\n        this.localStateDelta = localStateDelta;\n        this.logs = logs;\n        this.note =\n            typeof note === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(note, 'base64'))\n                : note;\n        this.paymentTransaction = paymentTransaction;\n        this.receiverRewards = receiverRewards;\n        this.rekeyTo = rekeyTo;\n        this.roundTime = roundTime;\n        this.senderRewards = senderRewards;\n        this.signature = signature;\n        this.stateProofTransaction = stateProofTransaction;\n        this.txType = txType;\n        this.attribute_map = {\n            fee: 'fee',\n            firstValid: 'first-valid',\n            lastValid: 'last-valid',\n            sender: 'sender',\n            applicationTransaction: 'application-transaction',\n            assetConfigTransaction: 'asset-config-transaction',\n            assetFreezeTransaction: 'asset-freeze-transaction',\n            assetTransferTransaction: 'asset-transfer-transaction',\n            authAddr: 'auth-addr',\n            closeRewards: 'close-rewards',\n            closingAmount: 'closing-amount',\n            confirmedRound: 'confirmed-round',\n            createdApplicationIndex: 'created-application-index',\n            createdAssetIndex: 'created-asset-index',\n            genesisHash: 'genesis-hash',\n            genesisId: 'genesis-id',\n            globalStateDelta: 'global-state-delta',\n            group: 'group',\n            id: 'id',\n            innerTxns: 'inner-txns',\n            intraRoundOffset: 'intra-round-offset',\n            keyregTransaction: 'keyreg-transaction',\n            lease: 'lease',\n            localStateDelta: 'local-state-delta',\n            logs: 'logs',\n            note: 'note',\n            paymentTransaction: 'payment-transaction',\n            receiverRewards: 'receiver-rewards',\n            rekeyTo: 'rekey-to',\n            roundTime: 'round-time',\n            senderRewards: 'sender-rewards',\n            signature: 'signature',\n            stateProofTransaction: 'state-proof-transaction',\n            txType: 'tx-type',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['fee'] === 'undefined')\n            throw new Error(`Response is missing required field 'fee': ${data}`);\n        if (typeof data['first-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'first-valid': ${data}`);\n        if (typeof data['last-valid'] === 'undefined')\n            throw new Error(`Response is missing required field 'last-valid': ${data}`);\n        if (typeof data['sender'] === 'undefined')\n            throw new Error(`Response is missing required field 'sender': ${data}`);\n        return new Transaction({\n            fee: data['fee'],\n            firstValid: data['first-valid'],\n            lastValid: data['last-valid'],\n            sender: data['sender'],\n            applicationTransaction: typeof data['application-transaction'] !== 'undefined'\n                ? TransactionApplication.from_obj_for_encoding(data['application-transaction'])\n                : undefined,\n            assetConfigTransaction: typeof data['asset-config-transaction'] !== 'undefined'\n                ? TransactionAssetConfig.from_obj_for_encoding(data['asset-config-transaction'])\n                : undefined,\n            assetFreezeTransaction: typeof data['asset-freeze-transaction'] !== 'undefined'\n                ? TransactionAssetFreeze.from_obj_for_encoding(data['asset-freeze-transaction'])\n                : undefined,\n            assetTransferTransaction: typeof data['asset-transfer-transaction'] !== 'undefined'\n                ? TransactionAssetTransfer.from_obj_for_encoding(data['asset-transfer-transaction'])\n                : undefined,\n            authAddr: data['auth-addr'],\n            closeRewards: data['close-rewards'],\n            closingAmount: data['closing-amount'],\n            confirmedRound: data['confirmed-round'],\n            createdApplicationIndex: data['created-application-index'],\n            createdAssetIndex: data['created-asset-index'],\n            genesisHash: data['genesis-hash'],\n            genesisId: data['genesis-id'],\n            globalStateDelta: typeof data['global-state-delta'] !== 'undefined'\n                ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n                : undefined,\n            group: data['group'],\n            id: data['id'],\n            innerTxns: typeof data['inner-txns'] !== 'undefined'\n                ? data['inner-txns'].map(Transaction.from_obj_for_encoding)\n                : undefined,\n            intraRoundOffset: data['intra-round-offset'],\n            keyregTransaction: typeof data['keyreg-transaction'] !== 'undefined'\n                ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction'])\n                : undefined,\n            lease: data['lease'],\n            localStateDelta: typeof data['local-state-delta'] !== 'undefined'\n                ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding)\n                : undefined,\n            logs: data['logs'],\n            note: data['note'],\n            paymentTransaction: typeof data['payment-transaction'] !== 'undefined'\n                ? TransactionPayment.from_obj_for_encoding(data['payment-transaction'])\n                : undefined,\n            receiverRewards: data['receiver-rewards'],\n            rekeyTo: data['rekey-to'],\n            roundTime: data['round-time'],\n            senderRewards: data['sender-rewards'],\n            signature: typeof data['signature'] !== 'undefined'\n                ? TransactionSignature.from_obj_for_encoding(data['signature'])\n                : undefined,\n            stateProofTransaction: typeof data['state-proof-transaction'] !== 'undefined'\n                ? TransactionStateProof.from_obj_for_encoding(data['state-proof-transaction'])\n                : undefined,\n            txType: data['tx-type'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.Transaction = Transaction;\n/**\n * Fields for application transactions.\n * Definition:\n * data/transactions/application.go : ApplicationCallTxnFields\n */\nclass TransactionApplication extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionApplication` object.\n     * @param applicationId - (apid) ID of the application being configured or empty if creating.\n     * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\n     * application's approval-program and clear-state-program.\n     * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\n     * approval-program and clear-state-program.\n     * @param approvalProgram - (apap) Logic executed for every application transaction, except when\n     * on-completion is set to \"clear\". It can read and write global state for the\n     * application, as well as account-specific local state. Approval programs may\n     * reject the transaction.\n     * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\n     * \"clear\". It can read and write global state for the application, as well as\n     * account-specific local state. Clear state programs cannot reject the\n     * transaction.\n     * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\n     * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\n     * states may be accessed by this application's approval-program and\n     * clear-state-program. The access is read-only.\n     * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\n     * ApprovalProgram and ClearStateProgram. The access is read-only.\n     * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\n     * determine how much storage may be used in a local-state or global-state for an\n     * application. The more space used, the larger minimum balance must be maintained\n     * in the account holding the data.\n     * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\n     * Valid types:\n     * * noop\n     * * optin\n     * * closeout\n     * * clear\n     * * update\n     * * update\n     * * delete\n     */\n    constructor({ applicationId, accounts, applicationArgs, approvalProgram, clearStateProgram, extraProgramPages, foreignApps, foreignAssets, globalStateSchema, localStateSchema, onCompletion, }) {\n        super();\n        this.applicationId = applicationId;\n        this.accounts = accounts;\n        this.applicationArgs = applicationArgs;\n        this.approvalProgram =\n            typeof approvalProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(approvalProgram, 'base64'))\n                : approvalProgram;\n        this.clearStateProgram =\n            typeof clearStateProgram === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(clearStateProgram, 'base64'))\n                : clearStateProgram;\n        this.extraProgramPages = extraProgramPages;\n        this.foreignApps = foreignApps;\n        this.foreignAssets = foreignAssets;\n        this.globalStateSchema = globalStateSchema;\n        this.localStateSchema = localStateSchema;\n        this.onCompletion = onCompletion;\n        this.attribute_map = {\n            applicationId: 'application-id',\n            accounts: 'accounts',\n            applicationArgs: 'application-args',\n            approvalProgram: 'approval-program',\n            clearStateProgram: 'clear-state-program',\n            extraProgramPages: 'extra-program-pages',\n            foreignApps: 'foreign-apps',\n            foreignAssets: 'foreign-assets',\n            globalStateSchema: 'global-state-schema',\n            localStateSchema: 'local-state-schema',\n            onCompletion: 'on-completion',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['application-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'application-id': ${data}`);\n        return new TransactionApplication({\n            applicationId: data['application-id'],\n            accounts: data['accounts'],\n            applicationArgs: data['application-args'],\n            approvalProgram: data['approval-program'],\n            clearStateProgram: data['clear-state-program'],\n            extraProgramPages: data['extra-program-pages'],\n            foreignApps: data['foreign-apps'],\n            foreignAssets: data['foreign-assets'],\n            globalStateSchema: typeof data['global-state-schema'] !== 'undefined'\n                ? StateSchema.from_obj_for_encoding(data['global-state-schema'])\n                : undefined,\n            localStateSchema: typeof data['local-state-schema'] !== 'undefined'\n                ? StateSchema.from_obj_for_encoding(data['local-state-schema'])\n                : undefined,\n            onCompletion: data['on-completion'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionApplication = TransactionApplication;\n/**\n * Fields for asset allocation, re-configuration, and destruction.\n * A zero value for asset-id indicates asset creation.\n * A zero value for the params indicates asset destruction.\n * Definition:\n * data/transactions/asset.go : AssetConfigTxnFields\n */\nclass TransactionAssetConfig extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionAssetConfig` object.\n     * @param assetId - (xaid) ID of the asset being configured or empty if creating.\n     * @param params - AssetParams specifies the parameters for an asset.\n     * (apar) when part of an AssetConfig transaction.\n     * Definition:\n     * data/transactions/asset.go : AssetParams\n     */\n    constructor({ assetId, params, }) {\n        super();\n        this.assetId = assetId;\n        this.params = params;\n        this.attribute_map = {\n            assetId: 'asset-id',\n            params: 'params',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionAssetConfig({\n            assetId: data['asset-id'],\n            params: typeof data['params'] !== 'undefined'\n                ? AssetParams.from_obj_for_encoding(data['params'])\n                : undefined,\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionAssetConfig = TransactionAssetConfig;\n/**\n * Fields for an asset freeze transaction.\n * Definition:\n * data/transactions/asset.go : AssetFreezeTxnFields\n */\nclass TransactionAssetFreeze extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionAssetFreeze` object.\n     * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\n     * @param assetId - (faid) ID of the asset being frozen or thawed.\n     * @param newFreezeStatus - (afrz) The new freeze status.\n     */\n    constructor({ address, assetId, newFreezeStatus, }) {\n        super();\n        this.address = address;\n        this.assetId = assetId;\n        this.newFreezeStatus = newFreezeStatus;\n        this.attribute_map = {\n            address: 'address',\n            assetId: 'asset-id',\n            newFreezeStatus: 'new-freeze-status',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['address'] === 'undefined')\n            throw new Error(`Response is missing required field 'address': ${data}`);\n        if (typeof data['asset-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data['new-freeze-status'] === 'undefined')\n            throw new Error(`Response is missing required field 'new-freeze-status': ${data}`);\n        return new TransactionAssetFreeze({\n            address: data['address'],\n            assetId: data['asset-id'],\n            newFreezeStatus: data['new-freeze-status'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionAssetFreeze = TransactionAssetFreeze;\n/**\n * Fields for an asset transfer transaction.\n * Definition:\n * data/transactions/asset.go : AssetTransferTxnFields\n */\nclass TransactionAssetTransfer extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionAssetTransfer` object.\n     * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\n     * that asset in the account's Assets map.\n     * @param assetId - (xaid) ID of the asset being transferred.\n     * @param receiver - (arcv) Recipient address of the transfer.\n     * @param closeAmount - Number of assets transfered to the close-to account as part of the transaction.\n     * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\n     * map, and specifies where the remaining asset holdings should be transferred.\n     * It's always valid to transfer remaining asset holdings to the creator account.\n     * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\n     * zero value, the real transaction sender must be the Clawback address from the\n     * AssetParams.\n     */\n    constructor({ amount, assetId, receiver, closeAmount, closeTo, sender, }) {\n        super();\n        this.amount = amount;\n        this.assetId = assetId;\n        this.receiver = receiver;\n        this.closeAmount = closeAmount;\n        this.closeTo = closeTo;\n        this.sender = sender;\n        this.attribute_map = {\n            amount: 'amount',\n            assetId: 'asset-id',\n            receiver: 'receiver',\n            closeAmount: 'close-amount',\n            closeTo: 'close-to',\n            sender: 'sender',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['asset-id'] === 'undefined')\n            throw new Error(`Response is missing required field 'asset-id': ${data}`);\n        if (typeof data['receiver'] === 'undefined')\n            throw new Error(`Response is missing required field 'receiver': ${data}`);\n        return new TransactionAssetTransfer({\n            amount: data['amount'],\n            assetId: data['asset-id'],\n            receiver: data['receiver'],\n            closeAmount: data['close-amount'],\n            closeTo: data['close-to'],\n            sender: data['sender'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionAssetTransfer = TransactionAssetTransfer;\n/**\n * Fields for a keyreg transaction.\n * Definition:\n * data/transactions/keyreg.go : KeyregTxnFields\n */\nclass TransactionKeyreg extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionKeyreg` object.\n     * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\n     * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\n     * committee selection.\n     * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\n     * @param voteFirstValid - (votefst) First round this participation key is valid.\n     * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\n     * @param voteLastValid - (votelst) Last round this participation key is valid.\n     * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\n     */\n    constructor({ nonParticipation, selectionParticipationKey, stateProofKey, voteFirstValid, voteKeyDilution, voteLastValid, voteParticipationKey, }) {\n        super();\n        this.nonParticipation = nonParticipation;\n        this.selectionParticipationKey =\n            typeof selectionParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(selectionParticipationKey, 'base64'))\n                : selectionParticipationKey;\n        this.stateProofKey =\n            typeof stateProofKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(stateProofKey, 'base64'))\n                : stateProofKey;\n        this.voteFirstValid = voteFirstValid;\n        this.voteKeyDilution = voteKeyDilution;\n        this.voteLastValid = voteLastValid;\n        this.voteParticipationKey =\n            typeof voteParticipationKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(voteParticipationKey, 'base64'))\n                : voteParticipationKey;\n        this.attribute_map = {\n            nonParticipation: 'non-participation',\n            selectionParticipationKey: 'selection-participation-key',\n            stateProofKey: 'state-proof-key',\n            voteFirstValid: 'vote-first-valid',\n            voteKeyDilution: 'vote-key-dilution',\n            voteLastValid: 'vote-last-valid',\n            voteParticipationKey: 'vote-participation-key',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionKeyreg({\n            nonParticipation: data['non-participation'],\n            selectionParticipationKey: data['selection-participation-key'],\n            stateProofKey: data['state-proof-key'],\n            voteFirstValid: data['vote-first-valid'],\n            voteKeyDilution: data['vote-key-dilution'],\n            voteLastValid: data['vote-last-valid'],\n            voteParticipationKey: data['vote-participation-key'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionKeyreg = TransactionKeyreg;\n/**\n * Fields for a payment transaction.\n * Definition:\n * data/transactions/payment.go : PaymentTxnFields\n */\nclass TransactionPayment extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionPayment` object.\n     * @param amount - (amt) number of MicroAlgos intended to be transferred.\n     * @param receiver - (rcv) receiver's address.\n     * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\n     * closing the sender account.\n     * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\n     * remaining funds be transferred to this address.\n     */\n    constructor({ amount, receiver, closeAmount, closeRemainderTo, }) {\n        super();\n        this.amount = amount;\n        this.receiver = receiver;\n        this.closeAmount = closeAmount;\n        this.closeRemainderTo = closeRemainderTo;\n        this.attribute_map = {\n            amount: 'amount',\n            receiver: 'receiver',\n            closeAmount: 'close-amount',\n            closeRemainderTo: 'close-remainder-to',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['amount'] === 'undefined')\n            throw new Error(`Response is missing required field 'amount': ${data}`);\n        if (typeof data['receiver'] === 'undefined')\n            throw new Error(`Response is missing required field 'receiver': ${data}`);\n        return new TransactionPayment({\n            amount: data['amount'],\n            receiver: data['receiver'],\n            closeAmount: data['close-amount'],\n            closeRemainderTo: data['close-remainder-to'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionPayment = TransactionPayment;\n/**\n *\n */\nclass TransactionResponse extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\n     * transactions type. Represents both regular and inner transactions.\n     * Definition:\n     * data/transactions/signedtxn.go : SignedTxn\n     * data/transactions/transaction.go : Transaction\n     */\n    constructor({ currentRound, transaction, }) {\n        super();\n        this.currentRound = currentRound;\n        this.transaction = transaction;\n        this.attribute_map = {\n            currentRound: 'current-round',\n            transaction: 'transaction',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        if (typeof data['transaction'] === 'undefined')\n            throw new Error(`Response is missing required field 'transaction': ${data}`);\n        return new TransactionResponse({\n            currentRound: data['current-round'],\n            transaction: Transaction.from_obj_for_encoding(data['transaction']),\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionResponse = TransactionResponse;\n/**\n * Validation signature associated with some data. Only one of the signatures\n * should be provided.\n */\nclass TransactionSignature extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionSignature` object.\n     * @param logicsig - (lsig) Programatic transaction signature.\n     * Definition:\n     * data/transactions/logicsig.go\n     * @param multisig - (msig) structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param sig - (sig) Standard ed25519 signature.\n     */\n    constructor({ logicsig, multisig, sig, }) {\n        super();\n        this.logicsig = logicsig;\n        this.multisig = multisig;\n        this.sig =\n            typeof sig === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(sig, 'base64'))\n                : sig;\n        this.attribute_map = {\n            logicsig: 'logicsig',\n            multisig: 'multisig',\n            sig: 'sig',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionSignature({\n            logicsig: typeof data['logicsig'] !== 'undefined'\n                ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig'])\n                : undefined,\n            multisig: typeof data['multisig'] !== 'undefined'\n                ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig'])\n                : undefined,\n            sig: data['sig'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionSignature = TransactionSignature;\n/**\n * (lsig) Programatic transaction signature.\n * Definition:\n * data/transactions/logicsig.go\n */\nclass TransactionSignatureLogicsig extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionSignatureLogicsig` object.\n     * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\n     * address of ana ccount. Base64 encoded TEAL program.\n     * @param args - (arg) Logic arguments, base64 encoded.\n     * @param multisigSignature - (msig) structure holding multiple subsignatures.\n     * Definition:\n     * crypto/multisig.go : MultisigSig\n     * @param signature - (sig) ed25519 signature.\n     */\n    constructor({ logic, args, multisigSignature, signature, }) {\n        super();\n        this.logic =\n            typeof logic === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(logic, 'base64'))\n                : logic;\n        this.args = args;\n        this.multisigSignature = multisigSignature;\n        this.signature =\n            typeof signature === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(signature, 'base64'))\n                : signature;\n        this.attribute_map = {\n            logic: 'logic',\n            args: 'args',\n            multisigSignature: 'multisig-signature',\n            signature: 'signature',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['logic'] === 'undefined')\n            throw new Error(`Response is missing required field 'logic': ${data}`);\n        return new TransactionSignatureLogicsig({\n            logic: data['logic'],\n            args: data['args'],\n            multisigSignature: typeof data['multisig-signature'] !== 'undefined'\n                ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig-signature'])\n                : undefined,\n            signature: data['signature'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionSignatureLogicsig = TransactionSignatureLogicsig;\n/**\n * (msig) structure holding multiple subsignatures.\n * Definition:\n * crypto/multisig.go : MultisigSig\n */\nclass TransactionSignatureMultisig extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionSignatureMultisig` object.\n     * @param subsignature - (subsig) holds pairs of public key and signatures.\n     * @param threshold - (thr)\n     * @param version - (v)\n     */\n    constructor({ subsignature, threshold, version, }) {\n        super();\n        this.subsignature = subsignature;\n        this.threshold = threshold;\n        this.version = version;\n        this.attribute_map = {\n            subsignature: 'subsignature',\n            threshold: 'threshold',\n            version: 'version',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionSignatureMultisig({\n            subsignature: typeof data['subsignature'] !== 'undefined'\n                ? data['subsignature'].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding)\n                : undefined,\n            threshold: data['threshold'],\n            version: data['version'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionSignatureMultisig = TransactionSignatureMultisig;\nclass TransactionSignatureMultisigSubsignature extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionSignatureMultisigSubsignature` object.\n     * @param publicKey - (pk)\n     * @param signature - (s)\n     */\n    constructor({ publicKey, signature, }) {\n        super();\n        this.publicKey =\n            typeof publicKey === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(publicKey, 'base64'))\n                : publicKey;\n        this.signature =\n            typeof signature === 'string'\n                ? new Uint8Array(buffer_1.Buffer.from(signature, 'base64'))\n                : signature;\n        this.attribute_map = {\n            publicKey: 'public-key',\n            signature: 'signature',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionSignatureMultisigSubsignature({\n            publicKey: data['public-key'],\n            signature: data['signature'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionSignatureMultisigSubsignature = TransactionSignatureMultisigSubsignature;\n/**\n * Fields for a state proof transaction.\n * Definition:\n * data/transactions/stateproof.go : StateProofTxnFields\n */\nclass TransactionStateProof extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionStateProof` object.\n     * @param message - (spmsg)\n     * @param stateProof - (sp) represents a state proof.\n     * Definition:\n     * crypto/stateproof/structs.go : StateProof\n     * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\n     * protocol/stateproof.go\n     */\n    constructor({ message, stateProof, stateProofType, }) {\n        super();\n        this.message = message;\n        this.stateProof = stateProof;\n        this.stateProofType = stateProofType;\n        this.attribute_map = {\n            message: 'message',\n            stateProof: 'state-proof',\n            stateProofType: 'state-proof-type',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        return new TransactionStateProof({\n            message: typeof data['message'] !== 'undefined'\n                ? IndexerStateProofMessage.from_obj_for_encoding(data['message'])\n                : undefined,\n            stateProof: typeof data['state-proof'] !== 'undefined'\n                ? StateProofFields.from_obj_for_encoding(data['state-proof'])\n                : undefined,\n            stateProofType: data['state-proof-type'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionStateProof = TransactionStateProof;\n/**\n *\n */\nclass TransactionsResponse extends basemodel_1.default {\n    /**\n     * Creates a new `TransactionsResponse` object.\n     * @param currentRound - Round at which the results were computed.\n     * @param transactions -\n     * @param nextToken - Used for pagination, when making another request provide this token with the\n     * next parameter.\n     */\n    constructor({ currentRound, transactions, nextToken, }) {\n        super();\n        this.currentRound = currentRound;\n        this.transactions = transactions;\n        this.nextToken = nextToken;\n        this.attribute_map = {\n            currentRound: 'current-round',\n            transactions: 'transactions',\n            nextToken: 'next-token',\n        };\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(data) {\n        /* eslint-disable dot-notation */\n        if (typeof data['current-round'] === 'undefined')\n            throw new Error(`Response is missing required field 'current-round': ${data}`);\n        if (!Array.isArray(data['transactions']))\n            throw new Error(`Response is missing required array field 'transactions': ${data}`);\n        return new TransactionsResponse({\n            currentRound: data['current-round'],\n            transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n            nextToken: data['next-token'],\n        });\n        /* eslint-enable dot-notation */\n    }\n}\nexports.TransactionsResponse = TransactionsResponse;\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js":
/*!***************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Returns information about indexed accounts.\n *\n * #### Example\n * ```typescript\n * const accounts = await indexerClient.searchAccounts().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\n * @category GET\n */\nclass SearchAccounts extends jsonrequest_1.default {\n    /**\n     * @returns `/v2/accounts`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/accounts';\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     * @remarks\n     * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\n     *\n     * @param greater\n     * @category query\n     */\n    currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query['currency-greater-than'] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n    currencyLessThan(lesser) {\n        this.query['currency-less-than'] = lesser;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     *\n     * @param id\n     * @category query\n     */\n    assetID(id) {\n        this.query['asset-id'] = id;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const accountsPage1 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const accountsPage2 = await indexerClient\n     *        .searchAccounts()\n     *        .limit(maxResults)\n     *        .nextToken(accountsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks For performance reasons, this parameter may be disabled on some configurations.\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include accounts that use this spending key.\n     *\n     * #### Example\n     * ```typescript\n     * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .authAddr(authAddr)\n     *        .do();\n     * ```\n     *\n     * @param authAddr\n     */\n    authAddr(authAddr) {\n        this.query['auth-addr'] = authAddr;\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */\n    applicationID(applicationID) {\n        this.query['application-id'] = applicationID;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetId = 163650;\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n    /**\n     * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\n     *\n     * #### Example 1\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"all\")\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const accounts = await indexerClient\n     *        .searchAccounts()\n     *        .exclude(\"assets,created-assets\")\n     *        .do();\n     * ```\n     * @remarks By default, it behaves as exclude=none\n     * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\n     * @category query\n     */\n    exclude(exclude) {\n        this.query.exclude = exclude;\n        return this;\n    }\n}\nexports[\"default\"] = SearchAccounts;\n//# sourceMappingURL=searchAccounts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchAccounts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst types_1 = __webpack_require__(/*! ./models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js\");\nclass SearchForApplicationBoxes extends jsonrequest_1.default {\n    /**\n     * Returns information about indexed application boxes.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     *\n     * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\n     * @oaram index - application index.\n     * @category GET\n     */\n    constructor(c, intDecoding, index) {\n        super(c, intDecoding);\n        this.index = index;\n        this.index = index;\n    }\n    /**\n     * @returns `/v2/applications/${index}/boxes`\n     */\n    path() {\n        return `/v2/applications/${this.index}/boxes`;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const appID = 1234;\n     *\n     * const responsePage1 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .do();\n     * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\n     *\n     * const responsePage2 = await indexerClient\n     *        .searchForApplicationBoxes(appID)\n     *        .limit(maxResults)\n     *        .nextToken(responsePage1.nextToken)\n     *        .do();\n     * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const boxesResponse = await indexerClient\n     *        .searchForApplicationBoxes(1234)\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return types_1.BoxesResponse.from_obj_for_encoding(body);\n    }\n}\nexports[\"default\"] = SearchForApplicationBoxes;\n//# sourceMappingURL=searchForApplicationBoxes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0NBQXNDLG1CQUFPLENBQUMsc0ZBQWdCO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLCtGQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsTUFBTTtBQUMxQztBQUNBO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9pbmRleGVyL3NlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMuanM/OGU4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi9tb2RlbHMvdHlwZXNcIik7XG5jbGFzcyBTZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGluZGV4ZWQgYXBwbGljYXRpb24gYm94ZXMuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgbWF4UmVzdWx0cyA9IDIwO1xuICAgICAqIGNvbnN0IGFwcElEID0gMTIzNDtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3BvbnNlUGFnZTEgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzKGFwcElEKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94TmFtZXNQYWdlMSA9IHJlc3BvbnNlUGFnZTEuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gICAgICpcbiAgICAgKiBjb25zdCByZXNwb25zZVBhZ2UyID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcyhhcHBJRClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5uZXh0VG9rZW4ocmVzcG9uc2VQYWdlMS5uZXh0VG9rZW4pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGNvbnN0IGJveE5hbWVzUGFnZTIgPSByZXNwb25zZVBhZ2UyLmJveGVzLm1hcChib3ggPT4gYm94Lm5hbWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhcHBsaWNhdGlvbnNhcHBsaWNhdGlvbi1pZGJveGVzKVxuICAgICAqIEBvYXJhbSBpbmRleCAtIGFwcGxpY2F0aW9uIGluZGV4LlxuICAgICAqIEBjYXRlZ29yeSBHRVRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjLCBpbnREZWNvZGluZywgaW5kZXgpIHtcbiAgICAgICAgc3VwZXIoYywgaW50RGVjb2RpbmcpO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hcHBsaWNhdGlvbnMvJHtpbmRleH0vYm94ZXNgXG4gICAgICovXG4gICAgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGAvdjIvYXBwbGljYXRpb25zLyR7dGhpcy5pbmRleH0vYm94ZXNgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBuZXh0IHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXBwSUQgPSAxMjM0O1xuICAgICAqXG4gICAgICogY29uc3QgcmVzcG9uc2VQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9uQm94ZXMoYXBwSUQpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBjb25zdCBib3hOYW1lc1BhZ2UxID0gcmVzcG9uc2VQYWdlMS5ib3hlcy5tYXAoYm94ID0+IGJveC5uYW1lKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IHJlc3BvbnNlUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzKGFwcElEKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihyZXNwb25zZVBhZ2UxLm5leHRUb2tlbilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogY29uc3QgYm94TmFtZXNQYWdlMiA9IHJlc3BvbnNlUGFnZTIuYm94ZXMubWFwKGJveCA9PiBib3gubmFtZSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG5leHRUb2tlbiAtIHByb3ZpZGVkIGJ5IHRoZSBwcmV2aW91cyByZXN1bHRzLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5leHRUb2tlbihuZXh0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBib3hlc1Jlc3BvbnNlID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcygxMjM0KVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHByZXBhcmUoYm9keSkge1xuICAgICAgICByZXR1cm4gdHlwZXNfMS5Cb3hlc1Jlc3BvbnNlLmZyb21fb2JqX2Zvcl9lbmNvZGluZyhib2R5KTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZWFyY2hGb3JBcHBsaWNhdGlvbkJveGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoRm9yQXBwbGljYXRpb25Cb3hlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplicationBoxes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Returns information about indexed applications.\n *\n * #### Example\n * ```typescript\n * const apps = await indexerClient.searchForApplications().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\n * @category GET\n */\nclass SearchForApplications extends jsonrequest_1.default {\n    /**\n     * @returns `/v2/applications`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/applications';\n    }\n    /**\n     * Application ID for filter, as int\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .index(appId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupApplications(appId).do()`\n     * @param index\n     * @category query\n     */\n    index(index) {\n        this.query['application-id'] = index;\n        return this;\n    }\n    /**\n     * Creator for filter, as string\n     *\n     * #### Example\n     * ```typescript\n     * const creator = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .creator(creator)\n     *        .do();\n     * ```\n     * @param creator\n     * @category query\n     */\n    creator(creator) {\n        this.query.creator = creator;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const appsPage1 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const appsPage2 = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .nextToken(appsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(next) {\n        this.query.next = next;\n        return this;\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const apps = await indexerClient\n     *        .searchForApplications()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n}\nexports[\"default\"] = SearchForApplications;\n//# sourceMappingURL=searchForApplications.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBcHBsaWNhdGlvbnMuanM/MTU1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGpzb25yZXF1ZXN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2pzb25yZXF1ZXN0XCIpKTtcbi8qKlxuICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBpbmRleGVkIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiAjIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50LnNlYXJjaEZvckFwcGxpY2F0aW9ucygpLmRvKCk7XG4gKiBgYGBcbiAqXG4gKiBbUmVzcG9uc2UgZGF0YSBzY2hlbWEgZGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYWxnb3JhbmQub3JnL2RvY3MvcmVzdC1hcGlzL2luZGV4ZXIvI2dldC12MmFwcGxpY2F0aW9ucylcbiAqIEBjYXRlZ29yeSBHRVRcbiAqL1xuY2xhc3MgU2VhcmNoRm9yQXBwbGljYXRpb25zIGV4dGVuZHMganNvbnJlcXVlc3RfMS5kZWZhdWx0IHtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBgL3YyL2FwcGxpY2F0aW9uc2BcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIHBhdGgoKSB7XG4gICAgICAgIHJldHVybiAnL3YyL2FwcGxpY2F0aW9ucyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpY2F0aW9uIElEIGZvciBmaWx0ZXIsIGFzIGludFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcElkID0gNjA1NTM0NjY7XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5pbmRleChhcHBJZClcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHJlbWFya3MgQWx0ZXJuYXRpdmVseSwgdXNlIGBpbmRleGVyQ2xpZW50Lmxvb2t1cEFwcGxpY2F0aW9ucyhhcHBJZCkuZG8oKWBcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBpbmRleChpbmRleCkge1xuICAgICAgICB0aGlzLnF1ZXJ5WydhcHBsaWNhdGlvbi1pZCddID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdG9yIGZvciBmaWx0ZXIsIGFzIHN0cmluZ1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGNyZWF0b3IgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhcHBzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXBwbGljYXRpb25zKClcbiAgICAgKiAgICAgICAgLmNyZWF0b3IoY3JlYXRvcilcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGNyZWF0b3JcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBjcmVhdG9yKGNyZWF0b3IpIHtcbiAgICAgICAgdGhpcy5xdWVyeS5jcmVhdG9yID0gY3JlYXRvcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFwcHNQYWdlMSA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFwcHNQYWdlMiA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAubmV4dFRva2VuKGFwcHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dCkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5leHQgPSBuZXh0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTGltaXQgcmVzdWx0cyBmb3IgcGFnaW5hdGlvbi5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBtYXhSZXN1bHRzID0gMjA7XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5saW1pdChtYXhSZXN1bHRzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaW1pdCAtIG1heGltdW0gbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMucXVlcnkubGltaXQgPSBsaW1pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGVzIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXBwcyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFwcGxpY2F0aW9ucygpXG4gICAgICogICAgICAgIC5pbmNsdWRlQWxsKGZhbHNlKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZSAyXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFwcHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBcHBsaWNhdGlvbnMoKVxuICAgICAqICAgICAgICAuaW5jbHVkZUFsbCgpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmYXVsdCB0cnVlIHdoZW4gY2FsbGVkIHdpdGhvdXQgcGFzc2luZyBhIHZhbHVlXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgaW5jbHVkZUFsbCh2YWx1ZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5xdWVyeVsnaW5jbHVkZS1hbGwnXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZWFyY2hGb3JBcHBsaWNhdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWFyY2hGb3JBcHBsaWNhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForApplications.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js":
/*!****************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\n/**\n * Returns information about indexed assets.\n *\n * #### Example\n * ```typescript\n * const assets = await indexerClient.searchForAssets().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\n * @category GET\n */\nclass SearchForAssets extends jsonrequest_1.default {\n    /**\n     * @returns `/v2/assets`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/assets';\n    }\n    /**\n     * Limit results for pagination.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit - maximum number of results to return.\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Filter just assets with the given creator address.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .creator(address)\n     *        .do();\n     * ```\n     *\n     * @param creator\n     * @category query\n     */\n    creator(creator) {\n        this.query.creator = creator;\n        return this;\n    }\n    /**\n     * Filter just assets with the given name.\n     *\n     * #### Example\n     * ```typescript\n     * const name = \"Test Token\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .name(name)\n     *        .do();\n     * ```\n     *\n     * @param name\n     * @category query\n     */\n    name(name) {\n        this.query.name = name;\n        return this;\n    }\n    /**\n     * Filter just assets with the given unit.\n     *\n     * #### Example\n     * ```typescript\n     * const unit = \"test\";\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .unit(unit)\n     *        .do();\n     * ```\n     *\n     * @param unit\n     * @category query\n     */\n    unit(unit) {\n        this.query.unit = unit;\n        return this;\n    }\n    /**\n     * Asset ID for filter, as int.\n     *\n     * #### Example\n     * ```typescript\n     * const assetId = 163650;\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .index(assetId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\n     * @param index\n     * @category query\n     */\n    index(index) {\n        this.query['asset-id'] = index;\n        return this;\n    }\n    /**\n     * Specify the next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 20;\n     *\n     * const assetsPage1 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const assetsPage2 = await indexerClient\n     *        .searchForAssets()\n     *        .limit(maxResults)\n     *        .nextToken(assetsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     * @param nextToken - provided by the previous results.\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\n     *\n     * #### Example 1\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll(false)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assets = await indexerClient\n     *        .searchForAssets()\n     *        .includeAll()\n     *        .do();\n     * ```\n     *\n     * @param value - default true when called without passing a value\n     * @category query\n     */\n    includeAll(value = true) {\n        this.query['include-all'] = value;\n        return this;\n    }\n}\nexports[\"default\"] = SearchForAssets;\n//# sourceMappingURL=searchForAssets.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvaW5kZXhlci9zZWFyY2hGb3JBc3NldHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQyxzRkFBZ0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9pbmRleGVyL3NlYXJjaEZvckFzc2V0cy5qcz8zOTMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QganNvbnJlcXVlc3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vanNvbnJlcXVlc3RcIikpO1xuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGluZGV4ZWQgYXNzZXRzLlxuICpcbiAqICMjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudC5zZWFyY2hGb3JBc3NldHMoKS5kbygpO1xuICogYGBgXG4gKlxuICogW1Jlc3BvbnNlIGRhdGEgc2NoZW1hIGRldGFpbHNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3Jlc3QtYXBpcy9pbmRleGVyLyNnZXQtdjJhc3NldHMpXG4gKiBAY2F0ZWdvcnkgR0VUXG4gKi9cbmNsYXNzIFNlYXJjaEZvckFzc2V0cyBleHRlbmRzIGpzb25yZXF1ZXN0XzEuZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgYC92Mi9hc3NldHNgXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwYXRoKCkge1xuICAgICAgICByZXR1cm4gJy92Mi9hc3NldHMnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaW1pdCByZXN1bHRzIGZvciBwYWdpbmF0aW9uLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKiBjb25zdCBhc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGltaXQgLSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLnF1ZXJ5LmxpbWl0ID0gbGltaXQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIganVzdCBhc3NldHMgd2l0aCB0aGUgZ2l2ZW4gY3JlYXRvciBhZGRyZXNzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcIlhCWUxTMkU2WUk2WFhMNUJXQ0FNT0E0R1RXSFhXRU5aTVg1VUhYTVJOV1dVUTdCWENZNVdDNVRFUEFcIjtcbiAgICAgKiBjb25zdCBhc3NldHMgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAuY3JlYXRvcihhZGRyZXNzKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjcmVhdG9yXG4gICAgICogQGNhdGVnb3J5IHF1ZXJ5XG4gICAgICovXG4gICAgY3JlYXRvcihjcmVhdG9yKSB7XG4gICAgICAgIHRoaXMucXVlcnkuY3JlYXRvciA9IGNyZWF0b3I7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIganVzdCBhc3NldHMgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBuYW1lID0gXCJUZXN0IFRva2VuXCI7XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLm5hbWUobmFtZSlcbiAgICAgKiAgICAgICAgLmRvKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIG5hbWUobmFtZSkge1xuICAgICAgICB0aGlzLnF1ZXJ5Lm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsdGVyIGp1c3QgYXNzZXRzIHdpdGggdGhlIGdpdmVuIHVuaXQuXG4gICAgICpcbiAgICAgKiAjIyMjIEV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdW5pdCA9IFwidGVzdFwiO1xuICAgICAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFzc2V0cygpXG4gICAgICogICAgICAgIC51bml0KHVuaXQpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHVuaXRcbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICB1bml0KHVuaXQpIHtcbiAgICAgICAgdGhpcy5xdWVyeS51bml0ID0gdW5pdDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFzc2V0IElEIGZvciBmaWx0ZXIsIGFzIGludC5cbiAgICAgKlxuICAgICAqICMjIyMgRXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zdCBhc3NldElkID0gMTYzNjUwO1xuICAgICAqIGNvbnN0IGFzc2V0cyA9IGF3YWl0IGluZGV4ZXJDbGllbnRcbiAgICAgKiAgICAgICAgLnNlYXJjaEZvckFzc2V0cygpXG4gICAgICogICAgICAgIC5pbmRleChhc3NldElkKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmVtYXJrcyBBbHRlcm5hdGl2ZWx5LCB1c2UgYGluZGV4ZXJDbGllbnQubG9va3VwQXNzZXRCeUlEKGFzc2V0SWQpLmRvKCk7YFxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluZGV4KGluZGV4KSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2Fzc2V0LWlkJ10gPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgdGhlIG5leHQgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IG1heFJlc3VsdHMgPSAyMDtcbiAgICAgKlxuICAgICAqIGNvbnN0IGFzc2V0c1BhZ2UxID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmxpbWl0KG1heFJlc3VsdHMpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqXG4gICAgICogY29uc3QgYXNzZXRzUGFnZTIgPSBhd2FpdCBpbmRleGVyQ2xpZW50XG4gICAgICogICAgICAgIC5zZWFyY2hGb3JBc3NldHMoKVxuICAgICAqICAgICAgICAubGltaXQobWF4UmVzdWx0cylcbiAgICAgKiAgICAgICAgLm5leHRUb2tlbihhc3NldHNQYWdlMVtcIm5leHQtdG9rZW5cIl0pXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBuZXh0VG9rZW4gLSBwcm92aWRlZCBieSB0aGUgcHJldmlvdXMgcmVzdWx0cy5cbiAgICAgKiBAY2F0ZWdvcnkgcXVlcnlcbiAgICAgKi9cbiAgICBuZXh0VG9rZW4obmV4dFRva2VuKSB7XG4gICAgICAgIHRoaXMucXVlcnkubmV4dCA9IG5leHRUb2tlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluY2x1ZGVzIGFsbCBpdGVtcyBpbmNsdWRpbmcgY2xvc2VkIGFjY291bnRzLCBkZWxldGVkIGFwcGxpY2F0aW9ucywgZGVzdHJveWVkIGFzc2V0cywgb3B0ZWQtb3V0IGFzc2V0IGhvbGRpbmdzLCBhbmQgY2xvc2VkLW91dCBhcHBsaWNhdGlvbiBsb2NhbHN0YXRlc1xuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDFcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoZmFsc2UpXG4gICAgICogICAgICAgIC5kbygpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMjIyBFeGFtcGxlIDJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYXNzZXRzID0gYXdhaXQgaW5kZXhlckNsaWVudFxuICAgICAqICAgICAgICAuc2VhcmNoRm9yQXNzZXRzKClcbiAgICAgKiAgICAgICAgLmluY2x1ZGVBbGwoKVxuICAgICAqICAgICAgICAuZG8oKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmF1bHQgdHJ1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IHBhc3NpbmcgYSB2YWx1ZVxuICAgICAqIEBjYXRlZ29yeSBxdWVyeVxuICAgICAqL1xuICAgIGluY2x1ZGVBbGwodmFsdWUgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMucXVlcnlbJ2luY2x1ZGUtYWxsJ10gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2VhcmNoRm9yQXNzZXRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VhcmNoRm9yQXNzZXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForAssets.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst jsonrequest_1 = __importDefault(__webpack_require__(/*! ../jsonrequest */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\"));\nconst lookupAccountTransactions_1 = __webpack_require__(/*! ./lookupAccountTransactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/lookupAccountTransactions.js\");\n/**\n * Returns information about indexed transactions.\n *\n * #### Example\n * ```typescript\n * const txns = await indexerClient.searchForTransactions().do();\n * ```\n *\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\n * @category GET\n */\nclass SearchForTransactions extends jsonrequest_1.default {\n    /**\n     * @returns `/v2/transactions`\n     */\n    // eslint-disable-next-line class-methods-use-this\n    path() {\n        return '/v2/transactions';\n    }\n    /**\n     * Specifies a prefix which must be contained in the note field.\n     *\n     * #### Example\n     * ```typescript\n     * const notePrefixBase64Encoded = \"Y3JlYXRl\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .notePrefix(notePrefixBase64Encoded)\n     *        .do();\n     * ```\n     *\n     * @param prefix - base64 string or uint8array\n     * @category query\n     */\n    notePrefix(prefix) {\n        this.query['note-prefix'] = (0, lookupAccountTransactions_1.base64StringFunnel)(prefix);\n        return this;\n    }\n    /**\n     * Type of transaction to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txType(\"keyreg\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\n     * @category query\n     */\n    txType(type) {\n        this.query['tx-type'] = type;\n        return this;\n    }\n    /**\n     * Type of signature to filter with.\n     * - sig: Standard\n     * - msig: MultiSig\n     * - lsig: LogicSig\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .sigType(\"sig\")\n     *        .do();\n     * ```\n     *\n     * @param type - one of `sig`, `msig`, `lsig`\n     * @category query\n     */\n    sigType(type) {\n        this.query['sig-type'] = type;\n        return this;\n    }\n    /**\n     * Lookup the specific transaction by ID.\n     *\n     * #### Example\n     * ```typescript\n     * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .txid(txId)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\n     * @param txid\n     * @category query\n     */\n    txid(txid) {\n        this.query.txid = txid;\n        return this;\n    }\n    /**\n     * Include results for the specified round.\n     *\n     * #### Example\n     * ```typescript\n     * const targetBlock = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .round(targetBlock)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupBlock(targetBlock).do()`\n     * @param round\n     * @category query\n     */\n    round(round) {\n        this.query.round = round;\n        return this;\n    }\n    /**\n     * Include results at or after the specified min-round.\n     *\n     * #### Example\n     * ```typescript\n     * const minRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .minRound(minRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    minRound(round) {\n        this.query['min-round'] = round;\n        return this;\n    }\n    /**\n     * Include results at or before the specified max-round.\n     *\n     * #### Example\n     * ```typescript\n     * const maxRound = 18309917;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .maxRound(maxRound)\n     *        .do();\n     * ```\n     *\n     * @param round\n     * @category query\n     */\n    maxRound(round) {\n        this.query['max-round'] = round;\n        return this;\n    }\n    /**\n     * Asset ID to filter with.\n     *\n     * #### Example\n     * ```typescript\n     * const assetID = 163650;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAssetTransactions(assetId).do()`\n     * @param id\n     * @category query\n     */\n    assetID(id) {\n        this.query['asset-id'] = id;\n        return this;\n    }\n    /**\n     * Maximum number of results to return.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     * ```\n     *\n     * @param limit\n     * @category query\n     */\n    limit(limit) {\n        this.query.limit = limit;\n        return this;\n    }\n    /**\n     * Include results before the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const beforeTime = \"2022-02-02T20:20:22.02Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .beforeTime(beforeTime)\n     *        .do();\n     * ```\n     *\n     * @param before - rfc3339 string\n     * @category query\n     */\n    beforeTime(before) {\n        this.query['before-time'] = before;\n        return this;\n    }\n    /**\n     * Include results after the given time.\n     *\n     * #### Example\n     * ```typescript\n     * const afterTime = \"2022-10-21T00:00:11.55Z\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .afterTime(afterTime)\n     *        .do();\n     * ```\n     *\n     * @param after - rfc3339 string\n     * @category query\n     */\n    afterTime(after) {\n        this.query['after-time'] = after;\n        return this;\n    }\n    /**\n     * Combined with address, defines what address to filter on, as string.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const role = \"freeze-target\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .addressRole(role)\n     *        .do();\n     * ```\n     *\n     * @param role - one of `sender`, `receiver`, `freeze-target`\n     * @category query\n     */\n    addressRole(role) {\n        this.query['address-role'] = role;\n        return this;\n    }\n    /**\n     * Only include transactions with this address in one of the transaction fields.\n     *\n     * #### Example\n     * ```typescript\n     * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .address(address)\n     *        .do();\n     * ```\n     * @remarks Alternatively, use `indexerClient.lookupAccountTransactions(address).do()`\n     * @param address\n     * @category query\n     */\n    address(address) {\n        this.query.address = address;\n        return this;\n    }\n    /**\n     * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .excludeCloseTo(true)\n     *        .do();\n     * ```\n     *\n     * @param exclude\n     * @category query\n     */\n    excludeCloseTo(exclude) {\n        this.query['exclude-close-to'] = exclude;\n        return this;\n    }\n    /**\n     * The next page of results.\n     *\n     * #### Example\n     * ```typescript\n     * const maxResults = 25;\n     *\n     * const txnsPage1 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .do();\n     *\n     * const txnsPage2 = await indexerClient\n     *        .searchForTransactions()\n     *        .limit(maxResults)\n     *        .nextToken(txnsPage1[\"next-token\"])\n     *        .do();\n     * ```\n     *\n     * @param nextToken - provided by the previous results\n     * @category query\n     */\n    nextToken(nextToken) {\n        this.query.next = nextToken;\n        return this;\n    }\n    /**\n     * Whether or not to include rekeying transactions.\n     *\n     * #### Example\n     * ```typescript\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .rekeyTo(false)\n     *        .do();\n     * ```\n     *\n     * @param rekeyTo\n     * @category query\n     */\n    rekeyTo(rekeyTo) {\n        this.query['rekey-to'] = rekeyTo;\n        return this;\n    }\n    /**\n     * Filter for this application.\n     *\n     * #### Example\n     * ```typescript\n     * const appId = 60553466;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .applicationID(appId)\n     *        .do();\n     * ```\n     *\n     * @param applicationID\n     * @category query\n     */\n    applicationID(applicationID) {\n        this.query['application-id'] = applicationID;\n        return this;\n    }\n    /**\n     * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const minBalance = 300000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyGreaterThan(minBalance - 1)\n     *        .do();\n     * ```\n     *\n     * @param greater\n     * @category query\n     */\n    currencyGreaterThan(greater) {\n        // We convert the following to a string for now to correctly include zero values in request parameters.\n        this.query['currency-greater-than'] = greater.toString();\n        return this;\n    }\n    /**\n     * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\n     *\n     * #### Example 1\n     * ```typescript\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * #### Example 2\n     * ```typescript\n     * const assetID = 163650;\n     * const maxBalance = 500000;\n     * const txns = await indexerClient\n     *        .searchForTransactions()\n     *        .assetID(assetID)\n     *        .currencyLessThan(maxBalance + 1)\n     *        .do();\n     * ```\n     *\n     * @param lesser\n     * @category query\n     */\n    currencyLessThan(lesser) {\n        this.query['currency-less-than'] = lesser;\n        return this;\n    }\n}\nexports[\"default\"] = SearchForTransactions;\n//# sourceMappingURL=searchForTransactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/searchForTransactions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js":
/*!****************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst intDecoding_1 = __importDefault(__webpack_require__(/*! ../../types/intDecoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js\"));\n/**\n * Base abstract class for JSON requests.\n *\n * Data: The type returned from the `do()` method\n *\n * Body: The structure of the response's body\n */\nclass JSONRequest {\n    /**\n     * @param client - HTTPClient object.\n     * @param intDecoding - The method to use\n     *   for decoding integers from this request's response. See the setIntDecoding method for more\n     *   details.\n     */\n    constructor(client, intDecoding) {\n        this.c = client;\n        this.query = {};\n        this.intDecoding = intDecoding || intDecoding_1.default.DEFAULT;\n    }\n    /**\n     * Prepare a JSON response before returning it.\n     *\n     * Use this method to change and restructure response\n     * data as needed after receiving it from the `do()` method.\n     * @param body - Response body received\n     * @category JSONRequest\n     */\n    // eslint-disable-next-line class-methods-use-this\n    prepare(body) {\n        return body;\n    }\n    /**\n     * Execute the request.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the parsed response data.\n     * @category JSONRequest\n     */\n    async do(headers = {}) {\n        const jsonOptions = {};\n        if (this.intDecoding !== 'default') {\n            jsonOptions.intDecoding = this.intDecoding;\n        }\n        const res = await this.c.get(this.path(), this.query, headers, jsonOptions);\n        return this.prepare(res.body);\n    }\n    /**\n     * Execute the request, but do not process the response data in any way.\n     * @param headers - Additional headers to send in the request. Optional.\n     * @returns A promise which resolves to the raw response data, exactly as returned by the server.\n     * @category JSONRequest\n     */\n    async doRaw(headers = {}) {\n        const res = await this.c.get(this.path(), this.query, headers, {}, false);\n        return res.body;\n    }\n    /**\n     * Configure how integers in this request's JSON response will be decoded.\n     *\n     * The options are:\n     * * \"default\": Integers will be decoded according to JSON.parse, meaning they will all be\n     *   Numbers and any values greater than Number.MAX_SAFE_INTEGER will lose precision.\n     * * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n     *   Number.MAX_SAFE_INTEGER an error will be thrown.\n     * * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n     *   Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     * * \"bigint\": All integers will be decoded as BigInts.\n     *\n     * @param method - The method to use when parsing the\n     *   response for this request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\".\n     * @category JSONRequest\n     */\n    setIntDecoding(method) {\n        if (method !== 'default' &&\n            method !== 'safe' &&\n            method !== 'mixed' &&\n            method !== 'bigint')\n            throw new Error(`Invalid method for int decoding: ${method}`);\n        this.intDecoding = method;\n        return this;\n    }\n}\nexports[\"default\"] = JSONRequest;\n//# sourceMappingURL=jsonrequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvanNvbnJlcXVlc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsbUJBQU8sQ0FBQywyRkFBeUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsT0FBTztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2NsaWVudC92Mi9qc29ucmVxdWVzdC5qcz9jMjQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaW50RGVjb2RpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdHlwZXMvaW50RGVjb2RpbmdcIikpO1xuLyoqXG4gKiBCYXNlIGFic3RyYWN0IGNsYXNzIGZvciBKU09OIHJlcXVlc3RzLlxuICpcbiAqIERhdGE6IFRoZSB0eXBlIHJldHVybmVkIGZyb20gdGhlIGBkbygpYCBtZXRob2RcbiAqXG4gKiBCb2R5OiBUaGUgc3RydWN0dXJlIG9mIHRoZSByZXNwb25zZSdzIGJvZHlcbiAqL1xuY2xhc3MgSlNPTlJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjbGllbnQgLSBIVFRQQ2xpZW50IG9iamVjdC5cbiAgICAgKiBAcGFyYW0gaW50RGVjb2RpbmcgLSBUaGUgbWV0aG9kIHRvIHVzZVxuICAgICAqICAgZm9yIGRlY29kaW5nIGludGVnZXJzIGZyb20gdGhpcyByZXF1ZXN0J3MgcmVzcG9uc2UuIFNlZSB0aGUgc2V0SW50RGVjb2RpbmcgbWV0aG9kIGZvciBtb3JlXG4gICAgICogICBkZXRhaWxzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgaW50RGVjb2RpbmcpIHtcbiAgICAgICAgdGhpcy5jID0gY2xpZW50O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICAgIHRoaXMuaW50RGVjb2RpbmcgPSBpbnREZWNvZGluZyB8fCBpbnREZWNvZGluZ18xLmRlZmF1bHQuREVGQVVMVDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSBhIEpTT04gcmVzcG9uc2UgYmVmb3JlIHJldHVybmluZyBpdC5cbiAgICAgKlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byBjaGFuZ2UgYW5kIHJlc3RydWN0dXJlIHJlc3BvbnNlXG4gICAgICogZGF0YSBhcyBuZWVkZWQgYWZ0ZXIgcmVjZWl2aW5nIGl0IGZyb20gdGhlIGBkbygpYCBtZXRob2QuXG4gICAgICogQHBhcmFtIGJvZHkgLSBSZXNwb25zZSBib2R5IHJlY2VpdmVkXG4gICAgICogQGNhdGVnb3J5IEpTT05SZXF1ZXN0XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBwcmVwYXJlKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIGhlYWRlcnMgLSBBZGRpdGlvbmFsIGhlYWRlcnMgdG8gc2VuZCBpbiB0aGUgcmVxdWVzdC4gT3B0aW9uYWwuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIHRoZSBwYXJzZWQgcmVzcG9uc2UgZGF0YS5cbiAgICAgKiBAY2F0ZWdvcnkgSlNPTlJlcXVlc3RcbiAgICAgKi9cbiAgICBhc3luYyBkbyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QganNvbk9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKHRoaXMuaW50RGVjb2RpbmcgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAganNvbk9wdGlvbnMuaW50RGVjb2RpbmcgPSB0aGlzLmludERlY29kaW5nO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYy5nZXQodGhpcy5wYXRoKCksIHRoaXMucXVlcnksIGhlYWRlcnMsIGpzb25PcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlcGFyZShyZXMuYm9keSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIHJlcXVlc3QsIGJ1dCBkbyBub3QgcHJvY2VzcyB0aGUgcmVzcG9uc2UgZGF0YSBpbiBhbnkgd2F5LlxuICAgICAqIEBwYXJhbSBoZWFkZXJzIC0gQWRkaXRpb25hbCBoZWFkZXJzIHRvIHNlbmQgaW4gdGhlIHJlcXVlc3QuIE9wdGlvbmFsLlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgcmF3IHJlc3BvbnNlIGRhdGEsIGV4YWN0bHkgYXMgcmV0dXJuZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgKiBAY2F0ZWdvcnkgSlNPTlJlcXVlc3RcbiAgICAgKi9cbiAgICBhc3luYyBkb1JhdyhoZWFkZXJzID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jLmdldCh0aGlzLnBhdGgoKSwgdGhpcy5xdWVyeSwgaGVhZGVycywge30sIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmUgaG93IGludGVnZXJzIGluIHRoaXMgcmVxdWVzdCdzIEpTT04gcmVzcG9uc2Ugd2lsbCBiZSBkZWNvZGVkLlxuICAgICAqXG4gICAgICogVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqICogXCJkZWZhdWx0XCI6IEludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhY2NvcmRpbmcgdG8gSlNPTi5wYXJzZSwgbWVhbmluZyB0aGV5IHdpbGwgYWxsIGJlXG4gICAgICogICBOdW1iZXJzIGFuZCBhbnkgdmFsdWVzIGdyZWF0ZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB3aWxsIGxvc2UgcHJlY2lzaW9uLlxuICAgICAqICogXCJzYWZlXCI6IEFsbCBpbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYXMgTnVtYmVycywgYnV0IGlmIGFueSB2YWx1ZXMgYXJlIGdyZWF0ZXIgdGhhblxuICAgICAqICAgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICogKiBcIm1peGVkXCI6IEludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBOdW1iZXJzIGlmIHRoZXkgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICAgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgZGVjb2RlZCBhcyBCaWdJbnRzLlxuICAgICAqICogXCJiaWdpbnRcIjogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBCaWdJbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1ldGhvZCAtIFRoZSBtZXRob2QgdG8gdXNlIHdoZW4gcGFyc2luZyB0aGVcbiAgICAgKiAgIHJlc3BvbnNlIGZvciB0aGlzIHJlcXVlc3QuIE11c3QgYmUgb25lIG9mIFwiZGVmYXVsdFwiLCBcInNhZmVcIiwgXCJtaXhlZFwiLCBvciBcImJpZ2ludFwiLlxuICAgICAqIEBjYXRlZ29yeSBKU09OUmVxdWVzdFxuICAgICAqL1xuICAgIHNldEludERlY29kaW5nKG1ldGhvZCkge1xuICAgICAgICBpZiAobWV0aG9kICE9PSAnZGVmYXVsdCcgJiZcbiAgICAgICAgICAgIG1ldGhvZCAhPT0gJ3NhZmUnICYmXG4gICAgICAgICAgICBtZXRob2QgIT09ICdtaXhlZCcgJiZcbiAgICAgICAgICAgIG1ldGhvZCAhPT0gJ2JpZ2ludCcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbWV0aG9kIGZvciBpbnQgZGVjb2Rpbmc6ICR7bWV0aG9kfWApO1xuICAgICAgICB0aGlzLmludERlY29kaW5nID0gbWV0aG9kO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBKU09OUmVxdWVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb25yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/jsonrequest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst client_1 = __importDefault(__webpack_require__(/*! ../client */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/client.js\"));\nconst intDecoding_1 = __importDefault(__webpack_require__(/*! ../../types/intDecoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js\"));\n/**\n * Convert a token string to a token header\n * @param token - The token string\n * @param headerIdentifier - An identifier for the token header\n */\nfunction convertTokenStringToTokenHeader(token = '', headerIdentifier) {\n    const tokenHeader = {};\n    if (token === '') {\n        return tokenHeader;\n    }\n    tokenHeader[headerIdentifier] = token;\n    return tokenHeader;\n}\nfunction isBaseHTTPClient(tbc) {\n    return typeof tbc.get === 'function';\n}\n/**\n * Abstract service client to encapsulate shared AlgodClient and IndexerClient logic\n */\nclass ServiceClient {\n    constructor(tokenHeaderIdentifier, tokenHeaderOrStrOrBaseClient, baseServer, port, defaultHeaders = {}) {\n        if (isBaseHTTPClient(tokenHeaderOrStrOrBaseClient)) {\n            // we are using a base client\n            this.c = new client_1.default(tokenHeaderOrStrOrBaseClient);\n        }\n        else {\n            // Accept token header as string or object\n            // - workaround to allow backwards compatibility for multiple headers\n            let tokenHeader;\n            if (typeof tokenHeaderOrStrOrBaseClient === 'string') {\n                tokenHeader = convertTokenStringToTokenHeader(tokenHeaderOrStrOrBaseClient, tokenHeaderIdentifier);\n            }\n            else {\n                tokenHeader = tokenHeaderOrStrOrBaseClient;\n            }\n            this.c = new client_1.default(tokenHeader, baseServer, port, defaultHeaders);\n        }\n        this.intDecoding = intDecoding_1.default.DEFAULT;\n    }\n    /**\n     * Set the default int decoding method for all JSON requests this client creates.\n     * @param method - \\{\"default\" | \"safe\" | \"mixed\" | \"bigint\"\\} method The method to use when parsing the\n     *   response for request. Must be one of \"default\", \"safe\", \"mixed\", or \"bigint\". See\n     *   JSONRequest.setIntDecoding for more details about what each method does.\n     */\n    setIntEncoding(method) {\n        this.intDecoding = method;\n    }\n    /**\n     * Get the default int decoding method for all JSON requests this client creates.\n     */\n    getIntEncoding() {\n        return this.intDecoding;\n    }\n}\nexports[\"default\"] = ServiceClient;\n//# sourceMappingURL=serviceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jbGllbnQvdjIvc2VydmljZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxtQkFBTyxDQUFDLHlFQUFXO0FBQ3BELHNDQUFzQyxtQkFBTyxDQUFDLDJGQUF5QjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEdBQTBHO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMENBQTBDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY2xpZW50L3YyL3NlcnZpY2VDbGllbnQuanM/YmM3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNsaWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9jbGllbnRcIikpO1xuY29uc3QgaW50RGVjb2RpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdHlwZXMvaW50RGVjb2RpbmdcIikpO1xuLyoqXG4gKiBDb252ZXJ0IGEgdG9rZW4gc3RyaW5nIHRvIGEgdG9rZW4gaGVhZGVyXG4gKiBAcGFyYW0gdG9rZW4gLSBUaGUgdG9rZW4gc3RyaW5nXG4gKiBAcGFyYW0gaGVhZGVySWRlbnRpZmllciAtIEFuIGlkZW50aWZpZXIgZm9yIHRoZSB0b2tlbiBoZWFkZXJcbiAqL1xuZnVuY3Rpb24gY29udmVydFRva2VuU3RyaW5nVG9Ub2tlbkhlYWRlcih0b2tlbiA9ICcnLCBoZWFkZXJJZGVudGlmaWVyKSB7XG4gICAgY29uc3QgdG9rZW5IZWFkZXIgPSB7fTtcbiAgICBpZiAodG9rZW4gPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0b2tlbkhlYWRlcjtcbiAgICB9XG4gICAgdG9rZW5IZWFkZXJbaGVhZGVySWRlbnRpZmllcl0gPSB0b2tlbjtcbiAgICByZXR1cm4gdG9rZW5IZWFkZXI7XG59XG5mdW5jdGlvbiBpc0Jhc2VIVFRQQ2xpZW50KHRiYykge1xuICAgIHJldHVybiB0eXBlb2YgdGJjLmdldCA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQWJzdHJhY3Qgc2VydmljZSBjbGllbnQgdG8gZW5jYXBzdWxhdGUgc2hhcmVkIEFsZ29kQ2xpZW50IGFuZCBJbmRleGVyQ2xpZW50IGxvZ2ljXG4gKi9cbmNsYXNzIFNlcnZpY2VDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKHRva2VuSGVhZGVySWRlbnRpZmllciwgdG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCwgYmFzZVNlcnZlciwgcG9ydCwgZGVmYXVsdEhlYWRlcnMgPSB7fSkge1xuICAgICAgICBpZiAoaXNCYXNlSFRUUENsaWVudCh0b2tlbkhlYWRlck9yU3RyT3JCYXNlQ2xpZW50KSkge1xuICAgICAgICAgICAgLy8gd2UgYXJlIHVzaW5nIGEgYmFzZSBjbGllbnRcbiAgICAgICAgICAgIHRoaXMuYyA9IG5ldyBjbGllbnRfMS5kZWZhdWx0KHRva2VuSGVhZGVyT3JTdHJPckJhc2VDbGllbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQWNjZXB0IHRva2VuIGhlYWRlciBhcyBzdHJpbmcgb3Igb2JqZWN0XG4gICAgICAgICAgICAvLyAtIHdvcmthcm91bmQgdG8gYWxsb3cgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIG11bHRpcGxlIGhlYWRlcnNcbiAgICAgICAgICAgIGxldCB0b2tlbkhlYWRlcjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0b2tlbkhlYWRlciA9IGNvbnZlcnRUb2tlblN0cmluZ1RvVG9rZW5IZWFkZXIodG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudCwgdG9rZW5IZWFkZXJJZGVudGlmaWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRva2VuSGVhZGVyID0gdG9rZW5IZWFkZXJPclN0ck9yQmFzZUNsaWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYyA9IG5ldyBjbGllbnRfMS5kZWZhdWx0KHRva2VuSGVhZGVyLCBiYXNlU2VydmVyLCBwb3J0LCBkZWZhdWx0SGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnREZWNvZGluZyA9IGludERlY29kaW5nXzEuZGVmYXVsdC5ERUZBVUxUO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRlZmF1bHQgaW50IGRlY29kaW5nIG1ldGhvZCBmb3IgYWxsIEpTT04gcmVxdWVzdHMgdGhpcyBjbGllbnQgY3JlYXRlcy5cbiAgICAgKiBAcGFyYW0gbWV0aG9kIC0gXFx7XCJkZWZhdWx0XCIgfCBcInNhZmVcIiB8IFwibWl4ZWRcIiB8IFwiYmlnaW50XCJcXH0gbWV0aG9kIFRoZSBtZXRob2QgdG8gdXNlIHdoZW4gcGFyc2luZyB0aGVcbiAgICAgKiAgIHJlc3BvbnNlIGZvciByZXF1ZXN0LiBNdXN0IGJlIG9uZSBvZiBcImRlZmF1bHRcIiwgXCJzYWZlXCIsIFwibWl4ZWRcIiwgb3IgXCJiaWdpbnRcIi4gU2VlXG4gICAgICogICBKU09OUmVxdWVzdC5zZXRJbnREZWNvZGluZyBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoYXQgZWFjaCBtZXRob2QgZG9lcy5cbiAgICAgKi9cbiAgICBzZXRJbnRFbmNvZGluZyhtZXRob2QpIHtcbiAgICAgICAgdGhpcy5pbnREZWNvZGluZyA9IG1ldGhvZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZWZhdWx0IGludCBkZWNvZGluZyBtZXRob2QgZm9yIGFsbCBKU09OIHJlcXVlc3RzIHRoaXMgY2xpZW50IGNyZWF0ZXMuXG4gICAgICovXG4gICAgZ2V0SW50RW5jb2RpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludERlY29kaW5nO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlcnZpY2VDbGllbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/client/v2/serviceClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/composer.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/composer.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AtomicTransactionComposer = exports.AtomicTransactionComposerStatus = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst abi_1 = __webpack_require__(/*! ./abi */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/index.js\");\nconst types_1 = __webpack_require__(/*! ./client/v2/algod/models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\nconst group_1 = __webpack_require__(/*! ./group */ \"(ssr)/./node_modules/algosdk/dist/cjs/group.js\");\nconst makeTxn_1 = __webpack_require__(/*! ./makeTxn */ \"(ssr)/./node_modules/algosdk/dist/cjs/makeTxn.js\");\nconst signer_1 = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/algosdk/dist/cjs/signer.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\");\nconst base_1 = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\");\nconst wait_1 = __webpack_require__(/*! ./wait */ \"(ssr)/./node_modules/algosdk/dist/cjs/wait.js\");\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\n// First 4 bytes of SHA-512/256 hash of \"return\"\nconst RETURN_PREFIX = buffer_1.Buffer.from([21, 31, 124, 117]);\n// The maximum number of arguments for an application call transaction\nconst MAX_APP_ARGS = 16;\nvar AtomicTransactionComposerStatus;\n(function (AtomicTransactionComposerStatus) {\n    /** The atomic group is still under construction. */\n    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILDING\"] = 0] = \"BUILDING\";\n    /** The atomic group has been finalized, but not yet signed. */\n    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"BUILT\"] = 1] = \"BUILT\";\n    /** The atomic group has been finalized and signed, but not yet submitted to the network. */\n    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SIGNED\"] = 2] = \"SIGNED\";\n    /** The atomic group has been finalized, signed, and submitted to the network. */\n    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"SUBMITTED\"] = 3] = \"SUBMITTED\";\n    /** The atomic group has been finalized, signed, submitted, and successfully committed to a block. */\n    AtomicTransactionComposerStatus[AtomicTransactionComposerStatus[\"COMMITTED\"] = 4] = \"COMMITTED\";\n})(AtomicTransactionComposerStatus = exports.AtomicTransactionComposerStatus || (exports.AtomicTransactionComposerStatus = {}));\n/**\n * Add a value to an application call's foreign array. The addition will be as compact as possible,\n * and this function will return an index that can be used to reference `valueToAdd` in `array`.\n *\n * @param valueToAdd - The value to add to the array. If this value is already present in the array,\n *   it will not be added again. Instead, the existing index will be returned.\n * @param array - The existing foreign array. This input may be modified to append `valueToAdd`.\n * @param zeroValue - If provided, this value indicated two things: the 0 value is special for this\n *   array, so all indexes into `array` must start at 1; additionally, if `valueToAdd` equals\n *   `zeroValue`, then `valueToAdd` will not be added to the array, and instead the 0 indexes will\n *   be returned.\n * @returns An index that can be used to reference `valueToAdd` in `array`.\n */\nfunction populateForeignArray(valueToAdd, array, zeroValue) {\n    if (zeroValue != null && valueToAdd === zeroValue) {\n        return 0;\n    }\n    const offset = zeroValue == null ? 0 : 1;\n    for (let i = 0; i < array.length; i++) {\n        if (valueToAdd === array[i]) {\n            return i + offset;\n        }\n    }\n    array.push(valueToAdd);\n    return array.length - 1 + offset;\n}\n/** A class used to construct and execute atomic transaction groups */\nclass AtomicTransactionComposer {\n    constructor() {\n        this.status = AtomicTransactionComposerStatus.BUILDING;\n        this.transactions = [];\n        this.methodCalls = new Map();\n        this.signedTxns = [];\n        this.txIDs = [];\n    }\n    /**\n     * Get the status of this composer's transaction group.\n     */\n    getStatus() {\n        return this.status;\n    }\n    /**\n     * Get the number of transactions currently in this atomic group.\n     */\n    count() {\n        return this.transactions.length;\n    }\n    /**\n     * Create a new composer with the same underlying transactions. The new composer's status will be\n     * BUILDING, so additional transactions may be added to it.\n     */\n    clone() {\n        const theClone = new AtomicTransactionComposer();\n        theClone.transactions = this.transactions.map(({ txn, signer }) => ({\n            // not quite a deep copy, but good enough for our purposes (modifying txn.group in buildGroup)\n            txn: transaction_1.Transaction.from_obj_for_encoding({\n                ...txn.get_obj_for_encoding(),\n                // erase the group ID\n                grp: undefined,\n            }),\n            signer,\n        }));\n        theClone.methodCalls = new Map(this.methodCalls);\n        return theClone;\n    }\n    /**\n     * Add a transaction to this atomic group.\n     *\n     * An error will be thrown if the transaction has a nonzero group ID, the composer's status is\n     * not BUILDING, or if adding this transaction causes the current group to exceed MAX_GROUP_SIZE.\n     */\n    addTransaction(txnAndSigner) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error('Cannot add transactions when composer status is not BUILDING');\n        }\n        if (this.transactions.length === AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding an additional transaction exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (txnAndSigner.txn.group && txnAndSigner.txn.group.some((v) => v !== 0)) {\n            throw new Error('Cannot add a transaction with nonzero group ID');\n        }\n        this.transactions.push(txnAndSigner);\n    }\n    /**\n     * Add a smart contract method call to this atomic group.\n     *\n     * An error will be thrown if the composer's status is not BUILDING, if adding this transaction\n     * causes the current group to exceed MAX_GROUP_SIZE, or if the provided arguments are invalid\n     * for the given method.\n     */\n    addMethodCall({ appID, method, methodArgs, sender, suggestedParams, onComplete, approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages, appAccounts, appForeignApps, appForeignAssets, boxes, note, lease, rekeyTo, signer, }) {\n        if (this.status !== AtomicTransactionComposerStatus.BUILDING) {\n            throw new Error('Cannot add transactions when composer status is not BUILDING');\n        }\n        if (this.transactions.length + method.txnCount() >\n            AtomicTransactionComposer.MAX_GROUP_SIZE) {\n            throw new Error(`Adding additional transactions exceeds the maximum atomic group size of ${AtomicTransactionComposer.MAX_GROUP_SIZE}`);\n        }\n        if (appID === 0) {\n            if (approvalProgram == null ||\n                clearProgram == null ||\n                numGlobalInts == null ||\n                numGlobalByteSlices == null ||\n                numLocalInts == null ||\n                numLocalByteSlices == null) {\n                throw new Error('One of the following required parameters for application creation is missing: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices');\n            }\n        }\n        else if (onComplete === base_1.OnApplicationComplete.UpdateApplicationOC) {\n            if (approvalProgram == null || clearProgram == null) {\n                throw new Error('One of the following required parameters for OnApplicationComplete.UpdateApplicationOC is missing: approvalProgram, clearProgram');\n            }\n            if (numGlobalInts != null ||\n                numGlobalByteSlices != null ||\n                numLocalInts != null ||\n                numLocalByteSlices != null ||\n                extraPages != null) {\n                throw new Error('One of the following application creation parameters were set on a non-creation call: numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages');\n            }\n        }\n        else if (approvalProgram != null ||\n            clearProgram != null ||\n            numGlobalInts != null ||\n            numGlobalByteSlices != null ||\n            numLocalInts != null ||\n            numLocalByteSlices != null ||\n            extraPages != null) {\n            throw new Error('One of the following application creation parameters were set on a non-creation call: approvalProgram, clearProgram, numGlobalInts, numGlobalByteSlices, numLocalInts, numLocalByteSlices, extraPages');\n        }\n        if (methodArgs == null) {\n            // eslint-disable-next-line no-param-reassign\n            methodArgs = [];\n        }\n        if (methodArgs.length !== method.args.length) {\n            throw new Error(`Incorrect number of method arguments. Expected ${method.args.length}, got ${methodArgs.length}`);\n        }\n        let basicArgTypes = [];\n        let basicArgValues = [];\n        const txnArgs = [];\n        const refArgTypes = [];\n        const refArgValues = [];\n        const refArgIndexToBasicArgIndex = new Map();\n        // TODO: Box encoding for ABI\n        const boxReferences = !boxes ? [] : boxes;\n        for (let i = 0; i < methodArgs.length; i++) {\n            let argType = method.args[i].type;\n            const argValue = methodArgs[i];\n            if ((0, abi_1.abiTypeIsTransaction)(argType)) {\n                if (!(0, signer_1.isTransactionWithSigner)(argValue) ||\n                    !(0, abi_1.abiCheckTransactionType)(argType, argValue.txn)) {\n                    throw new Error(`Expected ${argType} TransactionWithSigner for argument at index ${i}`);\n                }\n                if (argValue.txn.group && argValue.txn.group.some((v) => v !== 0)) {\n                    throw new Error('Cannot add a transaction with nonzero group ID');\n                }\n                txnArgs.push(argValue);\n                continue;\n            }\n            if ((0, signer_1.isTransactionWithSigner)(argValue)) {\n                throw new Error(`Expected non-transaction value for argument at index ${i}`);\n            }\n            if ((0, abi_1.abiTypeIsReference)(argType)) {\n                refArgIndexToBasicArgIndex.set(refArgTypes.length, basicArgTypes.length);\n                refArgTypes.push(argType);\n                refArgValues.push(argValue);\n                // treat the reference as a uint8 for encoding purposes\n                argType = new abi_1.ABIUintType(8);\n            }\n            if (typeof argType === 'string') {\n                throw new Error(`Unknown ABI type: ${argType}`);\n            }\n            basicArgTypes.push(argType);\n            basicArgValues.push(argValue);\n        }\n        const resolvedRefIndexes = [];\n        const foreignAccounts = appAccounts == null ? [] : appAccounts.slice();\n        const foreignApps = appForeignApps == null ? [] : appForeignApps.slice();\n        const foreignAssets = appForeignAssets == null ? [] : appForeignAssets.slice();\n        for (let i = 0; i < refArgTypes.length; i++) {\n            const refType = refArgTypes[i];\n            const refValue = refArgValues[i];\n            let resolved = 0;\n            switch (refType) {\n                case abi_1.ABIReferenceType.account: {\n                    const addressType = new abi_1.ABIAddressType();\n                    const address = addressType.decode(addressType.encode(refValue));\n                    resolved = populateForeignArray(address, foreignAccounts, sender);\n                    break;\n                }\n                case abi_1.ABIReferenceType.application: {\n                    const uint64Type = new abi_1.ABIUintType(64);\n                    const refAppID = uint64Type.decode(uint64Type.encode(refValue));\n                    if (refAppID > Number.MAX_SAFE_INTEGER) {\n                        throw new Error(`Expected safe integer for application value, got ${refAppID}`);\n                    }\n                    resolved = populateForeignArray(Number(refAppID), foreignApps, appID);\n                    break;\n                }\n                case abi_1.ABIReferenceType.asset: {\n                    const uint64Type = new abi_1.ABIUintType(64);\n                    const refAssetID = uint64Type.decode(uint64Type.encode(refValue));\n                    if (refAssetID > Number.MAX_SAFE_INTEGER) {\n                        throw new Error(`Expected safe integer for asset value, got ${refAssetID}`);\n                    }\n                    resolved = populateForeignArray(Number(refAssetID), foreignAssets);\n                    break;\n                }\n                default:\n                    throw new Error(`Unknown reference type: ${refType}`);\n            }\n            resolvedRefIndexes.push(resolved);\n        }\n        for (let i = 0; i < resolvedRefIndexes.length; i++) {\n            const basicArgIndex = refArgIndexToBasicArgIndex.get(i);\n            basicArgValues[basicArgIndex] = resolvedRefIndexes[i];\n        }\n        if (basicArgTypes.length > MAX_APP_ARGS - 1) {\n            const lastArgTupleTypes = basicArgTypes.slice(MAX_APP_ARGS - 2);\n            const lastArgTupleValues = basicArgValues.slice(MAX_APP_ARGS - 2);\n            basicArgTypes = basicArgTypes.slice(0, MAX_APP_ARGS - 2);\n            basicArgValues = basicArgValues.slice(0, MAX_APP_ARGS - 2);\n            basicArgTypes.push(new abi_1.ABITupleType(lastArgTupleTypes));\n            basicArgValues.push(lastArgTupleValues);\n        }\n        const appArgsEncoded = [method.getSelector()];\n        for (let i = 0; i < basicArgTypes.length; i++) {\n            appArgsEncoded.push(basicArgTypes[i].encode(basicArgValues[i]));\n        }\n        const appCall = {\n            txn: (0, makeTxn_1.makeApplicationCallTxnFromObject)({\n                from: sender,\n                appIndex: appID,\n                appArgs: appArgsEncoded,\n                accounts: foreignAccounts,\n                foreignApps,\n                foreignAssets,\n                boxes: boxReferences,\n                onComplete: onComplete == null ? base_1.OnApplicationComplete.NoOpOC : onComplete,\n                approvalProgram,\n                clearProgram,\n                numGlobalInts,\n                numGlobalByteSlices,\n                numLocalInts,\n                numLocalByteSlices,\n                extraPages,\n                lease,\n                note,\n                rekeyTo,\n                suggestedParams,\n            }),\n            signer,\n        };\n        this.transactions.push(...txnArgs, appCall);\n        this.methodCalls.set(this.transactions.length - 1, method);\n    }\n    /**\n     * Finalize the transaction group and returned the finalized transactions.\n     *\n     * The composer's status will be at least BUILT after executing this method.\n     */\n    buildGroup() {\n        if (this.status === AtomicTransactionComposerStatus.BUILDING) {\n            if (this.transactions.length === 0) {\n                throw new Error('Cannot build a group with 0 transactions');\n            }\n            if (this.transactions.length > 1) {\n                (0, group_1.assignGroupID)(this.transactions.map((txnWithSigner) => txnWithSigner.txn));\n            }\n            this.status = AtomicTransactionComposerStatus.BUILT;\n        }\n        return this.transactions;\n    }\n    /**\n     * Obtain signatures for each transaction in this group. If signatures have already been obtained,\n     * this method will return cached versions of the signatures.\n     *\n     * The composer's status will be at least SIGNED after executing this method.\n     *\n     * An error will be thrown if signing any of the transactions fails.\n     *\n     * @returns A promise that resolves to an array of signed transactions.\n     */\n    async gatherSignatures() {\n        if (this.status >= AtomicTransactionComposerStatus.SIGNED) {\n            return this.signedTxns;\n        }\n        // retrieve built transactions and verify status is BUILT\n        const txnsWithSigners = this.buildGroup();\n        const txnGroup = txnsWithSigners.map((txnWithSigner) => txnWithSigner.txn);\n        const indexesPerSigner = new Map();\n        for (let i = 0; i < txnsWithSigners.length; i++) {\n            const { signer } = txnsWithSigners[i];\n            if (!indexesPerSigner.has(signer)) {\n                indexesPerSigner.set(signer, []);\n            }\n            indexesPerSigner.get(signer).push(i);\n        }\n        const orderedSigners = Array.from(indexesPerSigner);\n        const batchedSigs = await Promise.all(orderedSigners.map(([signer, indexes]) => signer(txnGroup, indexes)));\n        const signedTxns = txnsWithSigners.map(() => null);\n        for (let signerIndex = 0; signerIndex < orderedSigners.length; signerIndex++) {\n            const indexes = orderedSigners[signerIndex][1];\n            const sigs = batchedSigs[signerIndex];\n            for (let i = 0; i < indexes.length; i++) {\n                signedTxns[indexes[i]] = sigs[i];\n            }\n        }\n        if (!signedTxns.every((sig) => sig != null)) {\n            throw new Error(`Missing signatures. Got ${signedTxns}`);\n        }\n        const txIDs = signedTxns.map((stxn, index) => {\n            try {\n                return (0, transaction_1.decodeSignedTransaction)(stxn).txn.txID();\n            }\n            catch (err) {\n                throw new Error(`Cannot decode signed transaction at index ${index}. ${err}`);\n            }\n        });\n        this.signedTxns = signedTxns;\n        this.txIDs = txIDs;\n        this.status = AtomicTransactionComposerStatus.SIGNED;\n        return signedTxns;\n    }\n    /**\n     * Send the transaction group to the network, but don't wait for it to be committed to a block. An\n     * error will be thrown if submission fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method. If submission is\n     * successful, this composer's status will update to SUBMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     *\n     * @returns A promise that, upon success, resolves to a list of TxIDs of the submitted transactions.\n     */\n    async submit(client) {\n        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {\n            throw new Error('Transaction group cannot be resubmitted');\n        }\n        const stxns = await this.gatherSignatures();\n        await client.sendRawTransaction(stxns).do();\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        return this.txIDs;\n    }\n    /**\n     * Simulates the transaction group in the network.\n     *\n     * The composer will try to sign any transactions in the group, then simulate\n     * the results.\n     * Simulating the group will not change the composer's status.\n     *\n     * @param client - An Algodv2 client\n     * @param request - SimulateRequest with options in simulation.\n     *   If provided, the request's transaction group will be overrwritten by the composer's group,\n     *   only simulation related options will be used.\n     *\n     * @returns A promise that, upon success, resolves to an object containing an\n     *   array of results containing one element for each method call transaction\n     *   in this group (ABIResult[]) and the SimulateResponse object.\n     */\n    async simulate(client, request) {\n        if (this.status > AtomicTransactionComposerStatus.SUBMITTED) {\n            throw new Error('Simulated Transaction group has already been submitted to the network');\n        }\n        const stxns = await this.gatherSignatures();\n        const txnObjects = stxns.map((stxn) => encoding.decode(stxn));\n        const currentRequest = request == null ? new types_1.SimulateRequest({ txnGroups: [] }) : request;\n        currentRequest.txnGroups = [\n            new types_1.SimulateRequestTransactionGroup({\n                txns: txnObjects,\n            }),\n        ];\n        const simulateResponse = await client\n            .simulateTransactions(currentRequest)\n            .do();\n        // Parse method response\n        const methodResults = [];\n        for (const [txnIndex, method] of this.methodCalls) {\n            const txID = this.txIDs[txnIndex];\n            const pendingInfo = simulateResponse.txnGroups[0].txnResults[txnIndex].txnResult;\n            const methodResult = {\n                txID,\n                rawReturnValue: new Uint8Array(),\n                method,\n            };\n            methodResults.push(AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo.get_obj_for_encoding()));\n        }\n        return { methodResults, simulateResponse };\n    }\n    /**\n     * Send the transaction group to the network and wait until it's committed to a block. An error\n     * will be thrown if submission or execution fails.\n     *\n     * The composer's status must be SUBMITTED or lower before calling this method, since execution is\n     * only allowed once. If submission is successful, this composer's status will update to SUBMITTED.\n     * If the execution is also successful, this composer's status will update to COMMITTED.\n     *\n     * Note: a group can only be submitted again if it fails.\n     *\n     * @param client - An Algodv2 client\n     * @param waitRounds - The maximum number of rounds to wait for transaction confirmation\n     *\n     * @returns A promise that, upon success, resolves to an object containing the confirmed round for\n     *   this transaction, the txIDs of the submitted transactions, and an array of results containing\n     *   one element for each method call transaction in this group.\n     */\n    async execute(client, waitRounds) {\n        if (this.status === AtomicTransactionComposerStatus.COMMITTED) {\n            throw new Error('Transaction group has already been executed successfully');\n        }\n        const txIDs = await this.submit(client);\n        this.status = AtomicTransactionComposerStatus.SUBMITTED;\n        const firstMethodCallIndex = this.transactions.findIndex((_, index) => this.methodCalls.has(index));\n        const indexToWaitFor = firstMethodCallIndex === -1 ? 0 : firstMethodCallIndex;\n        const confirmedTxnInfo = await (0, wait_1.waitForConfirmation)(client, txIDs[indexToWaitFor], waitRounds);\n        this.status = AtomicTransactionComposerStatus.COMMITTED;\n        const confirmedRound = confirmedTxnInfo['confirmed-round'];\n        const methodResults = [];\n        for (const [txnIndex, method] of this.methodCalls) {\n            const txID = txIDs[txnIndex];\n            let methodResult = {\n                txID,\n                rawReturnValue: new Uint8Array(),\n                method,\n            };\n            try {\n                const pendingInfo = txnIndex === firstMethodCallIndex\n                    ? confirmedTxnInfo\n                    : // eslint-disable-next-line no-await-in-loop\n                        await client.pendingTransactionInformation(txID).do();\n                methodResult = AtomicTransactionComposer.parseMethodResponse(method, methodResult, pendingInfo);\n            }\n            catch (err) {\n                methodResult.decodeError = err;\n            }\n            methodResults.push(methodResult);\n        }\n        return {\n            confirmedRound,\n            txIDs,\n            methodResults,\n        };\n    }\n    /**\n     * Parses a single ABI Method transaction log into a ABI result object.\n     *\n     * @param method\n     * @param methodResult\n     * @param pendingInfo\n     * @returns An ABIResult object\n     */\n    static parseMethodResponse(method, methodResult, pendingInfo) {\n        const returnedResult = methodResult;\n        try {\n            returnedResult.txInfo = pendingInfo;\n            if (method.returns.type !== 'void') {\n                const logs = pendingInfo.logs || [];\n                if (logs.length === 0) {\n                    throw new Error('App call transaction did not log a return value');\n                }\n                const lastLog = buffer_1.Buffer.from(logs[logs.length - 1], 'base64');\n                if (lastLog.byteLength < 4 ||\n                    !lastLog.slice(0, 4).equals(RETURN_PREFIX)) {\n                    throw new Error('App call transaction did not log a return value');\n                }\n                returnedResult.rawReturnValue = new Uint8Array(lastLog.slice(4));\n                returnedResult.returnValue = method.returns.type.decode(methodResult.rawReturnValue);\n            }\n        }\n        catch (err) {\n            returnedResult.decodeError = err;\n        }\n        return returnedResult;\n    }\n}\nexports.AtomicTransactionComposer = AtomicTransactionComposer;\n/** The maximum size of an atomic transaction group. */\nAtomicTransactionComposer.MAX_GROUP_SIZE = 16;\n//# sourceMappingURL=composer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/composer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/convert.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/convert.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.algosToMicroalgos = exports.microalgosToAlgos = exports.INVALID_MICROALGOS_ERROR_MSG = void 0;\nconst MICROALGOS_TO_ALGOS_RATIO = 1e6;\nexports.INVALID_MICROALGOS_ERROR_MSG = 'Microalgos should be positive and less than 2^53 - 1.';\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos - number\n * @returns number\n */\nfunction microalgosToAlgos(microalgos) {\n    if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n        throw new Error(exports.INVALID_MICROALGOS_ERROR_MSG);\n    }\n    return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\nexports.microalgosToAlgos = microalgosToAlgos;\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos - number\n * @returns number\n */\nfunction algosToMicroalgos(algos) {\n    const microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n    return Math.round(microalgos);\n}\nexports.algosToMicroalgos = algosToMicroalgos;\n//# sourceMappingURL=convert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHlCQUF5QixHQUFHLG9DQUFvQztBQUM1RjtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvY29udmVydC5qcz80N2NjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbGdvc1RvTWljcm9hbGdvcyA9IGV4cG9ydHMubWljcm9hbGdvc1RvQWxnb3MgPSBleHBvcnRzLklOVkFMSURfTUlDUk9BTEdPU19FUlJPUl9NU0cgPSB2b2lkIDA7XG5jb25zdCBNSUNST0FMR09TX1RPX0FMR09TX1JBVElPID0gMWU2O1xuZXhwb3J0cy5JTlZBTElEX01JQ1JPQUxHT1NfRVJST1JfTVNHID0gJ01pY3JvYWxnb3Mgc2hvdWxkIGJlIHBvc2l0aXZlIGFuZCBsZXNzIHRoYW4gMl41MyAtIDEuJztcbi8qKlxuICogbWljcm9hbGdvc1RvQWxnb3MgY29udmVydHMgbWljcm9hbGdvcyB0byBhbGdvc1xuICogQHBhcmFtIG1pY3JvYWxnb3MgLSBudW1iZXJcbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5mdW5jdGlvbiBtaWNyb2FsZ29zVG9BbGdvcyhtaWNyb2FsZ29zKSB7XG4gICAgaWYgKG1pY3JvYWxnb3MgPCAwIHx8ICFOdW1iZXIuaXNTYWZlSW50ZWdlcihtaWNyb2FsZ29zKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXhwb3J0cy5JTlZBTElEX01JQ1JPQUxHT1NfRVJST1JfTVNHKTtcbiAgICB9XG4gICAgcmV0dXJuIG1pY3JvYWxnb3MgLyBNSUNST0FMR09TX1RPX0FMR09TX1JBVElPO1xufVxuZXhwb3J0cy5taWNyb2FsZ29zVG9BbGdvcyA9IG1pY3JvYWxnb3NUb0FsZ29zO1xuLyoqXG4gKiBhbGdvc1RvTWljcm9hbGdvcyBjb252ZXJ0cyBhbGdvcyB0byBtaWNyb2FsZ29zXG4gKiBAcGFyYW0gYWxnb3MgLSBudW1iZXJcbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5mdW5jdGlvbiBhbGdvc1RvTWljcm9hbGdvcyhhbGdvcykge1xuICAgIGNvbnN0IG1pY3JvYWxnb3MgPSBhbGdvcyAqIE1JQ1JPQUxHT1NfVE9fQUxHT1NfUkFUSU87XG4gICAgcmV0dXJuIE1hdGgucm91bmQobWljcm9hbGdvcyk7XG59XG5leHBvcnRzLmFsZ29zVG9NaWNyb2FsZ29zID0gYWxnb3NUb01pY3JvYWxnb3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/dryrun.js":
/*!*************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/dryrun.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DryrunResult = exports.createDryrun = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst types_1 = __webpack_require__(/*! ./client/v2/algod/models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\");\nconst transactions_1 = __webpack_require__(/*! ./types/transactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/index.js\");\nconst address_1 = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\");\nconst defaultAppId = 1380011588;\nconst defaultMaxWidth = 30;\nfunction decodePrograms(ap) {\n    // eslint-disable-next-line no-param-reassign\n    ap.params['approval-program'] = buffer_1.Buffer.from(ap.params['approval-program'].toString(), 'base64');\n    // eslint-disable-next-line no-param-reassign\n    ap.params['clear-state-program'] = buffer_1.Buffer.from(ap.params['clear-state-program'].toString(), 'base64');\n    return ap;\n}\n/**\n * createDryrun takes an Algod Client (from algod.AlgodV2Client) and an array of Signed Transactions\n * from (transaction.SignedTransaction) and creates a DryrunRequest object with relevant balances\n * @param client - the AlgodClient to make requests against\n * @param txns - the array of SignedTransaction to use for generating the DryrunRequest object\n * @param protocolVersion - the string representing the protocol version to use\n * @param latestTimestamp - the timestamp\n * @returns the DryrunRequest object constructed from the SignedTransactions passed\n */\nasync function createDryrun({ client, txns, protocolVersion, latestTimestamp, round, sources, }) {\n    const appInfos = [];\n    const acctInfos = [];\n    const apps = [];\n    const assets = [];\n    const accts = [];\n    for (const t of txns) {\n        if (t.txn.type === transactions_1.TransactionType.appl) {\n            accts.push((0, address_1.encodeAddress)(t.txn.from.publicKey));\n            if (t.txn.appAccounts)\n                accts.push(...t.txn.appAccounts.map((a) => (0, address_1.encodeAddress)(a.publicKey)));\n            if (t.txn.appForeignApps) {\n                apps.push(...t.txn.appForeignApps);\n                accts.push(...t.txn.appForeignApps.map((aidx) => (0, address_1.getApplicationAddress)(aidx)));\n            }\n            if (t.txn.appForeignAssets)\n                assets.push(...t.txn.appForeignAssets);\n            // Create application,\n            if (t.txn.appIndex === undefined || t.txn.appIndex === 0) {\n                appInfos.push(new types_1.Application({\n                    id: defaultAppId,\n                    params: new types_1.ApplicationParams({\n                        creator: (0, address_1.encodeAddress)(t.txn.from.publicKey),\n                        approvalProgram: t.txn.appApprovalProgram,\n                        clearStateProgram: t.txn.appClearProgram,\n                        localStateSchema: new types_1.ApplicationStateSchema({\n                            numUint: t.txn.appLocalInts,\n                            numByteSlice: t.txn.appLocalByteSlices,\n                        }),\n                        globalStateSchema: new types_1.ApplicationStateSchema({\n                            numUint: t.txn.appGlobalInts,\n                            numByteSlice: t.txn.appGlobalByteSlices,\n                        }),\n                    }),\n                }));\n            }\n            else {\n                apps.push(t.txn.appIndex);\n                accts.push((0, address_1.getApplicationAddress)(t.txn.appIndex));\n            }\n        }\n    }\n    // Dedupe and add creator to accts array\n    const assetPromises = [];\n    for (const assetId of [...new Set(assets)]) {\n        assetPromises.push(client\n            .getAssetByID(assetId)\n            .do()\n            .then((assetInfo) => {\n            accts.push(assetInfo.params.creator);\n        }));\n    }\n    // Wait for assets to finish since we append to accts array\n    await Promise.all(assetPromises);\n    // Dedupe and get app info for all apps\n    const appPromises = [];\n    for (const appId of [...new Set(apps)]) {\n        appPromises.push(client\n            .getApplicationByID(appId)\n            .do()\n            .then((appInfo) => {\n            const ai = decodePrograms(appInfo);\n            appInfos.push(ai);\n            accts.push(ai.params.creator);\n        }));\n    }\n    await Promise.all(appPromises);\n    const acctPromises = [];\n    for (const acct of [...new Set(accts)]) {\n        acctPromises.push(client\n            .accountInformation(acct)\n            .do()\n            .then((acctInfo) => {\n            if ('created-apps' in acctInfo) {\n                // eslint-disable-next-line no-param-reassign\n                acctInfo['created-apps'] = acctInfo['created-apps'].map((app) => decodePrograms(app));\n            }\n            acctInfos.push(acctInfo);\n        }));\n    }\n    await Promise.all(acctPromises);\n    return new types_1.DryrunRequest({\n        txns: txns.map((st) => ({ ...st, txn: st.txn.get_obj_for_encoding() })),\n        accounts: acctInfos,\n        apps: appInfos,\n        latestTimestamp,\n        round,\n        protocolVersion,\n        sources,\n    });\n}\nexports.createDryrun = createDryrun;\nclass DryrunStackValue {\n    constructor(sv) {\n        this.type = 0;\n        this.bytes = '';\n        this.uint = 0;\n        this.type = sv.type;\n        this.bytes = sv.bytes;\n        this.uint = sv.uint;\n    }\n    toString() {\n        if (this.type === 1) {\n            return `0x${buffer_1.Buffer.from(this.bytes, 'base64').toString('hex')}`;\n        }\n        return this.uint.toString();\n    }\n}\nclass DryrunTraceLine {\n    constructor(line) {\n        this.error = '';\n        this.line = 0;\n        this.pc = 0;\n        this.scratch = [];\n        this.stack = [];\n        this.error = line.error === undefined ? '' : line.error;\n        this.line = line.line;\n        this.pc = line.pc;\n        this.scratch = line.scratch;\n        this.stack = line.stack.map((sv) => new DryrunStackValue(sv));\n    }\n}\nclass DryrunTrace {\n    constructor(t) {\n        this.trace = [];\n        if (t == null)\n            return;\n        this.trace = t.map((line) => new DryrunTraceLine(line));\n    }\n}\nfunction truncate(str, maxValueWidth) {\n    if (str.length > maxValueWidth && maxValueWidth > 0) {\n        return `${str.slice(0, maxValueWidth)}...`;\n    }\n    return str;\n}\nfunction scratchToString(prevScratch, currScratch) {\n    if (currScratch.length === 0)\n        return '';\n    let newScratchIdx = null;\n    for (let idx = 0; idx < currScratch.length; idx++) {\n        if (idx > prevScratch.length) {\n            newScratchIdx = idx;\n            continue;\n        }\n        if (JSON.stringify(prevScratch[idx]) !== JSON.stringify(currScratch[idx])) {\n            newScratchIdx = idx;\n        }\n    }\n    if (newScratchIdx == null)\n        return '';\n    const newScratch = currScratch[newScratchIdx];\n    if (newScratch.bytes.length > 0) {\n        return `${newScratchIdx} = 0x${buffer_1.Buffer.from(newScratch.bytes, 'base64').toString('hex')}`;\n    }\n    return `${newScratchIdx} = ${newScratch.uint.toString()}`;\n}\nfunction stackToString(stack, reverse) {\n    const svs = reverse ? stack.reverse() : stack;\n    return `[${svs\n        .map((sv) => {\n        switch (sv.type) {\n            case 1:\n                return `0x${buffer_1.Buffer.from(sv.bytes, 'base64').toString('hex')}`;\n            case 2:\n                return `${sv.uint.toString()}`;\n            default:\n                return '';\n        }\n    })\n        .join(', ')}]`;\n}\nclass DryrunTransactionResult {\n    constructor(dtr) {\n        this.disassembly = [];\n        this.appCallMessages = [];\n        this.localDeltas = [];\n        this.globalDelta = [];\n        this.cost = 0;\n        this.logicSigMessages = [];\n        this.logicSigDisassembly = [];\n        this.logs = [];\n        this.appCallTrace = undefined;\n        this.logicSigTrace = undefined;\n        this.required = ['disassembly'];\n        this.optionals = [\n            'app-call-messages',\n            'local-deltas',\n            'global-delta',\n            'cost',\n            'logic-sig-messages',\n            'logic-sig-disassembly',\n            'logs',\n        ];\n        this.traces = ['app-call-trace', 'logic-sig-trace'];\n        this.disassembly = dtr.disassembly;\n        this.appCallMessages = dtr['app-call-messages'];\n        this.localDeltas = dtr['local-deltas'];\n        this.globalDelta = dtr['global-delta'];\n        this.cost = dtr.cost;\n        this.logicSigMessages = dtr['logic-sig-messages'];\n        this.logicSigDisassembly = dtr['logic-sig-disassembly'];\n        this.logs = dtr.logs;\n        this.appCallTrace = new DryrunTrace(dtr['app-call-trace']);\n        this.logicSigTrace = new DryrunTrace(dtr['logic-sig-trace']);\n    }\n    appCallRejected() {\n        return (this.appCallMessages !== undefined &&\n            this.appCallMessages.includes('REJECT'));\n    }\n    logicSigRejected() {\n        return (this.logicSigMessages !== undefined &&\n            this.logicSigMessages.includes('REJECT'));\n    }\n    static trace(drt, disassembly, spc) {\n        const maxWidth = spc.maxValueWidth || defaultMaxWidth;\n        // Create the array of arrays, each sub array contains N columns\n        const lines = [['pc#', 'ln#', 'source', 'scratch', 'stack']];\n        for (let idx = 0; idx < drt.trace.length; idx++) {\n            const { line, error, pc, scratch, stack } = drt.trace[idx];\n            const currScratch = scratch !== undefined ? scratch : [];\n            const prevScratch = idx > 0 && drt.trace[idx - 1].scratch !== undefined\n                ? drt.trace[idx - 1].scratch\n                : [];\n            const src = error === '' ? disassembly[line] : `!! ${error} !!`;\n            lines.push([\n                pc.toString().padEnd(3, ' '),\n                line.toString().padEnd(3, ' '),\n                truncate(src, maxWidth),\n                truncate(scratchToString(prevScratch, currScratch), maxWidth),\n                truncate(stackToString(stack, spc.topOfStackFirst), maxWidth),\n            ]);\n        }\n        // Get the max length for each column\n        const maxLengths = lines.reduce((prev, curr) => {\n            const newVal = new Array(lines[0].length).fill(0);\n            for (let idx = 0; idx < prev.length; idx++) {\n                newVal[idx] =\n                    curr[idx].length > prev[idx] ? curr[idx].length : prev[idx];\n            }\n            return newVal;\n        }, new Array(lines[0].length).fill(0));\n        return `${lines\n            .map((line) => line\n            .map((v, idx) => v.padEnd(maxLengths[idx] + 1, ' '))\n            .join('|')\n            .trim())\n            .join('\\n')}\\n`;\n    }\n    appTrace(spc) {\n        if (this.appCallTrace === undefined || !this.disassembly)\n            return '';\n        let conf = spc;\n        if (spc === undefined)\n            conf = {\n                maxValueWidth: defaultMaxWidth,\n                topOfStackFirst: false,\n            };\n        return DryrunTransactionResult.trace(this.appCallTrace, this.disassembly, conf);\n    }\n    lsigTrace(spc) {\n        if (this.logicSigTrace === undefined ||\n            this.logicSigDisassembly === undefined)\n            return '';\n        let conf = spc;\n        if (spc === undefined)\n            conf = {\n                maxValueWidth: defaultMaxWidth,\n                topOfStackFirst: true,\n            };\n        return DryrunTransactionResult.trace(this.logicSigTrace, this.logicSigDisassembly, conf);\n    }\n}\nclass DryrunResult {\n    constructor(drrResp) {\n        this.error = '';\n        this.protocolVersion = '';\n        this.txns = [];\n        this.error = drrResp.error;\n        this.protocolVersion = drrResp['protocol-version'];\n        this.txns = drrResp.txns.map((txn) => new DryrunTransactionResult(txn));\n    }\n}\nexports.DryrunResult = DryrunResult;\n//# sourceMappingURL=dryrun.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/dryrun.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js":
/*!***********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/encoding/address.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getApplicationAddress = exports.fromMultisigPreImgAddrs = exports.fromMultisigPreImg = exports.encodeAddress = exports.isValidAddress = exports.decodeAddress = exports.UNEXPECTED_PK_LEN_ERROR_MSG = exports.INVALID_MSIG_PK_ERROR_MSG = exports.INVALID_MSIG_THRESHOLD_ERROR_MSG = exports.INVALID_MSIG_VERSION_ERROR_MSG = exports.CHECKSUM_ADDRESS_ERROR_MSG = exports.MALFORMED_ADDRESS_ERROR_MSG = exports.ALGORAND_ZERO_ADDRESS_STRING = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst hi_base32_1 = __importDefault(__webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/hi-base32/src/base32.js\"));\nconst nacl = __importStar(__webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst utils = __importStar(__webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst uint64_1 = __webpack_require__(/*! ./uint64 */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/uint64.js\");\nconst ALGORAND_ADDRESS_BYTE_LENGTH = 36;\nconst ALGORAND_CHECKSUM_BYTE_LENGTH = 4;\nconst ALGORAND_ADDRESS_LENGTH = 58;\nexports.ALGORAND_ZERO_ADDRESS_STRING = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ';\n// Convert \"MultisigAddr\" UTF-8 to byte array\nconst MULTISIG_PREIMG2ADDR_PREFIX = new Uint8Array([\n    77,\n    117,\n    108,\n    116,\n    105,\n    115,\n    105,\n    103,\n    65,\n    100,\n    100,\n    114,\n]);\nconst APP_ID_PREFIX = buffer_1.Buffer.from('appID');\nexports.MALFORMED_ADDRESS_ERROR_MSG = 'address seems to be malformed';\nexports.CHECKSUM_ADDRESS_ERROR_MSG = 'wrong checksum for address';\nexports.INVALID_MSIG_VERSION_ERROR_MSG = 'invalid multisig version';\nexports.INVALID_MSIG_THRESHOLD_ERROR_MSG = 'bad multisig threshold';\nexports.INVALID_MSIG_PK_ERROR_MSG = 'bad multisig public key - wrong length';\nexports.UNEXPECTED_PK_LEN_ERROR_MSG = 'nacl public key length is not 32 bytes';\n/**\n * decodeAddress takes an Algorand address in string form and decodes it into a Uint8Array.\n * @param address - an Algorand address with checksum.\n * @returns the decoded form of the address's public key and checksum\n */\nfunction decodeAddress(address) {\n    if (typeof address !== 'string' || address.length !== ALGORAND_ADDRESS_LENGTH)\n        throw new Error(exports.MALFORMED_ADDRESS_ERROR_MSG);\n    // try to decode\n    const decoded = hi_base32_1.default.decode.asBytes(address.toString());\n    // Sanity check\n    if (decoded.length !== ALGORAND_ADDRESS_BYTE_LENGTH)\n        throw new Error(exports.MALFORMED_ADDRESS_ERROR_MSG);\n    // Find publickey and checksum\n    const pk = new Uint8Array(decoded.slice(0, ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH));\n    const cs = new Uint8Array(decoded.slice(nacl.PUBLIC_KEY_LENGTH, ALGORAND_ADDRESS_BYTE_LENGTH));\n    // Compute checksum\n    const checksum = nacl\n        .genericHash(pk)\n        .slice(nacl.HASH_BYTES_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, nacl.HASH_BYTES_LENGTH);\n    // Check if the checksum and the address are equal\n    if (!utils.arrayEqual(checksum, cs))\n        throw new Error(exports.CHECKSUM_ADDRESS_ERROR_MSG);\n    return { publicKey: pk, checksum: cs };\n}\nexports.decodeAddress = decodeAddress;\n/**\n * isValidAddress checks if a string is a valid Algorand address.\n * @param address - an Algorand address with checksum.\n * @returns true if valid, false otherwise\n */\nfunction isValidAddress(address) {\n    // Try to decode\n    try {\n        decodeAddress(address);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.isValidAddress = isValidAddress;\n/**\n * encodeAddress takes an Algorand address as a Uint8Array and encodes it into a string with checksum.\n * @param address - a raw Algorand address\n * @returns the address and checksum encoded as a string.\n */\nfunction encodeAddress(address) {\n    // compute checksum\n    const checksum = nacl\n        .genericHash(address)\n        .slice(nacl.PUBLIC_KEY_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH, nacl.PUBLIC_KEY_LENGTH);\n    const addr = hi_base32_1.default.encode(utils.concatArrays(address, checksum));\n    return addr.toString().slice(0, ALGORAND_ADDRESS_LENGTH); // removing the extra '===='\n}\nexports.encodeAddress = encodeAddress;\n/**\n * fromMultisigPreImg takes multisig parameters and returns a 32 byte typed array public key,\n * representing an address that identifies the \"exact group, version, and public keys\" that are required for signing.\n * Hash(\"MultisigAddr\" || version uint8 || threshold uint8 || PK1 || PK2 || ...)\n * Encoding this output yields a human readable address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - array of typed array public keys\n */\nfunction fromMultisigPreImg({ version, threshold, pks, }) {\n    if (version !== 1 || version > 255 || version < 0) {\n        // ^ a tad redundant, but in case in the future version != 1, still check for uint8\n        throw new Error(exports.INVALID_MSIG_VERSION_ERROR_MSG);\n    }\n    if (threshold === 0 ||\n        pks.length === 0 ||\n        threshold > pks.length ||\n        threshold > 255) {\n        throw new Error(exports.INVALID_MSIG_THRESHOLD_ERROR_MSG);\n    }\n    const pkLen = ALGORAND_ADDRESS_BYTE_LENGTH - ALGORAND_CHECKSUM_BYTE_LENGTH;\n    if (pkLen !== nacl.PUBLIC_KEY_LENGTH) {\n        throw new Error(exports.UNEXPECTED_PK_LEN_ERROR_MSG);\n    }\n    const merged = new Uint8Array(MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + pkLen * pks.length);\n    merged.set(MULTISIG_PREIMG2ADDR_PREFIX, 0);\n    merged.set([version], MULTISIG_PREIMG2ADDR_PREFIX.length);\n    merged.set([threshold], MULTISIG_PREIMG2ADDR_PREFIX.length + 1);\n    for (let i = 0; i < pks.length; i++) {\n        if (pks[i].length !== pkLen) {\n            throw new Error(exports.INVALID_MSIG_PK_ERROR_MSG);\n        }\n        merged.set(pks[i], MULTISIG_PREIMG2ADDR_PREFIX.length + 2 + i * pkLen);\n    }\n    return new Uint8Array(nacl.genericHash(merged));\n}\nexports.fromMultisigPreImg = fromMultisigPreImg;\n/**\n * fromMultisigPreImgAddrs takes multisig parameters and returns a human readable Algorand address.\n * This is equivalent to fromMultisigPreImg, but interfaces with encoded addresses.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - array of encoded addresses\n */\nfunction fromMultisigPreImgAddrs({ version, threshold, addrs, }) {\n    const pks = addrs.map((addr) => decodeAddress(addr).publicKey);\n    return encodeAddress(fromMultisigPreImg({ version, threshold, pks }));\n}\nexports.fromMultisigPreImgAddrs = fromMultisigPreImgAddrs;\n/**\n * Get the escrow address of an application.\n * @param appID - The ID of the application.\n * @returns The address corresponding to that application's escrow account.\n */\nfunction getApplicationAddress(appID) {\n    const toBeSigned = utils.concatArrays(APP_ID_PREFIX, (0, uint64_1.encodeUint64)(appID));\n    const hash = nacl.genericHash(toBeSigned);\n    return encodeAddress(new Uint8Array(hash));\n}\nexports.getApplicationAddress = getApplicationAddress;\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/encoding/bigint.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/encoding/bigint.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bytesToBigInt = exports.bigIntToBytes = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\n/**\n * bigIntToBytes converts a BigInt to a big-endian Uint8Array for encoding.\n * @param bi - The bigint to convert.\n * @param size - The size of the resulting byte array.\n * @returns A byte array containing the big-endian encoding of the input bigint\n */\nfunction bigIntToBytes(bi, size) {\n    let hex = bi.toString(16);\n    // Pad the hex with zeros so it matches the size in bytes\n    if (hex.length !== size * 2) {\n        hex = hex.padStart(size * 2, '0');\n    }\n    const byteArray = new Uint8Array(hex.length / 2);\n    for (let i = 0, j = 0; i < hex.length / 2; i++, j += 2) {\n        byteArray[i] = parseInt(hex.slice(j, j + 2), 16);\n    }\n    return byteArray;\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * bytesToBigInt produces a bigint from a binary representation.\n *\n * @param bytes - The Uint8Array to convert.\n * @returns The bigint that was encoded in the input data.\n */\nfunction bytesToBigInt(bytes) {\n    let res = BigInt(0);\n    const buf = buffer_1.Buffer.from(bytes);\n    for (let i = 0; i < bytes.length; i++) {\n        res = BigInt(Number(buf.readUIntBE(i, 1))) + res * BigInt(256);\n    }\n    return res;\n}\nexports.bytesToBigInt = bytesToBigInt;\n//# sourceMappingURL=bigint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9lbmNvZGluZy9iaWdpbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcscUJBQXFCO0FBQzdDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9lbmNvZGluZy9iaWdpbnQuanM/NDY2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnl0ZXNUb0JpZ0ludCA9IGV4cG9ydHMuYmlnSW50VG9CeXRlcyA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbi8qKlxuICogYmlnSW50VG9CeXRlcyBjb252ZXJ0cyBhIEJpZ0ludCB0byBhIGJpZy1lbmRpYW4gVWludDhBcnJheSBmb3IgZW5jb2RpbmcuXG4gKiBAcGFyYW0gYmkgLSBUaGUgYmlnaW50IHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gc2l6ZSAtIFRoZSBzaXplIG9mIHRoZSByZXN1bHRpbmcgYnl0ZSBhcnJheS5cbiAqIEByZXR1cm5zIEEgYnl0ZSBhcnJheSBjb250YWluaW5nIHRoZSBiaWctZW5kaWFuIGVuY29kaW5nIG9mIHRoZSBpbnB1dCBiaWdpbnRcbiAqL1xuZnVuY3Rpb24gYmlnSW50VG9CeXRlcyhiaSwgc2l6ZSkge1xuICAgIGxldCBoZXggPSBiaS50b1N0cmluZygxNik7XG4gICAgLy8gUGFkIHRoZSBoZXggd2l0aCB6ZXJvcyBzbyBpdCBtYXRjaGVzIHRoZSBzaXplIGluIGJ5dGVzXG4gICAgaWYgKGhleC5sZW5ndGggIT09IHNpemUgKiAyKSB7XG4gICAgICAgIGhleCA9IGhleC5wYWRTdGFydChzaXplICogMiwgJzAnKTtcbiAgICB9XG4gICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaGV4Lmxlbmd0aCAvIDIpO1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGhleC5sZW5ndGggLyAyOyBpKyssIGogKz0gMikge1xuICAgICAgICBieXRlQXJyYXlbaV0gPSBwYXJzZUludChoZXguc2xpY2UoaiwgaiArIDIpLCAxNik7XG4gICAgfVxuICAgIHJldHVybiBieXRlQXJyYXk7XG59XG5leHBvcnRzLmJpZ0ludFRvQnl0ZXMgPSBiaWdJbnRUb0J5dGVzO1xuLyoqXG4gKiBieXRlc1RvQmlnSW50IHByb2R1Y2VzIGEgYmlnaW50IGZyb20gYSBiaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGJ5dGVzIC0gVGhlIFVpbnQ4QXJyYXkgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIFRoZSBiaWdpbnQgdGhhdCB3YXMgZW5jb2RlZCBpbiB0aGUgaW5wdXQgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYnl0ZXNUb0JpZ0ludChieXRlcykge1xuICAgIGxldCByZXMgPSBCaWdJbnQoMCk7XG4gICAgY29uc3QgYnVmID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oYnl0ZXMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzID0gQmlnSW50KE51bWJlcihidWYucmVhZFVJbnRCRShpLCAxKSkpICsgcmVzICogQmlnSW50KDI1Nik7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5leHBvcnRzLmJ5dGVzVG9CaWdJbnQgPSBieXRlc1RvQmlnSW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlnaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/encoding/bigint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/encoding/encoding.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255-\\>8bit, 256-65535-\\>16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decode = exports.encode = exports.rawEncode = exports.ERROR_CONTAINS_EMPTY_STRING = void 0;\nconst msgpack = __importStar(__webpack_require__(/*! algo-msgpack-with-bigint */ \"(ssr)/./node_modules/algo-msgpack-with-bigint/dist/index.js\"));\n// Errors\nexports.ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj - The object to check\n * @returns \\{true, empty key\\} if contains empty, \\{false, undefined\\} otherwise\n */\nfunction containsEmpty(obj) {\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (!obj[key] || obj[key].length === 0) {\n                return { containsEmpty: true, firstEmptyKey: key };\n            }\n        }\n    }\n    return { containsEmpty: false, firstEmptyKey: undefined };\n}\n/**\n * rawEncode encodes objects using msgpack, regardless of whether there are\n * empty or 0 value fields.\n * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.\n * @returns msgpack representation of the object\n */\nfunction rawEncode(obj) {\n    // enable the canonical option\n    const options = { sortKeys: true };\n    return msgpack.encode(obj, options);\n}\nexports.rawEncode = rawEncode;\n/**\n * encode encodes objects using msgpack\n * @param obj - a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */\nfunction encode(obj) {\n    // Check for empty values\n    const emptyCheck = containsEmpty(obj);\n    if (emptyCheck.containsEmpty) {\n        throw new Error(exports.ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n    }\n    // enable the canonical option\n    return rawEncode(obj);\n}\nexports.encode = encode;\nfunction decode(buffer) {\n    return msgpack.decode(buffer);\n}\nexports.decode = decode;\n//# sourceMappingURL=encoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9lbmNvZGluZy9lbmNvZGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsbUNBQW1DO0FBQ3pGLDZCQUE2QixtQkFBTyxDQUFDLDZGQUEwQjtBQUMvRDtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsa0JBQWtCLHFCQUFxQixtQkFBbUI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvZW5jb2RpbmcvZW5jb2RpbmcuanM/OTY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogVGhpcyBmaWxlIGlzIGEgd3JhcHBlciBvZiBtc2dwYWNrLmpzLlxuICogVGhlIHdyYXBwZXIgd2FzIHdyaXR0ZW4gaW4gb3JkZXIgdG8gZW5zdXJlIGNvcnJlY3QgZW5jb2Rpbmcgb2YgQWxnb3JhbmQgVHJhbnNhY3Rpb24gYW5kIG90aGVyIGZvcm1hdHMuXG4gKiBJbiBwYXJ0aWN1bGFyLCBpdCBtYXRjaGVzIGdvLWFsZ29yYW5kIGJsb2NrY2hhaW4gY2xpZW50LCB3cml0dGVuIGluIGdvIChodHRwczovL3d3dy5naXRodWIuY29tL2FsZ29yYW5kL2dvLWFsZ29yYW5kLlxuICogQWxnb3JhbmQncyBtc2dwYWNrIGVuY29kaW5nIGZvbGxvd3MgdG8gZm9sbG93aW5nIHJ1bGVzIC1cbiAqICAxLiBFdmVyeSBpbnRlZ2VyIG11c3QgYmUgZW5jb2RlZCB0byB0aGUgc21hbGxlc3QgdHlwZSBwb3NzaWJsZSAoMC0yNTUtXFw+OGJpdCwgMjU2LTY1NTM1LVxcPjE2Yml0LCBldHgpXG4gKiAgMi4gQWxsIGZpZWxkcyBuYW1lcyBtdXN0IGJlIHNvcnRlZFxuICogIDMuIEFsbCBlbXB0eSBhbmQgMCBmaWVsZHMgc2hvdWxkIGJlIG9taXR0ZWRcbiAqICA0LiBFdmVyeSBwb3NpdGl2ZSBudW1iZXIgbXVzdCBiZSBlbmNvZGVkIGFzIHVpbnRcbiAqICA1LiBCaW5hcnkgYmxvYiBzaG91bGQgYmUgdXNlZCBmb3IgYmluYXJ5IGRhdGEgYW5kIHN0cmluZyBmb3Igc3RyaW5nc1xuICogICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnJhd0VuY29kZSA9IGV4cG9ydHMuRVJST1JfQ09OVEFJTlNfRU1QVFlfU1RSSU5HID0gdm9pZCAwO1xuY29uc3QgbXNncGFjayA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiYWxnby1tc2dwYWNrLXdpdGgtYmlnaW50XCIpKTtcbi8vIEVycm9yc1xuZXhwb3J0cy5FUlJPUl9DT05UQUlOU19FTVBUWV9TVFJJTkcgPSAnVGhlIG9iamVjdCBjb250YWlucyBlbXB0eSBvciAwIHZhbHVlcy4gRmlyc3QgZW1wdHkgb3IgMCB2YWx1ZSBlbmNvdW50ZXJlZCBkdXJpbmcgZW5jb2Rpbmc6ICc7XG4vKipcbiAqIGNvbnRhaW5zRW1wdHkgcmV0dXJucyB0cnVlIGlmIGFueSBvZiB0aGUgb2JqZWN0J3MgdmFsdWVzIGFyZSBlbXB0eSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICogRW1wdHkgYXJyYXlzIGNvbnNpZGVyZWQgZW1wdHlcbiAqIEBwYXJhbSBvYmogLSBUaGUgb2JqZWN0IHRvIGNoZWNrXG4gKiBAcmV0dXJucyBcXHt0cnVlLCBlbXB0eSBrZXlcXH0gaWYgY29udGFpbnMgZW1wdHksIFxce2ZhbHNlLCB1bmRlZmluZWRcXH0gb3RoZXJ3aXNlXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zRW1wdHkob2JqKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICBpZiAoIW9ialtrZXldIHx8IG9ialtrZXldLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNvbnRhaW5zRW1wdHk6IHRydWUsIGZpcnN0RW1wdHlLZXk6IGtleSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGNvbnRhaW5zRW1wdHk6IGZhbHNlLCBmaXJzdEVtcHR5S2V5OiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogcmF3RW5jb2RlIGVuY29kZXMgb2JqZWN0cyB1c2luZyBtc2dwYWNrLCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlcmUgYXJlXG4gKiBlbXB0eSBvciAwIHZhbHVlIGZpZWxkcy5cbiAqIEBwYXJhbSBvYmogLSBhIGRpY3Rpb25hcnkgdG8gYmUgZW5jb2RlZC4gTWF5IG9yIG1heSBub3QgY29udGFpbiBlbXB0eSBvciAwIHZhbHVlcy5cbiAqIEByZXR1cm5zIG1zZ3BhY2sgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICovXG5mdW5jdGlvbiByYXdFbmNvZGUob2JqKSB7XG4gICAgLy8gZW5hYmxlIHRoZSBjYW5vbmljYWwgb3B0aW9uXG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc29ydEtleXM6IHRydWUgfTtcbiAgICByZXR1cm4gbXNncGFjay5lbmNvZGUob2JqLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucmF3RW5jb2RlID0gcmF3RW5jb2RlO1xuLyoqXG4gKiBlbmNvZGUgZW5jb2RlcyBvYmplY3RzIHVzaW5nIG1zZ3BhY2tcbiAqIEBwYXJhbSBvYmogLSBhIGRpY3Rpb25hcnkgdG8gYmUgZW5jb2RlZC4gTXVzdCBub3QgY29udGFpbiBlbXB0eSBvciAwIHZhbHVlcy5cbiAqIEByZXR1cm5zIG1zZ3BhY2sgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICogQHRocm93cyBFcnJvciBjb250YWluaW5nIEVSUk9SX0NPTlRBSU5TX0VNUFRZX1NUUklORyBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIGVtcHR5IG9yIHplcm8gdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShvYmopIHtcbiAgICAvLyBDaGVjayBmb3IgZW1wdHkgdmFsdWVzXG4gICAgY29uc3QgZW1wdHlDaGVjayA9IGNvbnRhaW5zRW1wdHkob2JqKTtcbiAgICBpZiAoZW1wdHlDaGVjay5jb250YWluc0VtcHR5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihleHBvcnRzLkVSUk9SX0NPTlRBSU5TX0VNUFRZX1NUUklORyArIGVtcHR5Q2hlY2suZmlyc3RFbXB0eUtleSk7XG4gICAgfVxuICAgIC8vIGVuYWJsZSB0aGUgY2Fub25pY2FsIG9wdGlvblxuICAgIHJldHVybiByYXdFbmNvZGUob2JqKTtcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZnVuY3Rpb24gZGVjb2RlKGJ1ZmZlcikge1xuICAgIHJldHVybiBtc2dwYWNrLmRlY29kZShidWZmZXIpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/encoding/uint64.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/encoding/uint64.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeUint64 = exports.encodeUint64 = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\");\n// NOTE: at the moment we specifically do not use Buffer.writeBigUInt64BE and\n// Buffer.readBigUInt64BE. This is because projects using webpack v4\n// automatically include an old version of the npm `buffer` package (v4.9.2 at\n// the time of writing), and this old version does not have these methods.\n/**\n * encodeUint64 converts an integer to its binary representation.\n * @param num - The number to convert. This must be an unsigned integer less than\n *   2^64.\n * @returns An 8-byte typed array containing the big-endian encoding of the input\n *   integer.\n */\nfunction encodeUint64(num) {\n    const isInteger = typeof num === 'bigint' || Number.isInteger(num);\n    if (!isInteger || num < 0 || num > BigInt('0xffffffffffffffff')) {\n        throw new Error('Input is not a 64-bit unsigned integer');\n    }\n    const encoding = new Uint8Array(8);\n    const view = new DataView(encoding.buffer);\n    view.setBigUint64(0, BigInt(num));\n    return encoding;\n}\nexports.encodeUint64 = encodeUint64;\nfunction decodeUint64(data, decodingMode = 'safe') {\n    if (decodingMode !== 'safe' &&\n        decodingMode !== 'mixed' &&\n        decodingMode !== 'bigint') {\n        throw new Error(`Unknown decodingMode option: ${decodingMode}`);\n    }\n    if (data.byteLength === 0 || data.byteLength > 8) {\n        throw new Error(`Data has unacceptable length. Expected length is between 1 and 8, got ${data.byteLength}`);\n    }\n    // insert 0s at the beginning if data is smaller than 8 bytes\n    const padding = new Uint8Array(8 - data.byteLength);\n    const encoding = (0, utils_1.concatArrays)(padding, data);\n    const view = new DataView(encoding.buffer);\n    const num = view.getBigUint64(0);\n    const isBig = num > BigInt(Number.MAX_SAFE_INTEGER);\n    if (decodingMode === 'safe') {\n        if (isBig) {\n            throw new Error(`Integer exceeds maximum safe integer: ${num.toString()}. Try decoding with \"mixed\" or \"safe\" decodingMode.`);\n        }\n        return Number(num);\n    }\n    if (decodingMode === 'mixed' && !isBig) {\n        return Number(num);\n    }\n    return num;\n}\nexports.decodeUint64 = decodeUint64;\n//# sourceMappingURL=uint64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9lbmNvZGluZy91aW50NjQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsb0JBQW9CO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLDRFQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsYUFBYTtBQUNyRTtBQUNBO0FBQ0EsaUdBQWlHLGdCQUFnQjtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsZUFBZTtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9lbmNvZGluZy91aW50NjQuanM/N2FjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlVWludDY0ID0gZXhwb3J0cy5lbmNvZGVVaW50NjQgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzL3V0aWxzXCIpO1xuLy8gTk9URTogYXQgdGhlIG1vbWVudCB3ZSBzcGVjaWZpY2FsbHkgZG8gbm90IHVzZSBCdWZmZXIud3JpdGVCaWdVSW50NjRCRSBhbmRcbi8vIEJ1ZmZlci5yZWFkQmlnVUludDY0QkUuIFRoaXMgaXMgYmVjYXVzZSBwcm9qZWN0cyB1c2luZyB3ZWJwYWNrIHY0XG4vLyBhdXRvbWF0aWNhbGx5IGluY2x1ZGUgYW4gb2xkIHZlcnNpb24gb2YgdGhlIG5wbSBgYnVmZmVyYCBwYWNrYWdlICh2NC45LjIgYXRcbi8vIHRoZSB0aW1lIG9mIHdyaXRpbmcpLCBhbmQgdGhpcyBvbGQgdmVyc2lvbiBkb2VzIG5vdCBoYXZlIHRoZXNlIG1ldGhvZHMuXG4vKipcbiAqIGVuY29kZVVpbnQ2NCBjb252ZXJ0cyBhbiBpbnRlZ2VyIHRvIGl0cyBiaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKiBAcGFyYW0gbnVtIC0gVGhlIG51bWJlciB0byBjb252ZXJ0LiBUaGlzIG11c3QgYmUgYW4gdW5zaWduZWQgaW50ZWdlciBsZXNzIHRoYW5cbiAqICAgMl42NC5cbiAqIEByZXR1cm5zIEFuIDgtYnl0ZSB0eXBlZCBhcnJheSBjb250YWluaW5nIHRoZSBiaWctZW5kaWFuIGVuY29kaW5nIG9mIHRoZSBpbnB1dFxuICogICBpbnRlZ2VyLlxuICovXG5mdW5jdGlvbiBlbmNvZGVVaW50NjQobnVtKSB7XG4gICAgY29uc3QgaXNJbnRlZ2VyID0gdHlwZW9mIG51bSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcihudW0pO1xuICAgIGlmICghaXNJbnRlZ2VyIHx8IG51bSA8IDAgfHwgbnVtID4gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGlzIG5vdCBhIDY0LWJpdCB1bnNpZ25lZCBpbnRlZ2VyJyk7XG4gICAgfVxuICAgIGNvbnN0IGVuY29kaW5nID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhlbmNvZGluZy5idWZmZXIpO1xuICAgIHZpZXcuc2V0QmlnVWludDY0KDAsIEJpZ0ludChudW0pKTtcbiAgICByZXR1cm4gZW5jb2Rpbmc7XG59XG5leHBvcnRzLmVuY29kZVVpbnQ2NCA9IGVuY29kZVVpbnQ2NDtcbmZ1bmN0aW9uIGRlY29kZVVpbnQ2NChkYXRhLCBkZWNvZGluZ01vZGUgPSAnc2FmZScpIHtcbiAgICBpZiAoZGVjb2RpbmdNb2RlICE9PSAnc2FmZScgJiZcbiAgICAgICAgZGVjb2RpbmdNb2RlICE9PSAnbWl4ZWQnICYmXG4gICAgICAgIGRlY29kaW5nTW9kZSAhPT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGRlY29kaW5nTW9kZSBvcHRpb246ICR7ZGVjb2RpbmdNb2RlfWApO1xuICAgIH1cbiAgICBpZiAoZGF0YS5ieXRlTGVuZ3RoID09PSAwIHx8IGRhdGEuYnl0ZUxlbmd0aCA+IDgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEYXRhIGhhcyB1bmFjY2VwdGFibGUgbGVuZ3RoLiBFeHBlY3RlZCBsZW5ndGggaXMgYmV0d2VlbiAxIGFuZCA4LCBnb3QgJHtkYXRhLmJ5dGVMZW5ndGh9YCk7XG4gICAgfVxuICAgIC8vIGluc2VydCAwcyBhdCB0aGUgYmVnaW5uaW5nIGlmIGRhdGEgaXMgc21hbGxlciB0aGFuIDggYnl0ZXNcbiAgICBjb25zdCBwYWRkaW5nID0gbmV3IFVpbnQ4QXJyYXkoOCAtIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgY29uc3QgZW5jb2RpbmcgPSAoMCwgdXRpbHNfMS5jb25jYXRBcnJheXMpKHBhZGRpbmcsIGRhdGEpO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcoZW5jb2RpbmcuYnVmZmVyKTtcbiAgICBjb25zdCBudW0gPSB2aWV3LmdldEJpZ1VpbnQ2NCgwKTtcbiAgICBjb25zdCBpc0JpZyA9IG51bSA+IEJpZ0ludChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gICAgaWYgKGRlY29kaW5nTW9kZSA9PT0gJ3NhZmUnKSB7XG4gICAgICAgIGlmIChpc0JpZykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlZ2VyIGV4Y2VlZHMgbWF4aW11bSBzYWZlIGludGVnZXI6ICR7bnVtLnRvU3RyaW5nKCl9LiBUcnkgZGVjb2Rpbmcgd2l0aCBcIm1peGVkXCIgb3IgXCJzYWZlXCIgZGVjb2RpbmdNb2RlLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBOdW1iZXIobnVtKTtcbiAgICB9XG4gICAgaWYgKGRlY29kaW5nTW9kZSA9PT0gJ21peGVkJyAmJiAhaXNCaWcpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihudW0pO1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xufVxuZXhwb3J0cy5kZWNvZGVVaW50NjQgPSBkZWNvZGVVaW50NjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11aW50NjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/encoding/uint64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/group.js":
/*!************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/group.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assignGroupID = exports.computeGroupID = exports.TxGroup = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst txnBuilder = __importStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst ALGORAND_MAX_TX_GROUP_SIZE = 16;\n/**\n * Aux class for group id calculation of a group of transactions\n */\nclass TxGroup {\n    constructor(hashes) {\n        this.name = 'Transaction group';\n        this.tag = buffer_1.Buffer.from('TG');\n        if (hashes.length > ALGORAND_MAX_TX_GROUP_SIZE) {\n            const errorMsg = `${hashes.length.toString()} transactions grouped together but max group size is ${ALGORAND_MAX_TX_GROUP_SIZE.toString()}`;\n            throw Error(errorMsg);\n        }\n        this.txGroupHashes = hashes;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const txgroup = {\n            txlist: this.txGroupHashes,\n        };\n        return txgroup;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txgroupForEnc) {\n        const txn = Object.create(this.prototype);\n        txn.name = 'Transaction group';\n        txn.tag = buffer_1.Buffer.from('TG');\n        txn.txGroupHashes = [];\n        for (const hash of txgroupForEnc.txlist) {\n            txn.txGroupHashes.push(buffer_1.Buffer.from(hash));\n        }\n        return txn;\n    }\n    toByte() {\n        return encoding.encode(this.get_obj_for_encoding());\n    }\n}\nexports.TxGroup = TxGroup;\n/**\n * computeGroupID returns group ID for a group of transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @returns Buffer\n */\nfunction computeGroupID(txns) {\n    const hashes = [];\n    for (const txn of txns) {\n        const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n        hashes.push(tx.rawTxID());\n    }\n    const txgroup = new TxGroup(hashes);\n    const bytes = txgroup.toByte();\n    const toBeHashed = buffer_1.Buffer.from(utils.concatArrays(txgroup.tag, bytes));\n    const gid = nacl.genericHash(toBeHashed);\n    return buffer_1.Buffer.from(gid);\n}\nexports.computeGroupID = computeGroupID;\n/**\n * assignGroupID assigns group id to a given list of unsigned transactions\n * @param txns - array of transactions (every element is a dict or Transaction)\n * @param from - optional sender address specifying which transaction return\n * @returns possible list of matching transactions\n */\nfunction assignGroupID(txns, from) {\n    const gid = computeGroupID(txns);\n    const result = [];\n    for (const txn of txns) {\n        const tx = txnBuilder.instantiateTxnIfNeeded(txn);\n        if (!from || address.encodeAddress(tx.from.publicKey) === from) {\n            tx.group = gid;\n            result.push(tx);\n        }\n    }\n    return result;\n}\nexports.assignGroupID = assignGroupID;\nexports[\"default\"] = TxGroup;\n//# sourceMappingURL=group.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9ncm91cC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsc0JBQXNCLEdBQUcsZUFBZTtBQUNoRSxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxnQ0FBZ0MsbUJBQU8sQ0FBQywyRUFBZTtBQUN2RCwwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBcUI7QUFDdkQsOEJBQThCLG1CQUFPLENBQUMsdUZBQXFCO0FBQzNELDZCQUE2QixtQkFBTyxDQUFDLHFGQUFvQjtBQUN6RCwyQkFBMkIsbUJBQU8sQ0FBQywyRUFBZTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMEJBQTBCLHNEQUFzRCxzQ0FBc0M7QUFDdEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9ncm91cC5qcz80OWYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2lnbkdyb3VwSUQgPSBleHBvcnRzLmNvbXB1dGVHcm91cElEID0gZXhwb3J0cy5UeEdyb3VwID0gdm9pZCAwO1xuY29uc3QgYnVmZmVyXzEgPSByZXF1aXJlKFwiYnVmZmVyXCIpO1xuY29uc3QgdHhuQnVpbGRlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvblwiKSk7XG5jb25zdCBuYWNsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL25hY2wvbmFjbFdyYXBwZXJzXCIpKTtcbmNvbnN0IGVuY29kaW5nID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuY29kaW5nL2VuY29kaW5nXCIpKTtcbmNvbnN0IGFkZHJlc3MgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RpbmcvYWRkcmVzc1wiKSk7XG5jb25zdCB1dGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlscy91dGlsc1wiKSk7XG5jb25zdCBBTEdPUkFORF9NQVhfVFhfR1JPVVBfU0laRSA9IDE2O1xuLyoqXG4gKiBBdXggY2xhc3MgZm9yIGdyb3VwIGlkIGNhbGN1bGF0aW9uIG9mIGEgZ3JvdXAgb2YgdHJhbnNhY3Rpb25zXG4gKi9cbmNsYXNzIFR4R3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKGhhc2hlcykge1xuICAgICAgICB0aGlzLm5hbWUgPSAnVHJhbnNhY3Rpb24gZ3JvdXAnO1xuICAgICAgICB0aGlzLnRhZyA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKCdURycpO1xuICAgICAgICBpZiAoaGFzaGVzLmxlbmd0aCA+IEFMR09SQU5EX01BWF9UWF9HUk9VUF9TSVpFKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1zZyA9IGAke2hhc2hlcy5sZW5ndGgudG9TdHJpbmcoKX0gdHJhbnNhY3Rpb25zIGdyb3VwZWQgdG9nZXRoZXIgYnV0IG1heCBncm91cCBzaXplIGlzICR7QUxHT1JBTkRfTUFYX1RYX0dST1VQX1NJWkUudG9TdHJpbmcoKX1gO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHhHcm91cEhhc2hlcyA9IGhhc2hlcztcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIGdldF9vYmpfZm9yX2VuY29kaW5nKCkge1xuICAgICAgICBjb25zdCB0eGdyb3VwID0ge1xuICAgICAgICAgICAgdHhsaXN0OiB0aGlzLnR4R3JvdXBIYXNoZXMsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0eGdyb3VwO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgc3RhdGljIGZyb21fb2JqX2Zvcl9lbmNvZGluZyh0eGdyb3VwRm9yRW5jKSB7XG4gICAgICAgIGNvbnN0IHR4biA9IE9iamVjdC5jcmVhdGUodGhpcy5wcm90b3R5cGUpO1xuICAgICAgICB0eG4ubmFtZSA9ICdUcmFuc2FjdGlvbiBncm91cCc7XG4gICAgICAgIHR4bi50YWcgPSBidWZmZXJfMS5CdWZmZXIuZnJvbSgnVEcnKTtcbiAgICAgICAgdHhuLnR4R3JvdXBIYXNoZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBoYXNoIG9mIHR4Z3JvdXBGb3JFbmMudHhsaXN0KSB7XG4gICAgICAgICAgICB0eG4udHhHcm91cEhhc2hlcy5wdXNoKGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGhhc2gpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHhuO1xuICAgIH1cbiAgICB0b0J5dGUoKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGluZy5lbmNvZGUodGhpcy5nZXRfb2JqX2Zvcl9lbmNvZGluZygpKTtcbiAgICB9XG59XG5leHBvcnRzLlR4R3JvdXAgPSBUeEdyb3VwO1xuLyoqXG4gKiBjb21wdXRlR3JvdXBJRCByZXR1cm5zIGdyb3VwIElEIGZvciBhIGdyb3VwIG9mIHRyYW5zYWN0aW9uc1xuICogQHBhcmFtIHR4bnMgLSBhcnJheSBvZiB0cmFuc2FjdGlvbnMgKGV2ZXJ5IGVsZW1lbnQgaXMgYSBkaWN0IG9yIFRyYW5zYWN0aW9uKVxuICogQHJldHVybnMgQnVmZmVyXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVHcm91cElEKHR4bnMpIHtcbiAgICBjb25zdCBoYXNoZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHR4biBvZiB0eG5zKSB7XG4gICAgICAgIGNvbnN0IHR4ID0gdHhuQnVpbGRlci5pbnN0YW50aWF0ZVR4bklmTmVlZGVkKHR4bik7XG4gICAgICAgIGhhc2hlcy5wdXNoKHR4LnJhd1R4SUQoKSk7XG4gICAgfVxuICAgIGNvbnN0IHR4Z3JvdXAgPSBuZXcgVHhHcm91cChoYXNoZXMpO1xuICAgIGNvbnN0IGJ5dGVzID0gdHhncm91cC50b0J5dGUoKTtcbiAgICBjb25zdCB0b0JlSGFzaGVkID0gYnVmZmVyXzEuQnVmZmVyLmZyb20odXRpbHMuY29uY2F0QXJyYXlzKHR4Z3JvdXAudGFnLCBieXRlcykpO1xuICAgIGNvbnN0IGdpZCA9IG5hY2wuZ2VuZXJpY0hhc2godG9CZUhhc2hlZCk7XG4gICAgcmV0dXJuIGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGdpZCk7XG59XG5leHBvcnRzLmNvbXB1dGVHcm91cElEID0gY29tcHV0ZUdyb3VwSUQ7XG4vKipcbiAqIGFzc2lnbkdyb3VwSUQgYXNzaWducyBncm91cCBpZCB0byBhIGdpdmVuIGxpc3Qgb2YgdW5zaWduZWQgdHJhbnNhY3Rpb25zXG4gKiBAcGFyYW0gdHhucyAtIGFycmF5IG9mIHRyYW5zYWN0aW9ucyAoZXZlcnkgZWxlbWVudCBpcyBhIGRpY3Qgb3IgVHJhbnNhY3Rpb24pXG4gKiBAcGFyYW0gZnJvbSAtIG9wdGlvbmFsIHNlbmRlciBhZGRyZXNzIHNwZWNpZnlpbmcgd2hpY2ggdHJhbnNhY3Rpb24gcmV0dXJuXG4gKiBAcmV0dXJucyBwb3NzaWJsZSBsaXN0IG9mIG1hdGNoaW5nIHRyYW5zYWN0aW9uc1xuICovXG5mdW5jdGlvbiBhc3NpZ25Hcm91cElEKHR4bnMsIGZyb20pIHtcbiAgICBjb25zdCBnaWQgPSBjb21wdXRlR3JvdXBJRCh0eG5zKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHR4biBvZiB0eG5zKSB7XG4gICAgICAgIGNvbnN0IHR4ID0gdHhuQnVpbGRlci5pbnN0YW50aWF0ZVR4bklmTmVlZGVkKHR4bik7XG4gICAgICAgIGlmICghZnJvbSB8fCBhZGRyZXNzLmVuY29kZUFkZHJlc3ModHguZnJvbS5wdWJsaWNLZXkpID09PSBmcm9tKSB7XG4gICAgICAgICAgICB0eC5ncm91cCA9IGdpZDtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHR4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5hc3NpZ25Hcm91cElEID0gYXNzaWduR3JvdXBJRDtcbmV4cG9ydHMuZGVmYXVsdCA9IFR4R3JvdXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncm91cC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/group.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/index.js":
/*!************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst algosdk = __importStar(__webpack_require__(/*! ./main */ \"(ssr)/./node_modules/algosdk/dist/cjs/main.js\"));\n__exportStar(__webpack_require__(/*! ./main */ \"(ssr)/./node_modules/algosdk/dist/cjs/main.js\"), exports);\nexports[\"default\"] = algosdk;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCLG1CQUFPLENBQUMsNkRBQVE7QUFDN0MsYUFBYSxtQkFBTyxDQUFDLDZEQUFRO0FBQzdCLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2luZGV4LmpzPzJiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhbGdvc2RrID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21haW5cIikpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21haW5cIiksIGV4cG9ydHMpO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWxnb3Nkaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/logic/sourcemap.js":
/*!**********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/logic/sourcemap.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SourceMap = void 0;\nconst vlq = __importStar(__webpack_require__(/*! vlq */ \"(ssr)/./node_modules/vlq/dist/index.cjs\"));\nclass SourceMap {\n    constructor({ version, sources, names, mappings, }) {\n        this.version = version;\n        this.sources = sources;\n        this.names = names;\n        this.mappings = mappings;\n        if (this.version !== 3)\n            throw new Error(`Only version 3 is supported, got ${this.version}`);\n        if (this.mappings === undefined)\n            throw new Error('mapping undefined, cannot build source map without `mapping`');\n        const pcList = this.mappings.split(';').map((m) => {\n            const decoded = vlq.decode(m);\n            if (decoded.length > 2)\n                return decoded[2];\n            return undefined;\n        });\n        this.pcToLine = {};\n        this.lineToPc = {};\n        let lastLine = 0;\n        for (const [pc, lineDelta] of pcList.entries()) {\n            // If the delta is not undefined, the lastLine should be updated with\n            // lastLine + the delta\n            if (lineDelta !== undefined) {\n                lastLine += lineDelta;\n            }\n            if (!(lastLine in this.lineToPc))\n                this.lineToPc[lastLine] = [];\n            this.lineToPc[lastLine].push(pc);\n            this.pcToLine[pc] = lastLine;\n        }\n    }\n    getLineForPc(pc) {\n        return this.pcToLine[pc];\n    }\n    getPcsForLine(line) {\n        return this.lineToPc[line];\n    }\n}\nexports.SourceMap = SourceMap;\n//# sourceMappingURL=sourcemap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9sb2dpYy9zb3VyY2VtYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQix5QkFBeUIsbUJBQU8sQ0FBQyxvREFBSztBQUN0QztBQUNBLGtCQUFrQixvQ0FBb0M7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxhQUFhO0FBQzdFO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL2xvZ2ljL3NvdXJjZW1hcC5qcz8wNTVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNvdXJjZU1hcCA9IHZvaWQgMDtcbmNvbnN0IHZscSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwidmxxXCIpKTtcbmNsYXNzIFNvdXJjZU1hcCB7XG4gICAgY29uc3RydWN0b3IoeyB2ZXJzaW9uLCBzb3VyY2VzLCBuYW1lcywgbWFwcGluZ3MsIH0pIHtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gc291cmNlcztcbiAgICAgICAgdGhpcy5uYW1lcyA9IG5hbWVzO1xuICAgICAgICB0aGlzLm1hcHBpbmdzID0gbWFwcGluZ3M7XG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IDMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgdmVyc2lvbiAzIGlzIHN1cHBvcnRlZCwgZ290ICR7dGhpcy52ZXJzaW9ufWApO1xuICAgICAgICBpZiAodGhpcy5tYXBwaW5ncyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXBwaW5nIHVuZGVmaW5lZCwgY2Fubm90IGJ1aWxkIHNvdXJjZSBtYXAgd2l0aG91dCBgbWFwcGluZ2AnKTtcbiAgICAgICAgY29uc3QgcGNMaXN0ID0gdGhpcy5tYXBwaW5ncy5zcGxpdCgnOycpLm1hcCgobSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVjb2RlZCA9IHZscS5kZWNvZGUobSk7XG4gICAgICAgICAgICBpZiAoZGVjb2RlZC5sZW5ndGggPiAyKVxuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVkWzJdO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucGNUb0xpbmUgPSB7fTtcbiAgICAgICAgdGhpcy5saW5lVG9QYyA9IHt9O1xuICAgICAgICBsZXQgbGFzdExpbmUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IFtwYywgbGluZURlbHRhXSBvZiBwY0xpc3QuZW50cmllcygpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsdGEgaXMgbm90IHVuZGVmaW5lZCwgdGhlIGxhc3RMaW5lIHNob3VsZCBiZSB1cGRhdGVkIHdpdGhcbiAgICAgICAgICAgIC8vIGxhc3RMaW5lICsgdGhlIGRlbHRhXG4gICAgICAgICAgICBpZiAobGluZURlbHRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsYXN0TGluZSArPSBsaW5lRGVsdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShsYXN0TGluZSBpbiB0aGlzLmxpbmVUb1BjKSlcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVUb1BjW2xhc3RMaW5lXSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5saW5lVG9QY1tsYXN0TGluZV0ucHVzaChwYyk7XG4gICAgICAgICAgICB0aGlzLnBjVG9MaW5lW3BjXSA9IGxhc3RMaW5lO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldExpbmVGb3JQYyhwYykge1xuICAgICAgICByZXR1cm4gdGhpcy5wY1RvTGluZVtwY107XG4gICAgfVxuICAgIGdldFBjc0ZvckxpbmUobGluZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5saW5lVG9QY1tsaW5lXTtcbiAgICB9XG59XG5leHBvcnRzLlNvdXJjZU1hcCA9IFNvdXJjZU1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvdXJjZW1hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/logic/sourcemap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/logicsig.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/logicsig.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.tealSignFromProgram = exports.verifyTealSign = exports.tealSign = exports.logicSigFromByte = exports.signLogicSigTransaction = exports.signLogicSigTransactionObject = exports.LogicSigAccount = exports.LogicSig = exports.sanityCheckProgram = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst multisig_1 = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/algosdk/dist/cjs/multisig.js\");\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst txnBuilder = __importStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nconst address_1 = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\");\n/** sanityCheckProgram performs heuristic program validation:\n * check if passed in bytes are Algorand address or is B64 encoded, rather than Teal bytes\n *\n * @param program - Program bytes to check\n */\nfunction sanityCheckProgram(program) {\n    if (!program || program.length === 0)\n        throw new Error('empty program');\n    const lineBreakOrd = '\\n'.charCodeAt(0);\n    const blankSpaceOrd = ' '.charCodeAt(0);\n    const tildeOrd = '~'.charCodeAt(0);\n    const isPrintable = (x) => blankSpaceOrd <= x && x <= tildeOrd;\n    const isAsciiPrintable = program.every((x) => x === lineBreakOrd || isPrintable(x));\n    if (isAsciiPrintable) {\n        const programStr = buffer_1.Buffer.from(program).toString();\n        if ((0, address_1.isValidAddress)(programStr))\n            throw new Error('requesting program bytes, get Algorand address');\n        if (buffer_1.Buffer.from(programStr, 'base64').toString('base64') === programStr)\n            throw new Error('program should not be b64 encoded');\n        throw new Error('program bytes are all ASCII printable characters, not looking like Teal byte code');\n    }\n}\nexports.sanityCheckProgram = sanityCheckProgram;\n/**\n LogicSig implementation\n\n LogicSig cannot sign transactions in all cases.  Instead, use LogicSigAccount as a safe, general purpose signing mechanism.  Since LogicSig does not track the provided signature's public key, LogicSig cannot sign transactions when delegated to a non-multisig account _and_ the sender is not the delegating account.\n */\nclass LogicSig {\n    constructor(program, programArgs) {\n        this.tag = buffer_1.Buffer.from('Program');\n        if (programArgs &&\n            (!Array.isArray(programArgs) ||\n                !programArgs.every((arg) => arg.constructor === Uint8Array || buffer_1.Buffer.isBuffer(arg)))) {\n            throw new TypeError('Invalid arguments');\n        }\n        let args;\n        if (programArgs != null)\n            args = programArgs.map((arg) => new Uint8Array(arg));\n        sanityCheckProgram(program);\n        this.logic = program;\n        this.args = args;\n        this.sig = undefined;\n        this.msig = undefined;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const obj = {\n            l: this.logic,\n        };\n        if (this.args) {\n            obj.arg = this.args;\n        }\n        if (this.sig) {\n            obj.sig = this.sig;\n        }\n        else if (this.msig) {\n            obj.msig = this.msig;\n        }\n        return obj;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(encoded) {\n        const lsig = new LogicSig(encoded.l, encoded.arg);\n        lsig.sig = encoded.sig;\n        lsig.msig = encoded.msig;\n        return lsig;\n    }\n    /**\n     * Performs signature verification\n     * @param publicKey - Verification key (derived from sender address or escrow address)\n     */\n    verify(publicKey) {\n        if (this.sig && this.msig) {\n            return false;\n        }\n        try {\n            sanityCheckProgram(this.logic);\n        }\n        catch (e) {\n            return false;\n        }\n        const toBeSigned = utils.concatArrays(this.tag, this.logic);\n        if (!this.sig && !this.msig) {\n            const hash = nacl.genericHash(toBeSigned);\n            return utils.arrayEqual(hash, publicKey);\n        }\n        if (this.sig) {\n            return nacl.verify(toBeSigned, this.sig, publicKey);\n        }\n        return (0, multisig_1.verifyMultisig)(toBeSigned, this.msig, publicKey);\n    }\n    /**\n     * Compute hash of the logic sig program (that is the same as escrow account address) as string address\n     * @returns String representation of the address\n     */\n    address() {\n        const toBeSigned = utils.concatArrays(this.tag, this.logic);\n        const hash = nacl.genericHash(toBeSigned);\n        return address.encodeAddress(new Uint8Array(hash));\n    }\n    /**\n     * Creates signature (if no msig provided) or multi signature otherwise\n     * @param secretKey - Secret key to sign with\n     * @param msig - Multisig account as \\{version, threshold, addrs\\}\n     */\n    sign(secretKey, msig) {\n        if (msig == null) {\n            this.sig = this.signProgram(secretKey);\n        }\n        else {\n            const subsigs = msig.addrs.map((addr) => ({\n                pk: address.decodeAddress(addr).publicKey,\n            }));\n            this.msig = {\n                v: msig.version,\n                thr: msig.threshold,\n                subsig: subsigs,\n            };\n            const [sig, index] = this.singleSignMultisig(secretKey, this.msig);\n            this.msig.subsig[index].s = sig;\n        }\n    }\n    /**\n     * Appends a signature to multi signature\n     * @param secretKey - Secret key to sign with\n     */\n    appendToMultisig(secretKey) {\n        if (this.msig === undefined) {\n            throw new Error('no multisig present');\n        }\n        const [sig, index] = this.singleSignMultisig(secretKey, this.msig);\n        this.msig.subsig[index].s = sig;\n    }\n    signProgram(secretKey) {\n        const toBeSigned = utils.concatArrays(this.tag, this.logic);\n        const sig = nacl.sign(toBeSigned, secretKey);\n        return sig;\n    }\n    singleSignMultisig(secretKey, msig) {\n        let index = -1;\n        const myPk = nacl.keyPairFromSecretKey(secretKey).publicKey;\n        for (let i = 0; i < msig.subsig.length; i++) {\n            const { pk } = msig.subsig[i];\n            if (utils.arrayEqual(pk, myPk)) {\n                index = i;\n                break;\n            }\n        }\n        if (index === -1) {\n            throw new Error('invalid secret key');\n        }\n        const sig = this.signProgram(secretKey);\n        return [sig, index];\n    }\n    toByte() {\n        return encoding.encode(this.get_obj_for_encoding());\n    }\n    static fromByte(encoded) {\n        const decodedObj = encoding.decode(encoded);\n        return LogicSig.from_obj_for_encoding(decodedObj);\n    }\n}\nexports.LogicSig = LogicSig;\n/**\n * Represents an account that can sign with a LogicSig program.\n */\nclass LogicSigAccount {\n    /**\n     * Create a new LogicSigAccount. By default this will create an escrow\n     * LogicSig account. Call `sign` or `signMultisig` on the newly created\n     * LogicSigAccount to make it a delegated account.\n     *\n     * @param program - The compiled TEAL program which contains the logic for\n     *   this LogicSig.\n     * @param args - An optional array of arguments for the program.\n     */\n    constructor(program, args) {\n        this.lsig = new LogicSig(program, args);\n        this.sigkey = undefined;\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        const obj = {\n            lsig: this.lsig.get_obj_for_encoding(),\n        };\n        if (this.sigkey) {\n            obj.sigkey = this.sigkey;\n        }\n        return obj;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(encoded) {\n        const lsigAccount = new LogicSigAccount(encoded.lsig.l, encoded.lsig.arg);\n        lsigAccount.lsig = LogicSig.from_obj_for_encoding(encoded.lsig);\n        lsigAccount.sigkey = encoded.sigkey;\n        return lsigAccount;\n    }\n    /**\n     * Encode this object into msgpack.\n     */\n    toByte() {\n        return encoding.encode(this.get_obj_for_encoding());\n    }\n    /**\n     * Decode a msgpack object into a LogicSigAccount.\n     * @param encoded - The encoded LogicSigAccount.\n     */\n    static fromByte(encoded) {\n        const decodedObj = encoding.decode(encoded);\n        return LogicSigAccount.from_obj_for_encoding(decodedObj);\n    }\n    /**\n     * Check if this LogicSigAccount has been delegated to another account with a\n     * signature.\n     *\n     * Note this function only checks for the presence of a delegation signature.\n     * To verify the delegation signature, use `verify`.\n     */\n    isDelegated() {\n        return !!(this.lsig.sig || this.lsig.msig);\n    }\n    /**\n     * Verifies this LogicSig's program and signatures.\n     * @returns true if and only if the LogicSig program and signatures are valid.\n     */\n    verify() {\n        const addr = this.address();\n        return this.lsig.verify(address.decodeAddress(addr).publicKey);\n    }\n    /**\n     * Get the address of this LogicSigAccount.\n     *\n     * If the LogicSig is delegated to another account, this will return the\n     * address of that account.\n     *\n     * If the LogicSig is not delegated to another account, this will return an\n     *  escrow address that is the hash of the LogicSig's program code.\n     */\n    address() {\n        if (this.lsig.sig && this.lsig.msig) {\n            throw new Error('LogicSig has too many signatures. At most one of sig or msig may be present');\n        }\n        if (this.lsig.sig) {\n            if (!this.sigkey) {\n                throw new Error('Signing key for delegated account is missing');\n            }\n            return address.encodeAddress(this.sigkey);\n        }\n        if (this.lsig.msig) {\n            const msigMetadata = {\n                version: this.lsig.msig.v,\n                threshold: this.lsig.msig.thr,\n                pks: this.lsig.msig.subsig.map((subsig) => subsig.pk),\n            };\n            return address.encodeAddress(address.fromMultisigPreImg(msigMetadata));\n        }\n        return this.lsig.address();\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. Use this function if the delegating account is a\n     * multisig account.\n     *\n     * @param msig - The multisig delegating account\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account. Use `appendToMultisig` to add additional signatures\n     *   from other members.\n     */\n    signMultisig(msig, secretKey) {\n        this.lsig.sign(secretKey, msig);\n    }\n    /**\n     * Adds an additional signature from a member of the delegating multisig\n     * account.\n     *\n     * @param secretKey - The secret key of one of the members of the delegating\n     *   multisig account.\n     */\n    appendToMultisig(secretKey) {\n        this.lsig.appendToMultisig(secretKey);\n    }\n    /**\n     * Turns this LogicSigAccount into a delegated LogicSig. This type of LogicSig\n     * has the authority to sign transactions on behalf of another account, called\n     * the delegating account. If the delegating account is a multisig account,\n     * use `signMultisig` instead.\n     *\n     * @param secretKey - The secret key of the delegating account.\n     */\n    sign(secretKey) {\n        this.lsig.sign(secretKey);\n        this.sigkey = nacl.keyPairFromSecretKey(secretKey).publicKey;\n    }\n}\nexports.LogicSigAccount = LogicSigAccount;\nfunction signLogicSigTransactionWithAddress(txn, lsig, lsigAddress) {\n    if (!lsig.verify(lsigAddress)) {\n        throw new Error('Logic signature verification failed. Ensure the program and signature are valid.');\n    }\n    const signedTxn = {\n        lsig: lsig.get_obj_for_encoding(),\n        txn: txn.get_obj_for_encoding(),\n    };\n    if (!nacl.bytesEqual(lsigAddress, txn.from.publicKey)) {\n        signedTxn.sgnr = buffer_1.Buffer.from(lsigAddress);\n    }\n    return {\n        txID: txn.txID().toString(),\n        blob: encoding.encode(signedTxn),\n    };\n}\n/**\n * signLogicSigTransactionObject takes a transaction and a LogicSig object and\n * returns a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n */\nfunction signLogicSigTransactionObject(txn, lsigObject) {\n    let lsig;\n    let lsigAddress;\n    if (lsigObject instanceof LogicSigAccount) {\n        lsig = lsigObject.lsig;\n        lsigAddress = address.decodeAddress(lsigObject.address()).publicKey;\n    }\n    else {\n        lsig = lsigObject;\n        if (lsig.sig) {\n            // For a LogicSig with a non-multisig delegating account, we cannot derive\n            // the address of that account from only its signature, so assume the\n            // delegating account is the sender. If that's not the case, the signing\n            // will fail.\n            lsigAddress = txn.from.publicKey;\n        }\n        else if (lsig.msig) {\n            const msigMetadata = {\n                version: lsig.msig.v,\n                threshold: lsig.msig.thr,\n                pks: lsig.msig.subsig.map((subsig) => subsig.pk),\n            };\n            lsigAddress = address.fromMultisigPreImg(msigMetadata);\n        }\n        else {\n            lsigAddress = address.decodeAddress(lsig.address()).publicKey;\n        }\n    }\n    return signLogicSigTransactionWithAddress(txn, lsig, lsigAddress);\n}\nexports.signLogicSigTransactionObject = signLogicSigTransactionObject;\n/**\n * signLogicSigTransaction takes a transaction and a LogicSig object and returns\n * a signed transaction.\n *\n * @param txn - The transaction to sign.\n * @param lsigObject - The LogicSig object that will sign the transaction.\n *\n * @returns Object containing txID and blob representing signed transaction.\n * @throws error on failure\n */\nfunction signLogicSigTransaction(txn, lsigObject) {\n    const algoTxn = txnBuilder.instantiateTxnIfNeeded(txn);\n    return signLogicSigTransactionObject(algoTxn, lsigObject);\n}\nexports.signLogicSigTransaction = signLogicSigTransaction;\n/**\n * logicSigFromByte accepts encoded logic sig bytes and attempts to call logicsig.fromByte on it,\n * returning the result\n */\nfunction logicSigFromByte(encoded) {\n    return LogicSig.fromByte(encoded);\n}\nexports.logicSigFromByte = logicSigFromByte;\nconst SIGN_PROGRAM_DATA_PREFIX = buffer_1.Buffer.from('ProgData');\n/**\n * tealSign creates a signature compatible with ed25519verify opcode from program hash\n * @param sk - uint8array with secret key\n * @param data - buffer with data to sign\n * @param programHash - string representation of teal program hash (= contract address for LogicSigs)\n */\nfunction tealSign(sk, data, programHash) {\n    const parts = utils.concatArrays(address.decodeAddress(programHash).publicKey, data);\n    const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts));\n    return nacl.sign(toBeSigned, sk);\n}\nexports.tealSign = tealSign;\n/**\n * verifyTealSign verifies a signature as would the ed25519verify opcode\n * @param data - buffer with original signed data\n * @param programHash - string representation of teal program hash (= contract address for LogicSigs)\n * @param sig - uint8array with the signature to verify (produced by tealSign/tealSignFromProgram)\n * @param pk - uint8array with public key to verify against\n */\nfunction verifyTealSign(data, programHash, sig, pk) {\n    const parts = utils.concatArrays(address.decodeAddress(programHash).publicKey, data);\n    const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_PROGRAM_DATA_PREFIX, parts));\n    return nacl.verify(toBeSigned, sig, pk);\n}\nexports.verifyTealSign = verifyTealSign;\n/**\n * tealSignFromProgram creates a signature compatible with ed25519verify opcode from raw program bytes\n * @param sk - uint8array with secret key\n * @param data - buffer with data to sign\n * @param program - buffer with teal program\n */\nfunction tealSignFromProgram(sk, data, program) {\n    const lsig = new LogicSig(program);\n    const contractAddress = lsig.address();\n    return tealSign(sk, data, contractAddress);\n}\nexports.tealSignFromProgram = tealSignFromProgram;\n//# sourceMappingURL=logicsig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/logicsig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/main.js":
/*!***********************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/main.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.verifyMultisig = exports.appendSignRawMultisigSignature = exports.createMultisigTransaction = exports.appendSignMultisigTransaction = exports.mergeMultisigTransactions = exports.signMultisigTransaction = exports.verifyTealSign = exports.tealSignFromProgram = exports.tealSign = exports.logicSigFromByte = exports.signLogicSigTransactionObject = exports.signLogicSigTransaction = exports.LogicSigAccount = exports.LogicSig = exports.assignGroupID = exports.computeGroupID = exports.INVALID_MICROALGOS_ERROR_MSG = exports.algosToMicroalgos = exports.microalgosToAlgos = exports.mnemonicFromSeed = exports.seedFromMnemonic = exports.mnemonicToSecretKey = exports.secretKeyToMnemonic = exports.masterDerivationKeyToMnemonic = exports.mnemonicToMasterDerivationKey = exports.indexerModels = exports.modelsv2 = exports.generateAccount = exports.decodeUint64 = exports.encodeUint64 = exports.bigIntToBytes = exports.bytesToBigInt = exports.getApplicationAddress = exports.decodeAddress = exports.encodeAddress = exports.isValidAddress = exports.waitForConfirmation = exports.Indexer = exports.IntDecoding = exports.Kmd = exports.Algodv2 = exports.ERROR_INVALID_MICROALGOS = exports.ERROR_MULTISIG_BAD_SENDER = exports.decodeObj = exports.encodeObj = exports.verifyBytes = exports.signBytes = exports.signBid = exports.signTransaction = exports.MULTISIG_BAD_SENDER_ERROR_MSG = void 0;\nexports.SourceMap = exports.multisigAddress = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst txnBuilder = __importStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nconst bid_1 = __importDefault(__webpack_require__(/*! ./bid */ \"(ssr)/./node_modules/algosdk/dist/cjs/bid.js\"));\nconst convert = __importStar(__webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/algosdk/dist/cjs/convert.js\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst SIGN_BYTES_PREFIX = buffer_1.Buffer.from([77, 88]); // \"MX\"\n// Errors\nexports.MULTISIG_BAD_SENDER_ERROR_MSG = 'The transaction sender address and multisig preimage do not match.';\n/**\n * signTransaction takes an object with either payment or key registration fields and\n * a secret key and returns a signed blob.\n *\n * Payment transaction fields: from, to, amount, fee, firstRound, lastRound, genesisHash,\n * note(optional), GenesisID(optional), closeRemainderTo(optional)\n *\n * Key registration fields: fee, firstRound, lastRound, voteKey, selectionKey, voteFirst,\n * voteLast, voteKeyDilution, genesisHash, note(optional), GenesisID(optional)\n *\n * If flatFee is not set and the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param txn - object with either payment or key registration fields\n * @param sk - Algorand Secret Key\n * @returns object contains the binary signed transaction and its txID\n */\nfunction signTransaction(txn, sk) {\n    if (typeof txn.from === 'undefined') {\n        // Get pk from sk if no sender specified\n        const key = nacl.keyPairFromSecretKey(sk);\n        // eslint-disable-next-line no-param-reassign\n        txn.from = address.encodeAddress(key.publicKey);\n    }\n    const algoTxn = txnBuilder.instantiateTxnIfNeeded(txn);\n    return {\n        txID: algoTxn.txID().toString(),\n        blob: algoTxn.signTxn(sk),\n    };\n}\nexports.signTransaction = signTransaction;\n/**\n * signBid takes an object with the following fields: bidder key, bid amount, max price, bid ID, auctionKey, auction ID,\n * and a secret key and returns a signed blob to be inserted into a transaction Algorand note field.\n * @param bid - Algorand Bid\n * @param sk - Algorand secret key\n * @returns Uint8Array binary signed bid\n */\nfunction signBid(bid, sk) {\n    const signedBid = new bid_1.default(bid);\n    return signedBid.signBid(sk);\n}\nexports.signBid = signBid;\n/**\n * signBytes takes arbitrary bytes and a secret key, prepends the bytes with \"MX\" for domain separation, signs the bytes\n * with the private key, and returns the signature.\n * @param bytes - Uint8array\n * @param sk - Algorand secret key\n * @returns binary signature\n */\nfunction signBytes(bytes, sk) {\n    const toBeSigned = buffer_1.Buffer.from(utils.concatArrays(SIGN_BYTES_PREFIX, bytes));\n    const sig = nacl.sign(toBeSigned, sk);\n    return sig;\n}\nexports.signBytes = signBytes;\n/**\n * verifyBytes takes array of bytes, an address, and a signature and verifies if the signature is correct for the public\n * key and the bytes (the bytes should have been signed with \"MX\" prepended for domain separation).\n * @param bytes - Uint8Array\n * @param signature - binary signature\n * @param addr - string address\n * @returns bool\n */\nfunction verifyBytes(bytes, signature, addr) {\n    const toBeVerified = buffer_1.Buffer.from(utils.concatArrays(SIGN_BYTES_PREFIX, bytes));\n    const pk = address.decodeAddress(addr).publicKey;\n    return nacl.verify(toBeVerified, signature, pk);\n}\nexports.verifyBytes = verifyBytes;\n/**\n * encodeObj takes a javascript object and returns its msgpack encoding\n * Note that the encoding sorts the fields alphabetically\n * @param o - js obj\n * @returns Uint8Array binary representation\n */\nfunction encodeObj(o) {\n    return new Uint8Array(encoding.encode(o));\n}\nexports.encodeObj = encodeObj;\n/**\n * decodeObj takes a Uint8Array and returns its javascript obj\n * @param o - Uint8Array to decode\n * @returns object\n */\nfunction decodeObj(o) {\n    return encoding.decode(o);\n}\nexports.decodeObj = decodeObj;\nexports.ERROR_MULTISIG_BAD_SENDER = new Error(exports.MULTISIG_BAD_SENDER_ERROR_MSG);\nexports.ERROR_INVALID_MICROALGOS = new Error(convert.INVALID_MICROALGOS_ERROR_MSG);\nvar algod_1 = __webpack_require__(/*! ./client/v2/algod/algod */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/algod.js\");\nObject.defineProperty(exports, \"Algodv2\", ({ enumerable: true, get: function () { return __importDefault(algod_1).default; } }));\nvar kmd_1 = __webpack_require__(/*! ./client/kmd */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/kmd.js\");\nObject.defineProperty(exports, \"Kmd\", ({ enumerable: true, get: function () { return __importDefault(kmd_1).default; } }));\nvar intDecoding_1 = __webpack_require__(/*! ./types/intDecoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js\");\nObject.defineProperty(exports, \"IntDecoding\", ({ enumerable: true, get: function () { return __importDefault(intDecoding_1).default; } }));\nvar indexer_1 = __webpack_require__(/*! ./client/v2/indexer/indexer */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/indexer.js\");\nObject.defineProperty(exports, \"Indexer\", ({ enumerable: true, get: function () { return __importDefault(indexer_1).default; } }));\nvar wait_1 = __webpack_require__(/*! ./wait */ \"(ssr)/./node_modules/algosdk/dist/cjs/wait.js\");\nObject.defineProperty(exports, \"waitForConfirmation\", ({ enumerable: true, get: function () { return wait_1.waitForConfirmation; } }));\nvar address_1 = __webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\");\nObject.defineProperty(exports, \"isValidAddress\", ({ enumerable: true, get: function () { return address_1.isValidAddress; } }));\nObject.defineProperty(exports, \"encodeAddress\", ({ enumerable: true, get: function () { return address_1.encodeAddress; } }));\nObject.defineProperty(exports, \"decodeAddress\", ({ enumerable: true, get: function () { return address_1.decodeAddress; } }));\nObject.defineProperty(exports, \"getApplicationAddress\", ({ enumerable: true, get: function () { return address_1.getApplicationAddress; } }));\nvar bigint_1 = __webpack_require__(/*! ./encoding/bigint */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/bigint.js\");\nObject.defineProperty(exports, \"bytesToBigInt\", ({ enumerable: true, get: function () { return bigint_1.bytesToBigInt; } }));\nObject.defineProperty(exports, \"bigIntToBytes\", ({ enumerable: true, get: function () { return bigint_1.bigIntToBytes; } }));\nvar uint64_1 = __webpack_require__(/*! ./encoding/uint64 */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/uint64.js\");\nObject.defineProperty(exports, \"encodeUint64\", ({ enumerable: true, get: function () { return uint64_1.encodeUint64; } }));\nObject.defineProperty(exports, \"decodeUint64\", ({ enumerable: true, get: function () { return uint64_1.decodeUint64; } }));\nvar account_1 = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/algosdk/dist/cjs/account.js\");\nObject.defineProperty(exports, \"generateAccount\", ({ enumerable: true, get: function () { return __importDefault(account_1).default; } }));\nexports.modelsv2 = __importStar(__webpack_require__(/*! ./client/v2/algod/models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/algod/models/types.js\"));\nexports.indexerModels = __importStar(__webpack_require__(/*! ./client/v2/indexer/models/types */ \"(ssr)/./node_modules/algosdk/dist/cjs/client/v2/indexer/models/types.js\"));\nvar mnemonic_1 = __webpack_require__(/*! ./mnemonic/mnemonic */ \"(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js\");\nObject.defineProperty(exports, \"mnemonicToMasterDerivationKey\", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToMasterDerivationKey; } }));\nObject.defineProperty(exports, \"masterDerivationKeyToMnemonic\", ({ enumerable: true, get: function () { return mnemonic_1.masterDerivationKeyToMnemonic; } }));\nObject.defineProperty(exports, \"secretKeyToMnemonic\", ({ enumerable: true, get: function () { return mnemonic_1.secretKeyToMnemonic; } }));\nObject.defineProperty(exports, \"mnemonicToSecretKey\", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicToSecretKey; } }));\nObject.defineProperty(exports, \"seedFromMnemonic\", ({ enumerable: true, get: function () { return mnemonic_1.seedFromMnemonic; } }));\nObject.defineProperty(exports, \"mnemonicFromSeed\", ({ enumerable: true, get: function () { return mnemonic_1.mnemonicFromSeed; } }));\nvar convert_1 = __webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/algosdk/dist/cjs/convert.js\");\nObject.defineProperty(exports, \"microalgosToAlgos\", ({ enumerable: true, get: function () { return convert_1.microalgosToAlgos; } }));\nObject.defineProperty(exports, \"algosToMicroalgos\", ({ enumerable: true, get: function () { return convert_1.algosToMicroalgos; } }));\nObject.defineProperty(exports, \"INVALID_MICROALGOS_ERROR_MSG\", ({ enumerable: true, get: function () { return convert_1.INVALID_MICROALGOS_ERROR_MSG; } }));\nvar group_1 = __webpack_require__(/*! ./group */ \"(ssr)/./node_modules/algosdk/dist/cjs/group.js\");\nObject.defineProperty(exports, \"computeGroupID\", ({ enumerable: true, get: function () { return group_1.computeGroupID; } }));\nObject.defineProperty(exports, \"assignGroupID\", ({ enumerable: true, get: function () { return group_1.assignGroupID; } }));\nvar logicsig_1 = __webpack_require__(/*! ./logicsig */ \"(ssr)/./node_modules/algosdk/dist/cjs/logicsig.js\");\nObject.defineProperty(exports, \"LogicSig\", ({ enumerable: true, get: function () { return logicsig_1.LogicSig; } }));\nObject.defineProperty(exports, \"LogicSigAccount\", ({ enumerable: true, get: function () { return logicsig_1.LogicSigAccount; } }));\nObject.defineProperty(exports, \"signLogicSigTransaction\", ({ enumerable: true, get: function () { return logicsig_1.signLogicSigTransaction; } }));\nObject.defineProperty(exports, \"signLogicSigTransactionObject\", ({ enumerable: true, get: function () { return logicsig_1.signLogicSigTransactionObject; } }));\nObject.defineProperty(exports, \"logicSigFromByte\", ({ enumerable: true, get: function () { return logicsig_1.logicSigFromByte; } }));\nObject.defineProperty(exports, \"tealSign\", ({ enumerable: true, get: function () { return logicsig_1.tealSign; } }));\nObject.defineProperty(exports, \"tealSignFromProgram\", ({ enumerable: true, get: function () { return logicsig_1.tealSignFromProgram; } }));\nObject.defineProperty(exports, \"verifyTealSign\", ({ enumerable: true, get: function () { return logicsig_1.verifyTealSign; } }));\nvar multisig_1 = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/algosdk/dist/cjs/multisig.js\");\nObject.defineProperty(exports, \"signMultisigTransaction\", ({ enumerable: true, get: function () { return multisig_1.signMultisigTransaction; } }));\nObject.defineProperty(exports, \"mergeMultisigTransactions\", ({ enumerable: true, get: function () { return multisig_1.mergeMultisigTransactions; } }));\nObject.defineProperty(exports, \"appendSignMultisigTransaction\", ({ enumerable: true, get: function () { return multisig_1.appendSignMultisigTransaction; } }));\nObject.defineProperty(exports, \"createMultisigTransaction\", ({ enumerable: true, get: function () { return multisig_1.createMultisigTransaction; } }));\nObject.defineProperty(exports, \"appendSignRawMultisigSignature\", ({ enumerable: true, get: function () { return multisig_1.appendSignRawMultisigSignature; } }));\nObject.defineProperty(exports, \"verifyMultisig\", ({ enumerable: true, get: function () { return multisig_1.verifyMultisig; } }));\nObject.defineProperty(exports, \"multisigAddress\", ({ enumerable: true, get: function () { return multisig_1.multisigAddress; } }));\nvar sourcemap_1 = __webpack_require__(/*! ./logic/sourcemap */ \"(ssr)/./node_modules/algosdk/dist/cjs/logic/sourcemap.js\");\nObject.defineProperty(exports, \"SourceMap\", ({ enumerable: true, get: function () { return sourcemap_1.SourceMap; } }));\n__exportStar(__webpack_require__(/*! ./dryrun */ \"(ssr)/./node_modules/algosdk/dist/cjs/dryrun.js\"), exports);\n__exportStar(__webpack_require__(/*! ./makeTxn */ \"(ssr)/./node_modules/algosdk/dist/cjs/makeTxn.js\"), exports);\n__exportStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"), exports);\n__exportStar(__webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/algosdk/dist/cjs/signer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./composer */ \"(ssr)/./node_modules/algosdk/dist/cjs/composer.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./abi */ \"(ssr)/./node_modules/algosdk/dist/cjs/abi/index.js\"), exports);\n//# sourceMappingURL=main.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/makeTxn.js":
/*!**************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/makeTxn.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeApplicationCallTxnFromObject = exports.OnApplicationComplete = exports.makeApplicationNoOpTxnFromObject = exports.makeApplicationNoOpTxn = exports.makeApplicationClearStateTxnFromObject = exports.makeApplicationClearStateTxn = exports.makeApplicationCloseOutTxnFromObject = exports.makeApplicationCloseOutTxn = exports.makeApplicationOptInTxnFromObject = exports.makeApplicationOptInTxn = exports.makeApplicationDeleteTxnFromObject = exports.makeApplicationDeleteTxn = exports.makeApplicationUpdateTxnFromObject = exports.makeApplicationUpdateTxn = exports.makeApplicationCreateTxnFromObject = exports.makeApplicationCreateTxn = exports.makeAssetTransferTxnWithSuggestedParamsFromObject = exports.makeAssetTransferTxnWithSuggestedParams = exports.makeAssetFreezeTxnWithSuggestedParamsFromObject = exports.makeAssetFreezeTxnWithSuggestedParams = exports.makeAssetDestroyTxnWithSuggestedParamsFromObject = exports.makeAssetDestroyTxnWithSuggestedParams = exports.makeAssetConfigTxnWithSuggestedParamsFromObject = exports.makeAssetConfigTxnWithSuggestedParams = exports.makeAssetCreateTxnWithSuggestedParamsFromObject = exports.makeAssetCreateTxnWithSuggestedParams = exports.makeKeyRegistrationTxnWithSuggestedParamsFromObject = exports.makeKeyRegistrationTxnWithSuggestedParams = exports.makePaymentTxnWithSuggestedParamsFromObject = exports.makePaymentTxnWithSuggestedParams = void 0;\nconst txnBuilder = __importStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nconst base_1 = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\");\nconst transactions_1 = __webpack_require__(/*! ./types/transactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/index.js\");\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        to,\n        amount,\n        closeRemainderTo,\n        note,\n        suggestedParams,\n        type: transactions_1.TransactionType.pay,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makePaymentTxnWithSuggestedParams = makePaymentTxnWithSuggestedParams;\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n    return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nexports.makePaymentTxnWithSuggestedParamsFromObject = makePaymentTxnWithSuggestedParamsFromObject;\nfunction makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation = false, stateProofKey = undefined) {\n    const o = {\n        from,\n        note,\n        voteKey,\n        selectionKey,\n        voteFirst,\n        voteLast,\n        voteKeyDilution,\n        suggestedParams,\n        type: transactions_1.TransactionType.keyreg,\n        reKeyTo: rekeyTo,\n        nonParticipation,\n        stateProofKey,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeKeyRegistrationTxnWithSuggestedParams = makeKeyRegistrationTxnWithSuggestedParams;\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n    return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\nexports.makeKeyRegistrationTxnWithSuggestedParamsFromObject = makeKeyRegistrationTxnWithSuggestedParamsFromObject;\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        note,\n        suggestedParams,\n        assetTotal: total,\n        assetDecimals: decimals,\n        assetDefaultFrozen: defaultFrozen,\n        assetUnitName: unitName,\n        assetName,\n        assetURL,\n        assetMetadataHash,\n        assetManager: manager,\n        assetReserve: reserve,\n        assetFreeze: freeze,\n        assetClawback: clawback,\n        type: transactions_1.TransactionType.acfg,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeAssetCreateTxnWithSuggestedParams = makeAssetCreateTxnWithSuggestedParams;\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\nexports.makeAssetCreateTxnWithSuggestedParamsFromObject = makeAssetCreateTxnWithSuggestedParamsFromObject;\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo) {\n    if (strictEmptyAddressChecking &&\n        (manager === undefined ||\n            reserve === undefined ||\n            freeze === undefined ||\n            clawback === undefined)) {\n        throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n    }\n    const o = {\n        from,\n        suggestedParams,\n        assetIndex,\n        assetManager: manager,\n        assetReserve: reserve,\n        assetFreeze: freeze,\n        assetClawback: clawback,\n        type: transactions_1.TransactionType.acfg,\n        note,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeAssetConfigTxnWithSuggestedParams = makeAssetConfigTxnWithSuggestedParams;\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\nexports.makeAssetConfigTxnWithSuggestedParamsFromObject = makeAssetConfigTxnWithSuggestedParamsFromObject;\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        suggestedParams,\n        assetIndex,\n        type: transactions_1.TransactionType.acfg,\n        note,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeAssetDestroyTxnWithSuggestedParams = makeAssetDestroyTxnWithSuggestedParams;\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\nexports.makeAssetDestroyTxnWithSuggestedParamsFromObject = makeAssetDestroyTxnWithSuggestedParamsFromObject;\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n    const o = {\n        from,\n        type: transactions_1.TransactionType.afrz,\n        freezeAccount: freezeTarget,\n        assetIndex,\n        freezeState,\n        note,\n        suggestedParams,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeAssetFreezeTxnWithSuggestedParams = makeAssetFreezeTxnWithSuggestedParams;\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\nexports.makeAssetFreezeTxnWithSuggestedParamsFromObject = makeAssetFreezeTxnWithSuggestedParamsFromObject;\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n */\nfunction makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n    const o = {\n        type: transactions_1.TransactionType.axfer,\n        from,\n        to,\n        amount,\n        suggestedParams,\n        assetIndex,\n        note,\n        assetRevocationTarget: revocationTarget,\n        closeRemainderTo,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeAssetTransferTxnWithSuggestedParams = makeAssetTransferTxnWithSuggestedParams;\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\nexports.makeAssetTransferTxnWithSuggestedParamsFromObject = makeAssetTransferTxnWithSuggestedParamsFromObject;\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param extraPages - integer extra pages of memory to rent on creation of application\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex: 0,\n        appOnComplete: onComplete,\n        appLocalInts: numLocalInts,\n        appLocalByteSlices: numLocalByteSlices,\n        appGlobalInts: numGlobalInts,\n        appGlobalByteSlices: numGlobalByteSlices,\n        appApprovalProgram: approvalProgram,\n        appClearProgram: clearProgram,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n        extraPages,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationCreateTxn = makeApplicationCreateTxn;\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nfunction makeApplicationCreateTxnFromObject(o) {\n    return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\nexports.makeApplicationCreateTxnFromObject = makeApplicationCreateTxnFromObject;\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appApprovalProgram: approvalProgram,\n        appOnComplete: base_1.OnApplicationComplete.UpdateApplicationOC,\n        appClearProgram: clearProgram,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationUpdateTxn = makeApplicationUpdateTxn;\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nfunction makeApplicationUpdateTxnFromObject(o) {\n    return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationUpdateTxnFromObject = makeApplicationUpdateTxnFromObject;\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: base_1.OnApplicationComplete.DeleteApplicationOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationDeleteTxn = makeApplicationDeleteTxn;\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nfunction makeApplicationDeleteTxnFromObject(o) {\n    return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationDeleteTxnFromObject = makeApplicationDeleteTxnFromObject;\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: base_1.OnApplicationComplete.OptInOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationOptInTxn = makeApplicationOptInTxn;\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nfunction makeApplicationOptInTxnFromObject(o) {\n    return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationOptInTxnFromObject = makeApplicationOptInTxnFromObject;\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: base_1.OnApplicationComplete.CloseOutOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationCloseOutTxn = makeApplicationCloseOutTxn;\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nfunction makeApplicationCloseOutTxnFromObject(o) {\n    return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationCloseOutTxnFromObject = makeApplicationCloseOutTxnFromObject;\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: base_1.OnApplicationComplete.ClearStateOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationClearStateTxn = makeApplicationClearStateTxn;\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nfunction makeApplicationClearStateTxnFromObject(o) {\n    return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationClearStateTxnFromObject = makeApplicationClearStateTxnFromObject;\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\n * @param note - Arbitrary data for sender to store\n * @param lease - Lease a transaction\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\n */\nfunction makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from,\n        suggestedParams,\n        appIndex,\n        appOnComplete: base_1.OnApplicationComplete.NoOpOC,\n        appArgs,\n        appAccounts: accounts,\n        appForeignApps: foreignApps,\n        appForeignAssets: foreignAssets,\n        boxes,\n        note,\n        lease,\n        reKeyTo: rekeyTo,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationNoOpTxn = makeApplicationNoOpTxn;\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nfunction makeApplicationNoOpTxnFromObject(o) {\n    return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexports.makeApplicationNoOpTxnFromObject = makeApplicationNoOpTxnFromObject;\nvar base_2 = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\");\nObject.defineProperty(exports, \"OnApplicationComplete\", ({ enumerable: true, get: function () { return base_2.OnApplicationComplete; } }));\n/**\n * Generic function for creating any application call transaction.\n */\nfunction makeApplicationCallTxnFromObject(options) {\n    const o = {\n        type: transactions_1.TransactionType.appl,\n        from: options.from,\n        suggestedParams: options.suggestedParams,\n        appIndex: options.appIndex,\n        appOnComplete: options.onComplete,\n        appLocalInts: options.numLocalInts,\n        appLocalByteSlices: options.numLocalByteSlices,\n        appGlobalInts: options.numGlobalInts,\n        appGlobalByteSlices: options.numGlobalByteSlices,\n        appApprovalProgram: options.approvalProgram,\n        appClearProgram: options.clearProgram,\n        appArgs: options.appArgs,\n        appAccounts: options.accounts,\n        appForeignApps: options.foreignApps,\n        appForeignAssets: options.foreignAssets,\n        boxes: options.boxes,\n        note: options.note,\n        lease: options.lease,\n        reKeyTo: options.rekeyTo,\n        extraPages: options.extraPages,\n    };\n    return new txnBuilder.Transaction(o);\n}\nexports.makeApplicationCallTxnFromObject = makeApplicationCallTxnFromObject;\n//# sourceMappingURL=makeTxn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/makeTxn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.masterDerivationKeyToMnemonic = exports.mnemonicToMasterDerivationKey = exports.secretKeyToMnemonic = exports.mnemonicToSecretKey = exports.seedFromMnemonic = exports.mnemonicFromSeed = exports.NOT_IN_WORDS_LIST_ERROR_MSG = exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = void 0;\n/* eslint-disable no-bitwise */\nconst english_1 = __importDefault(__webpack_require__(/*! ./wordlists/english */ \"(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js\"));\nconst nacl = __importStar(__webpack_require__(/*! ../nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst address = __importStar(__webpack_require__(/*! ../encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nexports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG = 'failed to decode mnemonic';\nexports.NOT_IN_WORDS_LIST_ERROR_MSG = 'the mnemonic contains a word that is not in the wordlist';\n// https://stackoverflow.com/a/51452614\nfunction toUint11Array(buffer8) {\n    const buffer11 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(octet) {\n        acc |= octet << accBits;\n        accBits += 8;\n        if (accBits >= 11) {\n            buffer11.push(acc & 0x7ff);\n            acc >>= 11;\n            accBits -= 11;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer11.push(acc);\n        }\n    }\n    buffer8.forEach(add);\n    flush();\n    return buffer11;\n}\nfunction applyWords(nums) {\n    return nums.map((n) => english_1.default[n]);\n}\nfunction computeChecksum(seed) {\n    const hashBuffer = nacl.genericHash(seed);\n    const uint11Hash = toUint11Array(hashBuffer);\n    const words = applyWords(uint11Hash);\n    return words[0];\n}\n/**\n * mnemonicFromSeed converts a 32-byte key into a 25 word mnemonic. The generated mnemonic includes a checksum.\n * Each word in the mnemonic represents 11 bits of data, and the last 11 bits are reserved for the checksum.\n * @param seed - 32 bytes long seed\n * @returns 25 words mnemonic\n */\nfunction mnemonicFromSeed(seed) {\n    // Sanity length check\n    if (seed.length !== nacl.SEED_BTYES_LENGTH) {\n        throw new RangeError(`Seed length must be ${nacl.SEED_BTYES_LENGTH}`);\n    }\n    const uint11Array = toUint11Array(seed);\n    const words = applyWords(uint11Array);\n    const checksumWord = computeChecksum(seed);\n    return `${words.join(' ')} ${checksumWord}`;\n}\nexports.mnemonicFromSeed = mnemonicFromSeed;\n// from Uint11Array\n// https://stackoverflow.com/a/51452614\nfunction toUint8Array(buffer11) {\n    const buffer8 = [];\n    let acc = 0;\n    let accBits = 0;\n    function add(ui11) {\n        acc |= ui11 << accBits;\n        accBits += 11;\n        while (accBits >= 8) {\n            buffer8.push(acc & 0xff);\n            acc >>= 8;\n            accBits -= 8;\n        }\n    }\n    function flush() {\n        if (accBits) {\n            buffer8.push(acc);\n        }\n    }\n    buffer11.forEach(add);\n    flush();\n    return new Uint8Array(buffer8);\n}\n/**\n * seedFromMnemonic converts a mnemonic generated using this library into the source key used to create it.\n * It returns an error if the passed mnemonic has an incorrect checksum, if the number of words is unexpected, or if one\n * of the passed words is not found in the words list.\n * @param mnemonic - 25 words mnemonic\n * @returns 32 bytes long seed\n */\nfunction seedFromMnemonic(mnemonic) {\n    const words = mnemonic.split(' ');\n    const key = words.slice(0, 24);\n    // Check that all words are in list\n    for (const w of key) {\n        if (english_1.default.indexOf(w) === -1)\n            throw new Error(exports.NOT_IN_WORDS_LIST_ERROR_MSG);\n    }\n    const checksum = words[words.length - 1];\n    const uint11Array = key.map((word) => english_1.default.indexOf(word));\n    // Convert the key to uint8Array\n    let uint8Array = toUint8Array(uint11Array);\n    // We need to chop the last byte -\n    // the short explanation - Since 256 is not divisible by 11, we have an extra 0x0 byte.\n    // The longer explanation - When splitting the 256 bits to chunks of 11, we get 23 words and a left over of 3 bits.\n    // This left gets padded with another 8 bits to the create the 24th word.\n    // While converting back to byte array, our new 264 bits array is divisible by 8 but the last byte is just the padding.\n    // check that we have 33 bytes long array as expected\n    if (uint8Array.length !== 33)\n        throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // check that the last byte is actually 0x0\n    if (uint8Array[uint8Array.length - 1] !== 0x0)\n        throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n    // chop it !\n    uint8Array = uint8Array.slice(0, uint8Array.length - 1);\n    // compute checksum\n    const cs = computeChecksum(uint8Array);\n    // success!\n    if (cs === checksum)\n        return uint8Array;\n    throw new Error(exports.FAIL_TO_DECODE_MNEMONIC_ERROR_MSG);\n}\nexports.seedFromMnemonic = seedFromMnemonic;\n/**\n * mnemonicToSecretKey takes a mnemonic string and returns the corresponding Algorand address and its secret key.\n * @param mn - 25 words Algorand mnemonic\n * @throws error if fails to decode the mnemonic\n */\nfunction mnemonicToSecretKey(mn) {\n    const seed = seedFromMnemonic(mn);\n    const keys = nacl.keyPairFromSeed(seed);\n    const encodedPk = address.encodeAddress(keys.publicKey);\n    return { addr: encodedPk, sk: keys.secretKey };\n}\nexports.mnemonicToSecretKey = mnemonicToSecretKey;\n/**\n * secretKeyToMnemonic takes an Algorand secret key and returns the corresponding mnemonic.\n * @param sk - Algorand secret key\n * @returns Secret key's associated mnemonic\n */\nfunction secretKeyToMnemonic(sk) {\n    // get the seed from the sk\n    const seed = sk.slice(0, nacl.SEED_BTYES_LENGTH);\n    return mnemonicFromSeed(seed);\n}\nexports.secretKeyToMnemonic = secretKeyToMnemonic;\n/**\n * mnemonicToMasterDerivationKey takes a mnemonic string and returns the corresponding master derivation key.\n * @param mn - 25 words Algorand mnemonic\n * @returns Uint8Array\n * @throws error if fails to decode the mnemonic\n */\nfunction mnemonicToMasterDerivationKey(mn) {\n    return seedFromMnemonic(mn);\n}\nexports.mnemonicToMasterDerivationKey = mnemonicToMasterDerivationKey;\n/**\n * masterDerivationKeyToMnemonic takes a master derivation key and returns the corresponding mnemonic.\n * @param mdk - Uint8Array\n * @returns string mnemonic\n */\nfunction masterDerivationKeyToMnemonic(mdk) {\n    return mnemonicFromSeed(mdk);\n}\nexports.masterDerivationKeyToMnemonic = masterDerivationKeyToMnemonic;\n//# sourceMappingURL=mnemonic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/mnemonic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst english = [\n    'abandon',\n    'ability',\n    'able',\n    'about',\n    'above',\n    'absent',\n    'absorb',\n    'abstract',\n    'absurd',\n    'abuse',\n    'access',\n    'accident',\n    'account',\n    'accuse',\n    'achieve',\n    'acid',\n    'acoustic',\n    'acquire',\n    'across',\n    'act',\n    'action',\n    'actor',\n    'actress',\n    'actual',\n    'adapt',\n    'add',\n    'addict',\n    'address',\n    'adjust',\n    'admit',\n    'adult',\n    'advance',\n    'advice',\n    'aerobic',\n    'affair',\n    'afford',\n    'afraid',\n    'again',\n    'age',\n    'agent',\n    'agree',\n    'ahead',\n    'aim',\n    'air',\n    'airport',\n    'aisle',\n    'alarm',\n    'album',\n    'alcohol',\n    'alert',\n    'alien',\n    'all',\n    'alley',\n    'allow',\n    'almost',\n    'alone',\n    'alpha',\n    'already',\n    'also',\n    'alter',\n    'always',\n    'amateur',\n    'amazing',\n    'among',\n    'amount',\n    'amused',\n    'analyst',\n    'anchor',\n    'ancient',\n    'anger',\n    'angle',\n    'angry',\n    'animal',\n    'ankle',\n    'announce',\n    'annual',\n    'another',\n    'answer',\n    'antenna',\n    'antique',\n    'anxiety',\n    'any',\n    'apart',\n    'apology',\n    'appear',\n    'apple',\n    'approve',\n    'april',\n    'arch',\n    'arctic',\n    'area',\n    'arena',\n    'argue',\n    'arm',\n    'armed',\n    'armor',\n    'army',\n    'around',\n    'arrange',\n    'arrest',\n    'arrive',\n    'arrow',\n    'art',\n    'artefact',\n    'artist',\n    'artwork',\n    'ask',\n    'aspect',\n    'assault',\n    'asset',\n    'assist',\n    'assume',\n    'asthma',\n    'athlete',\n    'atom',\n    'attack',\n    'attend',\n    'attitude',\n    'attract',\n    'auction',\n    'audit',\n    'august',\n    'aunt',\n    'author',\n    'auto',\n    'autumn',\n    'average',\n    'avocado',\n    'avoid',\n    'awake',\n    'aware',\n    'away',\n    'awesome',\n    'awful',\n    'awkward',\n    'axis',\n    'baby',\n    'bachelor',\n    'bacon',\n    'badge',\n    'bag',\n    'balance',\n    'balcony',\n    'ball',\n    'bamboo',\n    'banana',\n    'banner',\n    'bar',\n    'barely',\n    'bargain',\n    'barrel',\n    'base',\n    'basic',\n    'basket',\n    'battle',\n    'beach',\n    'bean',\n    'beauty',\n    'because',\n    'become',\n    'beef',\n    'before',\n    'begin',\n    'behave',\n    'behind',\n    'believe',\n    'below',\n    'belt',\n    'bench',\n    'benefit',\n    'best',\n    'betray',\n    'better',\n    'between',\n    'beyond',\n    'bicycle',\n    'bid',\n    'bike',\n    'bind',\n    'biology',\n    'bird',\n    'birth',\n    'bitter',\n    'black',\n    'blade',\n    'blame',\n    'blanket',\n    'blast',\n    'bleak',\n    'bless',\n    'blind',\n    'blood',\n    'blossom',\n    'blouse',\n    'blue',\n    'blur',\n    'blush',\n    'board',\n    'boat',\n    'body',\n    'boil',\n    'bomb',\n    'bone',\n    'bonus',\n    'book',\n    'boost',\n    'border',\n    'boring',\n    'borrow',\n    'boss',\n    'bottom',\n    'bounce',\n    'box',\n    'boy',\n    'bracket',\n    'brain',\n    'brand',\n    'brass',\n    'brave',\n    'bread',\n    'breeze',\n    'brick',\n    'bridge',\n    'brief',\n    'bright',\n    'bring',\n    'brisk',\n    'broccoli',\n    'broken',\n    'bronze',\n    'broom',\n    'brother',\n    'brown',\n    'brush',\n    'bubble',\n    'buddy',\n    'budget',\n    'buffalo',\n    'build',\n    'bulb',\n    'bulk',\n    'bullet',\n    'bundle',\n    'bunker',\n    'burden',\n    'burger',\n    'burst',\n    'bus',\n    'business',\n    'busy',\n    'butter',\n    'buyer',\n    'buzz',\n    'cabbage',\n    'cabin',\n    'cable',\n    'cactus',\n    'cage',\n    'cake',\n    'call',\n    'calm',\n    'camera',\n    'camp',\n    'can',\n    'canal',\n    'cancel',\n    'candy',\n    'cannon',\n    'canoe',\n    'canvas',\n    'canyon',\n    'capable',\n    'capital',\n    'captain',\n    'car',\n    'carbon',\n    'card',\n    'cargo',\n    'carpet',\n    'carry',\n    'cart',\n    'case',\n    'cash',\n    'casino',\n    'castle',\n    'casual',\n    'cat',\n    'catalog',\n    'catch',\n    'category',\n    'cattle',\n    'caught',\n    'cause',\n    'caution',\n    'cave',\n    'ceiling',\n    'celery',\n    'cement',\n    'census',\n    'century',\n    'cereal',\n    'certain',\n    'chair',\n    'chalk',\n    'champion',\n    'change',\n    'chaos',\n    'chapter',\n    'charge',\n    'chase',\n    'chat',\n    'cheap',\n    'check',\n    'cheese',\n    'chef',\n    'cherry',\n    'chest',\n    'chicken',\n    'chief',\n    'child',\n    'chimney',\n    'choice',\n    'choose',\n    'chronic',\n    'chuckle',\n    'chunk',\n    'churn',\n    'cigar',\n    'cinnamon',\n    'circle',\n    'citizen',\n    'city',\n    'civil',\n    'claim',\n    'clap',\n    'clarify',\n    'claw',\n    'clay',\n    'clean',\n    'clerk',\n    'clever',\n    'click',\n    'client',\n    'cliff',\n    'climb',\n    'clinic',\n    'clip',\n    'clock',\n    'clog',\n    'close',\n    'cloth',\n    'cloud',\n    'clown',\n    'club',\n    'clump',\n    'cluster',\n    'clutch',\n    'coach',\n    'coast',\n    'coconut',\n    'code',\n    'coffee',\n    'coil',\n    'coin',\n    'collect',\n    'color',\n    'column',\n    'combine',\n    'come',\n    'comfort',\n    'comic',\n    'common',\n    'company',\n    'concert',\n    'conduct',\n    'confirm',\n    'congress',\n    'connect',\n    'consider',\n    'control',\n    'convince',\n    'cook',\n    'cool',\n    'copper',\n    'copy',\n    'coral',\n    'core',\n    'corn',\n    'correct',\n    'cost',\n    'cotton',\n    'couch',\n    'country',\n    'couple',\n    'course',\n    'cousin',\n    'cover',\n    'coyote',\n    'crack',\n    'cradle',\n    'craft',\n    'cram',\n    'crane',\n    'crash',\n    'crater',\n    'crawl',\n    'crazy',\n    'cream',\n    'credit',\n    'creek',\n    'crew',\n    'cricket',\n    'crime',\n    'crisp',\n    'critic',\n    'crop',\n    'cross',\n    'crouch',\n    'crowd',\n    'crucial',\n    'cruel',\n    'cruise',\n    'crumble',\n    'crunch',\n    'crush',\n    'cry',\n    'crystal',\n    'cube',\n    'culture',\n    'cup',\n    'cupboard',\n    'curious',\n    'current',\n    'curtain',\n    'curve',\n    'cushion',\n    'custom',\n    'cute',\n    'cycle',\n    'dad',\n    'damage',\n    'damp',\n    'dance',\n    'danger',\n    'daring',\n    'dash',\n    'daughter',\n    'dawn',\n    'day',\n    'deal',\n    'debate',\n    'debris',\n    'decade',\n    'december',\n    'decide',\n    'decline',\n    'decorate',\n    'decrease',\n    'deer',\n    'defense',\n    'define',\n    'defy',\n    'degree',\n    'delay',\n    'deliver',\n    'demand',\n    'demise',\n    'denial',\n    'dentist',\n    'deny',\n    'depart',\n    'depend',\n    'deposit',\n    'depth',\n    'deputy',\n    'derive',\n    'describe',\n    'desert',\n    'design',\n    'desk',\n    'despair',\n    'destroy',\n    'detail',\n    'detect',\n    'develop',\n    'device',\n    'devote',\n    'diagram',\n    'dial',\n    'diamond',\n    'diary',\n    'dice',\n    'diesel',\n    'diet',\n    'differ',\n    'digital',\n    'dignity',\n    'dilemma',\n    'dinner',\n    'dinosaur',\n    'direct',\n    'dirt',\n    'disagree',\n    'discover',\n    'disease',\n    'dish',\n    'dismiss',\n    'disorder',\n    'display',\n    'distance',\n    'divert',\n    'divide',\n    'divorce',\n    'dizzy',\n    'doctor',\n    'document',\n    'dog',\n    'doll',\n    'dolphin',\n    'domain',\n    'donate',\n    'donkey',\n    'donor',\n    'door',\n    'dose',\n    'double',\n    'dove',\n    'draft',\n    'dragon',\n    'drama',\n    'drastic',\n    'draw',\n    'dream',\n    'dress',\n    'drift',\n    'drill',\n    'drink',\n    'drip',\n    'drive',\n    'drop',\n    'drum',\n    'dry',\n    'duck',\n    'dumb',\n    'dune',\n    'during',\n    'dust',\n    'dutch',\n    'duty',\n    'dwarf',\n    'dynamic',\n    'eager',\n    'eagle',\n    'early',\n    'earn',\n    'earth',\n    'easily',\n    'east',\n    'easy',\n    'echo',\n    'ecology',\n    'economy',\n    'edge',\n    'edit',\n    'educate',\n    'effort',\n    'egg',\n    'eight',\n    'either',\n    'elbow',\n    'elder',\n    'electric',\n    'elegant',\n    'element',\n    'elephant',\n    'elevator',\n    'elite',\n    'else',\n    'embark',\n    'embody',\n    'embrace',\n    'emerge',\n    'emotion',\n    'employ',\n    'empower',\n    'empty',\n    'enable',\n    'enact',\n    'end',\n    'endless',\n    'endorse',\n    'enemy',\n    'energy',\n    'enforce',\n    'engage',\n    'engine',\n    'enhance',\n    'enjoy',\n    'enlist',\n    'enough',\n    'enrich',\n    'enroll',\n    'ensure',\n    'enter',\n    'entire',\n    'entry',\n    'envelope',\n    'episode',\n    'equal',\n    'equip',\n    'era',\n    'erase',\n    'erode',\n    'erosion',\n    'error',\n    'erupt',\n    'escape',\n    'essay',\n    'essence',\n    'estate',\n    'eternal',\n    'ethics',\n    'evidence',\n    'evil',\n    'evoke',\n    'evolve',\n    'exact',\n    'example',\n    'excess',\n    'exchange',\n    'excite',\n    'exclude',\n    'excuse',\n    'execute',\n    'exercise',\n    'exhaust',\n    'exhibit',\n    'exile',\n    'exist',\n    'exit',\n    'exotic',\n    'expand',\n    'expect',\n    'expire',\n    'explain',\n    'expose',\n    'express',\n    'extend',\n    'extra',\n    'eye',\n    'eyebrow',\n    'fabric',\n    'face',\n    'faculty',\n    'fade',\n    'faint',\n    'faith',\n    'fall',\n    'false',\n    'fame',\n    'family',\n    'famous',\n    'fan',\n    'fancy',\n    'fantasy',\n    'farm',\n    'fashion',\n    'fat',\n    'fatal',\n    'father',\n    'fatigue',\n    'fault',\n    'favorite',\n    'feature',\n    'february',\n    'federal',\n    'fee',\n    'feed',\n    'feel',\n    'female',\n    'fence',\n    'festival',\n    'fetch',\n    'fever',\n    'few',\n    'fiber',\n    'fiction',\n    'field',\n    'figure',\n    'file',\n    'film',\n    'filter',\n    'final',\n    'find',\n    'fine',\n    'finger',\n    'finish',\n    'fire',\n    'firm',\n    'first',\n    'fiscal',\n    'fish',\n    'fit',\n    'fitness',\n    'fix',\n    'flag',\n    'flame',\n    'flash',\n    'flat',\n    'flavor',\n    'flee',\n    'flight',\n    'flip',\n    'float',\n    'flock',\n    'floor',\n    'flower',\n    'fluid',\n    'flush',\n    'fly',\n    'foam',\n    'focus',\n    'fog',\n    'foil',\n    'fold',\n    'follow',\n    'food',\n    'foot',\n    'force',\n    'forest',\n    'forget',\n    'fork',\n    'fortune',\n    'forum',\n    'forward',\n    'fossil',\n    'foster',\n    'found',\n    'fox',\n    'fragile',\n    'frame',\n    'frequent',\n    'fresh',\n    'friend',\n    'fringe',\n    'frog',\n    'front',\n    'frost',\n    'frown',\n    'frozen',\n    'fruit',\n    'fuel',\n    'fun',\n    'funny',\n    'furnace',\n    'fury',\n    'future',\n    'gadget',\n    'gain',\n    'galaxy',\n    'gallery',\n    'game',\n    'gap',\n    'garage',\n    'garbage',\n    'garden',\n    'garlic',\n    'garment',\n    'gas',\n    'gasp',\n    'gate',\n    'gather',\n    'gauge',\n    'gaze',\n    'general',\n    'genius',\n    'genre',\n    'gentle',\n    'genuine',\n    'gesture',\n    'ghost',\n    'giant',\n    'gift',\n    'giggle',\n    'ginger',\n    'giraffe',\n    'girl',\n    'give',\n    'glad',\n    'glance',\n    'glare',\n    'glass',\n    'glide',\n    'glimpse',\n    'globe',\n    'gloom',\n    'glory',\n    'glove',\n    'glow',\n    'glue',\n    'goat',\n    'goddess',\n    'gold',\n    'good',\n    'goose',\n    'gorilla',\n    'gospel',\n    'gossip',\n    'govern',\n    'gown',\n    'grab',\n    'grace',\n    'grain',\n    'grant',\n    'grape',\n    'grass',\n    'gravity',\n    'great',\n    'green',\n    'grid',\n    'grief',\n    'grit',\n    'grocery',\n    'group',\n    'grow',\n    'grunt',\n    'guard',\n    'guess',\n    'guide',\n    'guilt',\n    'guitar',\n    'gun',\n    'gym',\n    'habit',\n    'hair',\n    'half',\n    'hammer',\n    'hamster',\n    'hand',\n    'happy',\n    'harbor',\n    'hard',\n    'harsh',\n    'harvest',\n    'hat',\n    'have',\n    'hawk',\n    'hazard',\n    'head',\n    'health',\n    'heart',\n    'heavy',\n    'hedgehog',\n    'height',\n    'hello',\n    'helmet',\n    'help',\n    'hen',\n    'hero',\n    'hidden',\n    'high',\n    'hill',\n    'hint',\n    'hip',\n    'hire',\n    'history',\n    'hobby',\n    'hockey',\n    'hold',\n    'hole',\n    'holiday',\n    'hollow',\n    'home',\n    'honey',\n    'hood',\n    'hope',\n    'horn',\n    'horror',\n    'horse',\n    'hospital',\n    'host',\n    'hotel',\n    'hour',\n    'hover',\n    'hub',\n    'huge',\n    'human',\n    'humble',\n    'humor',\n    'hundred',\n    'hungry',\n    'hunt',\n    'hurdle',\n    'hurry',\n    'hurt',\n    'husband',\n    'hybrid',\n    'ice',\n    'icon',\n    'idea',\n    'identify',\n    'idle',\n    'ignore',\n    'ill',\n    'illegal',\n    'illness',\n    'image',\n    'imitate',\n    'immense',\n    'immune',\n    'impact',\n    'impose',\n    'improve',\n    'impulse',\n    'inch',\n    'include',\n    'income',\n    'increase',\n    'index',\n    'indicate',\n    'indoor',\n    'industry',\n    'infant',\n    'inflict',\n    'inform',\n    'inhale',\n    'inherit',\n    'initial',\n    'inject',\n    'injury',\n    'inmate',\n    'inner',\n    'innocent',\n    'input',\n    'inquiry',\n    'insane',\n    'insect',\n    'inside',\n    'inspire',\n    'install',\n    'intact',\n    'interest',\n    'into',\n    'invest',\n    'invite',\n    'involve',\n    'iron',\n    'island',\n    'isolate',\n    'issue',\n    'item',\n    'ivory',\n    'jacket',\n    'jaguar',\n    'jar',\n    'jazz',\n    'jealous',\n    'jeans',\n    'jelly',\n    'jewel',\n    'job',\n    'join',\n    'joke',\n    'journey',\n    'joy',\n    'judge',\n    'juice',\n    'jump',\n    'jungle',\n    'junior',\n    'junk',\n    'just',\n    'kangaroo',\n    'keen',\n    'keep',\n    'ketchup',\n    'key',\n    'kick',\n    'kid',\n    'kidney',\n    'kind',\n    'kingdom',\n    'kiss',\n    'kit',\n    'kitchen',\n    'kite',\n    'kitten',\n    'kiwi',\n    'knee',\n    'knife',\n    'knock',\n    'know',\n    'lab',\n    'label',\n    'labor',\n    'ladder',\n    'lady',\n    'lake',\n    'lamp',\n    'language',\n    'laptop',\n    'large',\n    'later',\n    'latin',\n    'laugh',\n    'laundry',\n    'lava',\n    'law',\n    'lawn',\n    'lawsuit',\n    'layer',\n    'lazy',\n    'leader',\n    'leaf',\n    'learn',\n    'leave',\n    'lecture',\n    'left',\n    'leg',\n    'legal',\n    'legend',\n    'leisure',\n    'lemon',\n    'lend',\n    'length',\n    'lens',\n    'leopard',\n    'lesson',\n    'letter',\n    'level',\n    'liar',\n    'liberty',\n    'library',\n    'license',\n    'life',\n    'lift',\n    'light',\n    'like',\n    'limb',\n    'limit',\n    'link',\n    'lion',\n    'liquid',\n    'list',\n    'little',\n    'live',\n    'lizard',\n    'load',\n    'loan',\n    'lobster',\n    'local',\n    'lock',\n    'logic',\n    'lonely',\n    'long',\n    'loop',\n    'lottery',\n    'loud',\n    'lounge',\n    'love',\n    'loyal',\n    'lucky',\n    'luggage',\n    'lumber',\n    'lunar',\n    'lunch',\n    'luxury',\n    'lyrics',\n    'machine',\n    'mad',\n    'magic',\n    'magnet',\n    'maid',\n    'mail',\n    'main',\n    'major',\n    'make',\n    'mammal',\n    'man',\n    'manage',\n    'mandate',\n    'mango',\n    'mansion',\n    'manual',\n    'maple',\n    'marble',\n    'march',\n    'margin',\n    'marine',\n    'market',\n    'marriage',\n    'mask',\n    'mass',\n    'master',\n    'match',\n    'material',\n    'math',\n    'matrix',\n    'matter',\n    'maximum',\n    'maze',\n    'meadow',\n    'mean',\n    'measure',\n    'meat',\n    'mechanic',\n    'medal',\n    'media',\n    'melody',\n    'melt',\n    'member',\n    'memory',\n    'mention',\n    'menu',\n    'mercy',\n    'merge',\n    'merit',\n    'merry',\n    'mesh',\n    'message',\n    'metal',\n    'method',\n    'middle',\n    'midnight',\n    'milk',\n    'million',\n    'mimic',\n    'mind',\n    'minimum',\n    'minor',\n    'minute',\n    'miracle',\n    'mirror',\n    'misery',\n    'miss',\n    'mistake',\n    'mix',\n    'mixed',\n    'mixture',\n    'mobile',\n    'model',\n    'modify',\n    'mom',\n    'moment',\n    'monitor',\n    'monkey',\n    'monster',\n    'month',\n    'moon',\n    'moral',\n    'more',\n    'morning',\n    'mosquito',\n    'mother',\n    'motion',\n    'motor',\n    'mountain',\n    'mouse',\n    'move',\n    'movie',\n    'much',\n    'muffin',\n    'mule',\n    'multiply',\n    'muscle',\n    'museum',\n    'mushroom',\n    'music',\n    'must',\n    'mutual',\n    'myself',\n    'mystery',\n    'myth',\n    'naive',\n    'name',\n    'napkin',\n    'narrow',\n    'nasty',\n    'nation',\n    'nature',\n    'near',\n    'neck',\n    'need',\n    'negative',\n    'neglect',\n    'neither',\n    'nephew',\n    'nerve',\n    'nest',\n    'net',\n    'network',\n    'neutral',\n    'never',\n    'news',\n    'next',\n    'nice',\n    'night',\n    'noble',\n    'noise',\n    'nominee',\n    'noodle',\n    'normal',\n    'north',\n    'nose',\n    'notable',\n    'note',\n    'nothing',\n    'notice',\n    'novel',\n    'now',\n    'nuclear',\n    'number',\n    'nurse',\n    'nut',\n    'oak',\n    'obey',\n    'object',\n    'oblige',\n    'obscure',\n    'observe',\n    'obtain',\n    'obvious',\n    'occur',\n    'ocean',\n    'october',\n    'odor',\n    'off',\n    'offer',\n    'office',\n    'often',\n    'oil',\n    'okay',\n    'old',\n    'olive',\n    'olympic',\n    'omit',\n    'once',\n    'one',\n    'onion',\n    'online',\n    'only',\n    'open',\n    'opera',\n    'opinion',\n    'oppose',\n    'option',\n    'orange',\n    'orbit',\n    'orchard',\n    'order',\n    'ordinary',\n    'organ',\n    'orient',\n    'original',\n    'orphan',\n    'ostrich',\n    'other',\n    'outdoor',\n    'outer',\n    'output',\n    'outside',\n    'oval',\n    'oven',\n    'over',\n    'own',\n    'owner',\n    'oxygen',\n    'oyster',\n    'ozone',\n    'pact',\n    'paddle',\n    'page',\n    'pair',\n    'palace',\n    'palm',\n    'panda',\n    'panel',\n    'panic',\n    'panther',\n    'paper',\n    'parade',\n    'parent',\n    'park',\n    'parrot',\n    'party',\n    'pass',\n    'patch',\n    'path',\n    'patient',\n    'patrol',\n    'pattern',\n    'pause',\n    'pave',\n    'payment',\n    'peace',\n    'peanut',\n    'pear',\n    'peasant',\n    'pelican',\n    'pen',\n    'penalty',\n    'pencil',\n    'people',\n    'pepper',\n    'perfect',\n    'permit',\n    'person',\n    'pet',\n    'phone',\n    'photo',\n    'phrase',\n    'physical',\n    'piano',\n    'picnic',\n    'picture',\n    'piece',\n    'pig',\n    'pigeon',\n    'pill',\n    'pilot',\n    'pink',\n    'pioneer',\n    'pipe',\n    'pistol',\n    'pitch',\n    'pizza',\n    'place',\n    'planet',\n    'plastic',\n    'plate',\n    'play',\n    'please',\n    'pledge',\n    'pluck',\n    'plug',\n    'plunge',\n    'poem',\n    'poet',\n    'point',\n    'polar',\n    'pole',\n    'police',\n    'pond',\n    'pony',\n    'pool',\n    'popular',\n    'portion',\n    'position',\n    'possible',\n    'post',\n    'potato',\n    'pottery',\n    'poverty',\n    'powder',\n    'power',\n    'practice',\n    'praise',\n    'predict',\n    'prefer',\n    'prepare',\n    'present',\n    'pretty',\n    'prevent',\n    'price',\n    'pride',\n    'primary',\n    'print',\n    'priority',\n    'prison',\n    'private',\n    'prize',\n    'problem',\n    'process',\n    'produce',\n    'profit',\n    'program',\n    'project',\n    'promote',\n    'proof',\n    'property',\n    'prosper',\n    'protect',\n    'proud',\n    'provide',\n    'public',\n    'pudding',\n    'pull',\n    'pulp',\n    'pulse',\n    'pumpkin',\n    'punch',\n    'pupil',\n    'puppy',\n    'purchase',\n    'purity',\n    'purpose',\n    'purse',\n    'push',\n    'put',\n    'puzzle',\n    'pyramid',\n    'quality',\n    'quantum',\n    'quarter',\n    'question',\n    'quick',\n    'quit',\n    'quiz',\n    'quote',\n    'rabbit',\n    'raccoon',\n    'race',\n    'rack',\n    'radar',\n    'radio',\n    'rail',\n    'rain',\n    'raise',\n    'rally',\n    'ramp',\n    'ranch',\n    'random',\n    'range',\n    'rapid',\n    'rare',\n    'rate',\n    'rather',\n    'raven',\n    'raw',\n    'razor',\n    'ready',\n    'real',\n    'reason',\n    'rebel',\n    'rebuild',\n    'recall',\n    'receive',\n    'recipe',\n    'record',\n    'recycle',\n    'reduce',\n    'reflect',\n    'reform',\n    'refuse',\n    'region',\n    'regret',\n    'regular',\n    'reject',\n    'relax',\n    'release',\n    'relief',\n    'rely',\n    'remain',\n    'remember',\n    'remind',\n    'remove',\n    'render',\n    'renew',\n    'rent',\n    'reopen',\n    'repair',\n    'repeat',\n    'replace',\n    'report',\n    'require',\n    'rescue',\n    'resemble',\n    'resist',\n    'resource',\n    'response',\n    'result',\n    'retire',\n    'retreat',\n    'return',\n    'reunion',\n    'reveal',\n    'review',\n    'reward',\n    'rhythm',\n    'rib',\n    'ribbon',\n    'rice',\n    'rich',\n    'ride',\n    'ridge',\n    'rifle',\n    'right',\n    'rigid',\n    'ring',\n    'riot',\n    'ripple',\n    'risk',\n    'ritual',\n    'rival',\n    'river',\n    'road',\n    'roast',\n    'robot',\n    'robust',\n    'rocket',\n    'romance',\n    'roof',\n    'rookie',\n    'room',\n    'rose',\n    'rotate',\n    'rough',\n    'round',\n    'route',\n    'royal',\n    'rubber',\n    'rude',\n    'rug',\n    'rule',\n    'run',\n    'runway',\n    'rural',\n    'sad',\n    'saddle',\n    'sadness',\n    'safe',\n    'sail',\n    'salad',\n    'salmon',\n    'salon',\n    'salt',\n    'salute',\n    'same',\n    'sample',\n    'sand',\n    'satisfy',\n    'satoshi',\n    'sauce',\n    'sausage',\n    'save',\n    'say',\n    'scale',\n    'scan',\n    'scare',\n    'scatter',\n    'scene',\n    'scheme',\n    'school',\n    'science',\n    'scissors',\n    'scorpion',\n    'scout',\n    'scrap',\n    'screen',\n    'script',\n    'scrub',\n    'sea',\n    'search',\n    'season',\n    'seat',\n    'second',\n    'secret',\n    'section',\n    'security',\n    'seed',\n    'seek',\n    'segment',\n    'select',\n    'sell',\n    'seminar',\n    'senior',\n    'sense',\n    'sentence',\n    'series',\n    'service',\n    'session',\n    'settle',\n    'setup',\n    'seven',\n    'shadow',\n    'shaft',\n    'shallow',\n    'share',\n    'shed',\n    'shell',\n    'sheriff',\n    'shield',\n    'shift',\n    'shine',\n    'ship',\n    'shiver',\n    'shock',\n    'shoe',\n    'shoot',\n    'shop',\n    'short',\n    'shoulder',\n    'shove',\n    'shrimp',\n    'shrug',\n    'shuffle',\n    'shy',\n    'sibling',\n    'sick',\n    'side',\n    'siege',\n    'sight',\n    'sign',\n    'silent',\n    'silk',\n    'silly',\n    'silver',\n    'similar',\n    'simple',\n    'since',\n    'sing',\n    'siren',\n    'sister',\n    'situate',\n    'six',\n    'size',\n    'skate',\n    'sketch',\n    'ski',\n    'skill',\n    'skin',\n    'skirt',\n    'skull',\n    'slab',\n    'slam',\n    'sleep',\n    'slender',\n    'slice',\n    'slide',\n    'slight',\n    'slim',\n    'slogan',\n    'slot',\n    'slow',\n    'slush',\n    'small',\n    'smart',\n    'smile',\n    'smoke',\n    'smooth',\n    'snack',\n    'snake',\n    'snap',\n    'sniff',\n    'snow',\n    'soap',\n    'soccer',\n    'social',\n    'sock',\n    'soda',\n    'soft',\n    'solar',\n    'soldier',\n    'solid',\n    'solution',\n    'solve',\n    'someone',\n    'song',\n    'soon',\n    'sorry',\n    'sort',\n    'soul',\n    'sound',\n    'soup',\n    'source',\n    'south',\n    'space',\n    'spare',\n    'spatial',\n    'spawn',\n    'speak',\n    'special',\n    'speed',\n    'spell',\n    'spend',\n    'sphere',\n    'spice',\n    'spider',\n    'spike',\n    'spin',\n    'spirit',\n    'split',\n    'spoil',\n    'sponsor',\n    'spoon',\n    'sport',\n    'spot',\n    'spray',\n    'spread',\n    'spring',\n    'spy',\n    'square',\n    'squeeze',\n    'squirrel',\n    'stable',\n    'stadium',\n    'staff',\n    'stage',\n    'stairs',\n    'stamp',\n    'stand',\n    'start',\n    'state',\n    'stay',\n    'steak',\n    'steel',\n    'stem',\n    'step',\n    'stereo',\n    'stick',\n    'still',\n    'sting',\n    'stock',\n    'stomach',\n    'stone',\n    'stool',\n    'story',\n    'stove',\n    'strategy',\n    'street',\n    'strike',\n    'strong',\n    'struggle',\n    'student',\n    'stuff',\n    'stumble',\n    'style',\n    'subject',\n    'submit',\n    'subway',\n    'success',\n    'such',\n    'sudden',\n    'suffer',\n    'sugar',\n    'suggest',\n    'suit',\n    'summer',\n    'sun',\n    'sunny',\n    'sunset',\n    'super',\n    'supply',\n    'supreme',\n    'sure',\n    'surface',\n    'surge',\n    'surprise',\n    'surround',\n    'survey',\n    'suspect',\n    'sustain',\n    'swallow',\n    'swamp',\n    'swap',\n    'swarm',\n    'swear',\n    'sweet',\n    'swift',\n    'swim',\n    'swing',\n    'switch',\n    'sword',\n    'symbol',\n    'symptom',\n    'syrup',\n    'system',\n    'table',\n    'tackle',\n    'tag',\n    'tail',\n    'talent',\n    'talk',\n    'tank',\n    'tape',\n    'target',\n    'task',\n    'taste',\n    'tattoo',\n    'taxi',\n    'teach',\n    'team',\n    'tell',\n    'ten',\n    'tenant',\n    'tennis',\n    'tent',\n    'term',\n    'test',\n    'text',\n    'thank',\n    'that',\n    'theme',\n    'then',\n    'theory',\n    'there',\n    'they',\n    'thing',\n    'this',\n    'thought',\n    'three',\n    'thrive',\n    'throw',\n    'thumb',\n    'thunder',\n    'ticket',\n    'tide',\n    'tiger',\n    'tilt',\n    'timber',\n    'time',\n    'tiny',\n    'tip',\n    'tired',\n    'tissue',\n    'title',\n    'toast',\n    'tobacco',\n    'today',\n    'toddler',\n    'toe',\n    'together',\n    'toilet',\n    'token',\n    'tomato',\n    'tomorrow',\n    'tone',\n    'tongue',\n    'tonight',\n    'tool',\n    'tooth',\n    'top',\n    'topic',\n    'topple',\n    'torch',\n    'tornado',\n    'tortoise',\n    'toss',\n    'total',\n    'tourist',\n    'toward',\n    'tower',\n    'town',\n    'toy',\n    'track',\n    'trade',\n    'traffic',\n    'tragic',\n    'train',\n    'transfer',\n    'trap',\n    'trash',\n    'travel',\n    'tray',\n    'treat',\n    'tree',\n    'trend',\n    'trial',\n    'tribe',\n    'trick',\n    'trigger',\n    'trim',\n    'trip',\n    'trophy',\n    'trouble',\n    'truck',\n    'true',\n    'truly',\n    'trumpet',\n    'trust',\n    'truth',\n    'try',\n    'tube',\n    'tuition',\n    'tumble',\n    'tuna',\n    'tunnel',\n    'turkey',\n    'turn',\n    'turtle',\n    'twelve',\n    'twenty',\n    'twice',\n    'twin',\n    'twist',\n    'two',\n    'type',\n    'typical',\n    'ugly',\n    'umbrella',\n    'unable',\n    'unaware',\n    'uncle',\n    'uncover',\n    'under',\n    'undo',\n    'unfair',\n    'unfold',\n    'unhappy',\n    'uniform',\n    'unique',\n    'unit',\n    'universe',\n    'unknown',\n    'unlock',\n    'until',\n    'unusual',\n    'unveil',\n    'update',\n    'upgrade',\n    'uphold',\n    'upon',\n    'upper',\n    'upset',\n    'urban',\n    'urge',\n    'usage',\n    'use',\n    'used',\n    'useful',\n    'useless',\n    'usual',\n    'utility',\n    'vacant',\n    'vacuum',\n    'vague',\n    'valid',\n    'valley',\n    'valve',\n    'van',\n    'vanish',\n    'vapor',\n    'various',\n    'vast',\n    'vault',\n    'vehicle',\n    'velvet',\n    'vendor',\n    'venture',\n    'venue',\n    'verb',\n    'verify',\n    'version',\n    'very',\n    'vessel',\n    'veteran',\n    'viable',\n    'vibrant',\n    'vicious',\n    'victory',\n    'video',\n    'view',\n    'village',\n    'vintage',\n    'violin',\n    'virtual',\n    'virus',\n    'visa',\n    'visit',\n    'visual',\n    'vital',\n    'vivid',\n    'vocal',\n    'voice',\n    'void',\n    'volcano',\n    'volume',\n    'vote',\n    'voyage',\n    'wage',\n    'wagon',\n    'wait',\n    'walk',\n    'wall',\n    'walnut',\n    'want',\n    'warfare',\n    'warm',\n    'warrior',\n    'wash',\n    'wasp',\n    'waste',\n    'water',\n    'wave',\n    'way',\n    'wealth',\n    'weapon',\n    'wear',\n    'weasel',\n    'weather',\n    'web',\n    'wedding',\n    'weekend',\n    'weird',\n    'welcome',\n    'west',\n    'wet',\n    'whale',\n    'what',\n    'wheat',\n    'wheel',\n    'when',\n    'where',\n    'whip',\n    'whisper',\n    'wide',\n    'width',\n    'wife',\n    'wild',\n    'will',\n    'win',\n    'window',\n    'wine',\n    'wing',\n    'wink',\n    'winner',\n    'winter',\n    'wire',\n    'wisdom',\n    'wise',\n    'wish',\n    'witness',\n    'wolf',\n    'woman',\n    'wonder',\n    'wood',\n    'wool',\n    'word',\n    'work',\n    'world',\n    'worry',\n    'worth',\n    'wrap',\n    'wreck',\n    'wrestle',\n    'wrist',\n    'write',\n    'wrong',\n    'yard',\n    'year',\n    'yellow',\n    'you',\n    'young',\n    'youth',\n    'zebra',\n    'zero',\n    'zone',\n    'zoo',\n];\nexports[\"default\"] = english;\n//# sourceMappingURL=english.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/mnemonic/wordlists/english.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/multisig.js":
/*!***************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/multisig.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.multisigAddress = exports.appendSignRawMultisigSignature = exports.appendSignMultisigTransaction = exports.signMultisigTransaction = exports.verifyMultisig = exports.mergeMultisigTransactions = exports.MultisigTransaction = exports.createMultisigTransaction = exports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = exports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = exports.MULTISIG_NO_MUTATE_ERROR_MSG = exports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = exports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = exports.MULTISIG_MERGE_MISMATCH_ERROR_MSG = exports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst txnBuilder = __importStar(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\n/**\n Utilities for manipulating multisig transaction blobs.\n */\nexports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG = 'Not enough multisig transactions to merge. Need at least two';\nexports.MULTISIG_MERGE_MISMATCH_ERROR_MSG = 'Cannot merge txs. txIDs differ';\nexports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG = 'Cannot merge txs. Auth addrs differ';\nexports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG = 'Cannot merge txs. Multisig preimages differ';\nexports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG = 'Cannot merge txs. subsigs are mismatched.';\nconst MULTISIG_KEY_NOT_EXIST_ERROR_MSG = 'Key does not exist';\nexports.MULTISIG_NO_MUTATE_ERROR_MSG = 'Cannot mutate a multisig field as it would invalidate all existing signatures.';\nexports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG = 'Cannot sign a multisig transaction using `signTxn`. Use `partialSignTxn` instead.';\nexports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG = 'Cannot add multisig signature. Signature is not of the correct length.';\n/**\n * createMultisigTransaction creates a raw, unsigned multisig transaction blob.\n * @param txn - the actual transaction.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */\nfunction createMultisigTransaction(txn, { version, threshold, addrs }) {\n    // construct the appendable multisigned transaction format\n    const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);\n    const subsigs = pks.map((pk) => ({ pk: buffer_1.Buffer.from(pk) }));\n    const msig = {\n        v: version,\n        thr: threshold,\n        subsig: subsigs,\n    };\n    const txnForEncoding = txn.get_obj_for_encoding();\n    const signedTxn = {\n        msig,\n        txn: txnForEncoding,\n    };\n    // if the address of this multisig is different from the transaction sender,\n    // we need to add the auth-addr field\n    const msigAddr = address.fromMultisigPreImg({\n        version,\n        threshold,\n        pks,\n    });\n    if (address.encodeAddress(txnForEncoding.snd) !==\n        address.encodeAddress(msigAddr)) {\n        signedTxn.sgnr = buffer_1.Buffer.from(msigAddr);\n    }\n    return new Uint8Array(encoding.encode(signedTxn));\n}\nexports.createMultisigTransaction = createMultisigTransaction;\n/**\n * createMultisigTransactionWithSignature creates a multisig transaction blob with an included signature.\n * @param txn - the actual transaction to sign.\n * @param rawSig - a Buffer raw signature of that transaction\n * @param myPk - a public key that corresponds with rawSig\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param pks - ordered list of public keys in this multisig\n * @returns encoded multisig blob\n */\nfunction createMultisigTransactionWithSignature(txn, { rawSig, myPk }, { version, threshold, pks }) {\n    // Create an empty encoded multisig transaction\n    const encodedMsig = createMultisigTransaction(txn, {\n        version,\n        threshold,\n        addrs: pks.map((pk) => address.encodeAddress(pk)),\n    });\n    // note: this is not signed yet, but will be shortly\n    const signedTxn = encoding.decode(encodedMsig);\n    let keyExist = false;\n    // append the multisig signature to the corresponding public key in the multisig blob\n    signedTxn.msig.subsig.forEach((subsig, i) => {\n        if (nacl.bytesEqual(subsig.pk, myPk)) {\n            keyExist = true;\n            signedTxn.msig.subsig[i].s = rawSig;\n        }\n    });\n    if (keyExist === false) {\n        throw new Error(MULTISIG_KEY_NOT_EXIST_ERROR_MSG);\n    }\n    // if the address of this multisig is different from the transaction sender,\n    // we need to add the auth-addr field\n    const msigAddr = address.fromMultisigPreImg({\n        version,\n        threshold,\n        pks,\n    });\n    if (address.encodeAddress(signedTxn.txn.snd) !== address.encodeAddress(msigAddr)) {\n        signedTxn.sgnr = buffer_1.Buffer.from(msigAddr);\n    }\n    return new Uint8Array(encoding.encode(signedTxn));\n}\n/**\n * MultisigTransaction is a Transaction that also supports creating partially-signed multisig transactions.\n */\nclass MultisigTransaction extends txnBuilder.Transaction {\n    /* eslint-disable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */\n    /**\n     * Override inherited method to throw an error, as mutating transactions are prohibited in this context\n     */\n    addLease() {\n        throw new Error(exports.MULTISIG_NO_MUTATE_ERROR_MSG);\n    }\n    /**\n     * Override inherited method to throw an error, as mutating transactions are prohibited in this context\n     */\n    addRekey() {\n        throw new Error(exports.MULTISIG_NO_MUTATE_ERROR_MSG);\n    }\n    signTxn(sk) {\n        throw new Error(exports.MULTISIG_USE_PARTIAL_SIGN_ERROR_MSG);\n    }\n    /* eslint-enable class-methods-use-this,@typescript-eslint/no-unused-vars,no-dupe-class-members */\n    /**\n     * partialSignTxn partially signs this transaction and returns a partially-signed multisig transaction,\n     * encoded with msgpack as a typed array.\n     * @param version - multisig version\n     * @param threshold - multisig threshold\n     * @param pks - multisig public key list, order is important.\n     * @param sk - an Algorand secret key to sign with.\n     * @returns an encoded, partially signed multisig transaction.\n     */\n    partialSignTxn({ version, threshold, pks }, sk) {\n        // get signature verifier\n        const myPk = nacl.keyPairFromSecretKey(sk).publicKey;\n        return createMultisigTransactionWithSignature(this, { rawSig: this.rawSignTxn(sk), myPk }, { version, threshold, pks });\n    }\n    /**\n     * partialSignWithMultisigSignature partially signs this transaction with an external raw multisig signature and returns\n     * a partially-signed multisig transaction, encoded with msgpack as a typed array.\n     * @param metadata - multisig metadata\n     * @param signerAddr - address of the signer\n     * @param signature - raw multisig signature\n     * @returns an encoded, partially signed multisig transaction.\n     */\n    partialSignWithMultisigSignature(metadata, signerAddr, signature) {\n        if (!nacl.isValidSignatureLength(signature.length)) {\n            throw new Error(exports.MULTISIG_SIGNATURE_LENGTH_ERROR_MSG);\n        }\n        return createMultisigTransactionWithSignature(this, {\n            rawSig: signature,\n            myPk: address.decodeAddress(signerAddr).publicKey,\n        }, metadata);\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txnForEnc) {\n        return super.from_obj_for_encoding(txnForEnc);\n    }\n}\nexports.MultisigTransaction = MultisigTransaction;\n/**\n * mergeMultisigTransactions takes a list of multisig transaction blobs, and merges them.\n * @param multisigTxnBlobs - a list of blobs representing encoded multisig txns\n * @returns typed array msg-pack encoded multisig txn\n */\nfunction mergeMultisigTransactions(multisigTxnBlobs) {\n    if (multisigTxnBlobs.length < 2) {\n        throw new Error(exports.MULTISIG_MERGE_LESSTHANTWO_ERROR_MSG);\n    }\n    const refSigTx = encoding.decode(multisigTxnBlobs[0]);\n    const refTxID = MultisigTransaction.from_obj_for_encoding(refSigTx.txn).txID();\n    const refAuthAddr = refSigTx.sgnr\n        ? address.encodeAddress(refSigTx.sgnr)\n        : undefined;\n    const refPreImage = {\n        version: refSigTx.msig.v,\n        threshold: refSigTx.msig.thr,\n        pks: refSigTx.msig.subsig.map((subsig) => subsig.pk),\n    };\n    const refMsigAddr = address.encodeAddress(address.fromMultisigPreImg(refPreImage));\n    const newSubsigs = refSigTx.msig.subsig.map((sig) => ({ ...sig }));\n    for (let i = 1; i < multisigTxnBlobs.length; i++) {\n        const unisig = encoding.decode(multisigTxnBlobs[i]);\n        const unisigAlgoTxn = MultisigTransaction.from_obj_for_encoding(unisig.txn);\n        if (unisigAlgoTxn.txID() !== refTxID) {\n            throw new Error(exports.MULTISIG_MERGE_MISMATCH_ERROR_MSG);\n        }\n        const authAddr = unisig.sgnr\n            ? address.encodeAddress(unisig.sgnr)\n            : undefined;\n        if (refAuthAddr !== authAddr) {\n            throw new Error(exports.MULTISIG_MERGE_MISMATCH_AUTH_ADDR_MSG);\n        }\n        // check multisig has same preimage as reference\n        if (unisig.msig.subsig.length !== refSigTx.msig.subsig.length) {\n            throw new Error(exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        const preimg = {\n            version: unisig.msig.v,\n            threshold: unisig.msig.thr,\n            pks: unisig.msig.subsig.map((subsig) => subsig.pk),\n        };\n        const msgigAddr = address.encodeAddress(address.fromMultisigPreImg(preimg));\n        if (refMsigAddr !== msgigAddr) {\n            throw new Error(exports.MULTISIG_MERGE_WRONG_PREIMAGE_ERROR_MSG);\n        }\n        // now, we can merge\n        unisig.msig.subsig.forEach((uniSubsig, index) => {\n            if (!uniSubsig.s)\n                return;\n            const current = newSubsigs[index];\n            // we convert the Uint8Arrays uniSubsig.s and current.s to Buffers here because (as\n            // of Dec 2020) React overrides the buffer package with an older version that does\n            // not support Uint8Arrays in the comparison function. See this thread for more\n            // info: https://github.com/algorand/js-algorand-sdk/issues/252\n            if (current.s &&\n                buffer_1.Buffer.compare(buffer_1.Buffer.from(uniSubsig.s), buffer_1.Buffer.from(current.s)) !== 0) {\n                // mismatch\n                throw new Error(exports.MULTISIG_MERGE_SIG_MISMATCH_ERROR_MSG);\n            }\n            current.s = uniSubsig.s;\n        });\n    }\n    const msig = {\n        v: refSigTx.msig.v,\n        thr: refSigTx.msig.thr,\n        subsig: newSubsigs,\n    };\n    const signedTxn = {\n        msig,\n        txn: refSigTx.txn,\n    };\n    if (typeof refAuthAddr !== 'undefined') {\n        signedTxn.sgnr = buffer_1.Buffer.from(address.decodeAddress(refAuthAddr).publicKey);\n    }\n    return new Uint8Array(encoding.encode(signedTxn));\n}\nexports.mergeMultisigTransactions = mergeMultisigTransactions;\nfunction verifyMultisig(toBeVerified, msig, publicKey) {\n    const version = msig.v;\n    const threshold = msig.thr;\n    const subsigs = msig.subsig;\n    const pks = subsigs.map((subsig) => subsig.pk);\n    if (msig.subsig.length < threshold) {\n        return false;\n    }\n    let pk;\n    try {\n        pk = address.fromMultisigPreImg({ version, threshold, pks });\n    }\n    catch (e) {\n        return false;\n    }\n    if (!utils.arrayEqual(pk, publicKey)) {\n        return false;\n    }\n    let counter = 0;\n    for (const subsig of subsigs) {\n        if (subsig.s !== undefined) {\n            counter += 1;\n        }\n    }\n    if (counter < threshold) {\n        return false;\n    }\n    let verifiedCounter = 0;\n    for (const subsig of subsigs) {\n        if (subsig.s !== undefined) {\n            if (nacl.verify(toBeVerified, subsig.s, subsig.pk)) {\n                verifiedCounter += 1;\n            }\n        }\n    }\n    if (verifiedCounter < threshold) {\n        return false;\n    }\n    return true;\n}\nexports.verifyMultisig = verifyMultisig;\n/**\n * signMultisigTransaction takes a raw transaction (see signTransaction), a multisig preimage, a secret key, and returns\n * a multisig transaction, which is a blob representing a transaction and multisignature account preimage. The returned\n * multisig txn can accumulate additional signatures through mergeMultisigTransactions or appendSignMultisigTransaction.\n * @param txn - object with either payment or key registration fields\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key. The corresponding pk should be in the pre image.\n * @returns object containing txID, and blob of partially signed multisig transaction (with multisig preimage information)\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n */\nfunction signMultisigTransaction(txn, { version, threshold, addrs }, sk) {\n    // check that the from field matches the mSigPreImage. If from field is not populated, fill it in.\n    const expectedFromRaw = address.fromMultisigPreImgAddrs({\n        version,\n        threshold,\n        addrs,\n    });\n    if (!Object.prototype.hasOwnProperty.call(txn, 'from')) {\n        // eslint-disable-next-line no-param-reassign\n        txn.from = expectedFromRaw;\n    }\n    // build pks for partialSign\n    const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);\n    // `txn` needs to be handled differently if it's a constructed `Transaction` vs a dict of constructor args\n    const txnAlreadyBuilt = txn instanceof txnBuilder.Transaction;\n    let algoTxn;\n    let blob;\n    if (txnAlreadyBuilt) {\n        algoTxn = txn;\n        blob = MultisigTransaction.prototype.partialSignTxn.call(algoTxn, { version, threshold, pks }, sk);\n    }\n    else {\n        algoTxn = new MultisigTransaction(txn);\n        blob = algoTxn.partialSignTxn({ version, threshold, pks }, sk);\n    }\n    return {\n        txID: algoTxn.txID().toString(),\n        blob,\n    };\n}\nexports.signMultisigTransaction = signMultisigTransaction;\n/**\n * appendSignMultisigTransaction takes a multisig transaction blob, and appends our signature to it.\n * While we could derive public key preimagery from the partially-signed multisig transaction,\n * we ask the caller to pass it back in, to ensure they know what they are signing.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param sk - Algorand secret key\n * @returns object containing txID, and blob representing encoded multisig txn\n */\nfunction appendSignMultisigTransaction(multisigTxnBlob, { version, threshold, addrs }, sk) {\n    const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = encoding.decode(multisigTxnBlob);\n    const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);\n    const partialSignedBlob = msigTxn.partialSignTxn({ version, threshold, pks }, sk);\n    return {\n        txID: msigTxn.txID().toString(),\n        blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob]),\n    };\n}\nexports.appendSignMultisigTransaction = appendSignMultisigTransaction;\n/**\n * appendMultisigTransactionSignature takes a multisig transaction blob, and appends a given raw signature to it.\n * This makes it possible to compile a multisig signature using only raw signatures from external methods.\n * @param multisigTxnBlob - an encoded multisig txn. Supports non-payment txn types.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - a list of Algorand addresses representing possible signers for this multisig. Order is important.\n * @param signerAddr - address of the signer\n * @param signature - raw multisig signature\n * @returns object containing txID, and blob representing encoded multisig txn\n */\nfunction appendSignRawMultisigSignature(multisigTxnBlob, { version, threshold, addrs }, signerAddr, signature) {\n    const pks = addrs.map((addr) => address.decodeAddress(addr).publicKey);\n    // obtain underlying txn, sign it, and merge it\n    const multisigTxObj = encoding.decode(multisigTxnBlob);\n    const msigTxn = MultisigTransaction.from_obj_for_encoding(multisigTxObj.txn);\n    const partialSignedBlob = msigTxn.partialSignWithMultisigSignature({ version, threshold, pks }, signerAddr, signature);\n    return {\n        txID: msigTxn.txID().toString(),\n        blob: mergeMultisigTransactions([multisigTxnBlob, partialSignedBlob]),\n    };\n}\nexports.appendSignRawMultisigSignature = appendSignRawMultisigSignature;\n/**\n * multisigAddress takes multisig metadata (preimage) and returns the corresponding human readable Algorand address.\n * @param version - multisig version\n * @param threshold - multisig threshold\n * @param addrs - list of Algorand addresses\n */\nfunction multisigAddress({ version, threshold, addrs, }) {\n    return address.fromMultisigPreImgAddrs({ version, threshold, addrs });\n}\nexports.multisigAddress = multisigAddress;\n//# sourceMappingURL=multisig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SEED_BTYES_LENGTH = exports.HASH_BYTES_LENGTH = exports.SECRET_KEY_LENGTH = exports.PUBLIC_KEY_LENGTH = exports.verify = exports.bytesEqual = exports.sign = exports.keyPairFromSecretKey = exports.isValidSignatureLength = exports.keyPair = exports.keyPairFromSeed = exports.randomBytes = exports.genericHash = void 0;\nconst tweetnacl_1 = __importDefault(__webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/tweetnacl/nacl-fast.js\"));\nconst js_sha512_1 = __importDefault(__webpack_require__(/*! js-sha512 */ \"(ssr)/./node_modules/js-sha512/src/sha512.js\"));\nconst utils_1 = __webpack_require__(/*! ../utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\");\nfunction genericHash(arr) {\n    return js_sha512_1.default.sha512_256.array(arr);\n}\nexports.genericHash = genericHash;\nfunction randomBytes(length) {\n    if ((0, utils_1.isReactNative)()) {\n        console.warn(`It looks like you're running in react-native. In order to perform common crypto operations you will need to polyfill common operations such as crypto.getRandomValues`);\n    }\n    return tweetnacl_1.default.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\nfunction keyPairFromSeed(seed) {\n    return tweetnacl_1.default.sign.keyPair.fromSeed(seed);\n}\nexports.keyPairFromSeed = keyPairFromSeed;\nfunction keyPair() {\n    const seed = randomBytes(tweetnacl_1.default.box.secretKeyLength);\n    return keyPairFromSeed(seed);\n}\nexports.keyPair = keyPair;\nfunction isValidSignatureLength(len) {\n    return len === tweetnacl_1.default.sign.signatureLength;\n}\nexports.isValidSignatureLength = isValidSignatureLength;\nfunction keyPairFromSecretKey(sk) {\n    return tweetnacl_1.default.sign.keyPair.fromSecretKey(sk);\n}\nexports.keyPairFromSecretKey = keyPairFromSecretKey;\nfunction sign(msg, secretKey) {\n    return tweetnacl_1.default.sign.detached(msg, secretKey);\n}\nexports.sign = sign;\nfunction bytesEqual(a, b) {\n    return tweetnacl_1.default.verify(a, b);\n}\nexports.bytesEqual = bytesEqual;\nfunction verify(message, signature, verifyKey) {\n    return tweetnacl_1.default.sign.detached.verify(message, signature, verifyKey);\n}\nexports.verify = verify;\n// constants\nexports.PUBLIC_KEY_LENGTH = tweetnacl_1.default.sign.publicKeyLength;\nexports.SECRET_KEY_LENGTH = tweetnacl_1.default.sign.secretKeyLength;\nexports.HASH_BYTES_LENGTH = 32;\nexports.SEED_BTYES_LENGTH = 32;\n//# sourceMappingURL=naclWrappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9uYWNsL25hY2xXcmFwcGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHlCQUF5QixHQUFHLHlCQUF5QixHQUFHLHlCQUF5QixHQUFHLGNBQWMsR0FBRyxrQkFBa0IsR0FBRyxZQUFZLEdBQUcsNEJBQTRCLEdBQUcsOEJBQThCLEdBQUcsZUFBZSxHQUFHLHVCQUF1QixHQUFHLG1CQUFtQixHQUFHLG1CQUFtQjtBQUMxVCxvQ0FBb0MsbUJBQU8sQ0FBQyw4REFBVztBQUN2RCxvQ0FBb0MsbUJBQU8sQ0FBQywrREFBVztBQUN2RCxnQkFBZ0IsbUJBQU8sQ0FBQyw0RUFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvbmFjbC9uYWNsV3JhcHBlcnMuanM/MmNiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU0VFRF9CVFlFU19MRU5HVEggPSBleHBvcnRzLkhBU0hfQllURVNfTEVOR1RIID0gZXhwb3J0cy5TRUNSRVRfS0VZX0xFTkdUSCA9IGV4cG9ydHMuUFVCTElDX0tFWV9MRU5HVEggPSBleHBvcnRzLnZlcmlmeSA9IGV4cG9ydHMuYnl0ZXNFcXVhbCA9IGV4cG9ydHMuc2lnbiA9IGV4cG9ydHMua2V5UGFpckZyb21TZWNyZXRLZXkgPSBleHBvcnRzLmlzVmFsaWRTaWduYXR1cmVMZW5ndGggPSBleHBvcnRzLmtleVBhaXIgPSBleHBvcnRzLmtleVBhaXJGcm9tU2VlZCA9IGV4cG9ydHMucmFuZG9tQnl0ZXMgPSBleHBvcnRzLmdlbmVyaWNIYXNoID0gdm9pZCAwO1xuY29uc3QgdHdlZXRuYWNsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR3ZWV0bmFjbFwiKSk7XG5jb25zdCBqc19zaGE1MTJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianMtc2hhNTEyXCIpKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdXRpbHNcIik7XG5mdW5jdGlvbiBnZW5lcmljSGFzaChhcnIpIHtcbiAgICByZXR1cm4ganNfc2hhNTEyXzEuZGVmYXVsdC5zaGE1MTJfMjU2LmFycmF5KGFycik7XG59XG5leHBvcnRzLmdlbmVyaWNIYXNoID0gZ2VuZXJpY0hhc2g7XG5mdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGgpIHtcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNSZWFjdE5hdGl2ZSkoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYEl0IGxvb2tzIGxpa2UgeW91J3JlIHJ1bm5pbmcgaW4gcmVhY3QtbmF0aXZlLiBJbiBvcmRlciB0byBwZXJmb3JtIGNvbW1vbiBjcnlwdG8gb3BlcmF0aW9ucyB5b3Ugd2lsbCBuZWVkIHRvIHBvbHlmaWxsIGNvbW1vbiBvcGVyYXRpb25zIHN1Y2ggYXMgY3J5cHRvLmdldFJhbmRvbVZhbHVlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gdHdlZXRuYWNsXzEuZGVmYXVsdC5yYW5kb21CeXRlcyhsZW5ndGgpO1xufVxuZXhwb3J0cy5yYW5kb21CeXRlcyA9IHJhbmRvbUJ5dGVzO1xuZnVuY3Rpb24ga2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICByZXR1cm4gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmtleVBhaXIuZnJvbVNlZWQoc2VlZCk7XG59XG5leHBvcnRzLmtleVBhaXJGcm9tU2VlZCA9IGtleVBhaXJGcm9tU2VlZDtcbmZ1bmN0aW9uIGtleVBhaXIoKSB7XG4gICAgY29uc3Qgc2VlZCA9IHJhbmRvbUJ5dGVzKHR3ZWV0bmFjbF8xLmRlZmF1bHQuYm94LnNlY3JldEtleUxlbmd0aCk7XG4gICAgcmV0dXJuIGtleVBhaXJGcm9tU2VlZChzZWVkKTtcbn1cbmV4cG9ydHMua2V5UGFpciA9IGtleVBhaXI7XG5mdW5jdGlvbiBpc1ZhbGlkU2lnbmF0dXJlTGVuZ3RoKGxlbikge1xuICAgIHJldHVybiBsZW4gPT09IHR3ZWV0bmFjbF8xLmRlZmF1bHQuc2lnbi5zaWduYXR1cmVMZW5ndGg7XG59XG5leHBvcnRzLmlzVmFsaWRTaWduYXR1cmVMZW5ndGggPSBpc1ZhbGlkU2lnbmF0dXJlTGVuZ3RoO1xuZnVuY3Rpb24ga2V5UGFpckZyb21TZWNyZXRLZXkoc2spIHtcbiAgICByZXR1cm4gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLmtleVBhaXIuZnJvbVNlY3JldEtleShzayk7XG59XG5leHBvcnRzLmtleVBhaXJGcm9tU2VjcmV0S2V5ID0ga2V5UGFpckZyb21TZWNyZXRLZXk7XG5mdW5jdGlvbiBzaWduKG1zZywgc2VjcmV0S2V5KSB7XG4gICAgcmV0dXJuIHR3ZWV0bmFjbF8xLmRlZmF1bHQuc2lnbi5kZXRhY2hlZChtc2csIHNlY3JldEtleSk7XG59XG5leHBvcnRzLnNpZ24gPSBzaWduO1xuZnVuY3Rpb24gYnl0ZXNFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIHR3ZWV0bmFjbF8xLmRlZmF1bHQudmVyaWZ5KGEsIGIpO1xufVxuZXhwb3J0cy5ieXRlc0VxdWFsID0gYnl0ZXNFcXVhbDtcbmZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUsIHZlcmlmeUtleSkge1xuICAgIHJldHVybiB0d2VldG5hY2xfMS5kZWZhdWx0LnNpZ24uZGV0YWNoZWQudmVyaWZ5KG1lc3NhZ2UsIHNpZ25hdHVyZSwgdmVyaWZ5S2V5KTtcbn1cbmV4cG9ydHMudmVyaWZ5ID0gdmVyaWZ5O1xuLy8gY29uc3RhbnRzXG5leHBvcnRzLlBVQkxJQ19LRVlfTEVOR1RIID0gdHdlZXRuYWNsXzEuZGVmYXVsdC5zaWduLnB1YmxpY0tleUxlbmd0aDtcbmV4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEggPSB0d2VldG5hY2xfMS5kZWZhdWx0LnNpZ24uc2VjcmV0S2V5TGVuZ3RoO1xuZXhwb3J0cy5IQVNIX0JZVEVTX0xFTkdUSCA9IDMyO1xuZXhwb3J0cy5TRUVEX0JUWUVTX0xFTkdUSCA9IDMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFjbFdyYXBwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/signer.js":
/*!*************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/signer.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTransactionWithSigner = exports.makeEmptyTransactionSigner = exports.makeMultiSigAccountTransactionSigner = exports.makeLogicSigAccountTransactionSigner = exports.makeBasicAccountTransactionSigner = void 0;\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\");\nconst logicsig_1 = __webpack_require__(/*! ./logicsig */ \"(ssr)/./node_modules/algosdk/dist/cjs/logicsig.js\");\nconst multisig_1 = __webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/algosdk/dist/cjs/multisig.js\");\n/**\n * Create a TransactionSigner that can sign transactions for the provided basic Account.\n */\nfunction makeBasicAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign) => {\n        const signed = [];\n        for (const index of indexesToSign) {\n            signed.push(txnGroup[index].signTxn(account.sk));\n        }\n        return Promise.resolve(signed);\n    };\n}\nexports.makeBasicAccountTransactionSigner = makeBasicAccountTransactionSigner;\n/**\n * Create a TransactionSigner that can sign transactions for the provided LogicSigAccount.\n */\nfunction makeLogicSigAccountTransactionSigner(account) {\n    return (txnGroup, indexesToSign) => {\n        const signed = [];\n        for (const index of indexesToSign) {\n            const { blob } = (0, logicsig_1.signLogicSigTransactionObject)(txnGroup[index], account);\n            signed.push(blob);\n        }\n        return Promise.resolve(signed);\n    };\n}\nexports.makeLogicSigAccountTransactionSigner = makeLogicSigAccountTransactionSigner;\n/**\n * Create a TransactionSigner that can sign transactions for the provided Multisig account.\n * @param msig - The Multisig account metadata\n * @param sks - An array of private keys belonging to the msig which should sign the transactions.\n */\nfunction makeMultiSigAccountTransactionSigner(msig, sks) {\n    return (txnGroup, indexesToSign) => {\n        const signed = [];\n        for (const index of indexesToSign) {\n            const txn = txnGroup[index];\n            const partialSigs = [];\n            for (const sk of sks) {\n                const { blob } = (0, multisig_1.signMultisigTransaction)(txn, msig, sk);\n                partialSigs.push(blob);\n            }\n            if (partialSigs.length > 1) {\n                signed.push((0, multisig_1.mergeMultisigTransactions)(partialSigs));\n            }\n            else {\n                signed.push(partialSigs[0]);\n            }\n        }\n        return Promise.resolve(signed);\n    };\n}\nexports.makeMultiSigAccountTransactionSigner = makeMultiSigAccountTransactionSigner;\n/**\n * Create a makeEmptyTransactionSigner that does not specify any signer or\n * signing capabilities. This should only be used to simulate transactions.\n */\nfunction makeEmptyTransactionSigner() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return (txnGroup, indexesToSign) => {\n        const unsigned = [];\n        for (const index of indexesToSign) {\n            unsigned.push((0, transaction_1.encodeUnsignedSimulateTransaction)(txnGroup[index]));\n        }\n        return Promise.resolve(unsigned);\n    };\n}\nexports.makeEmptyTransactionSigner = makeEmptyTransactionSigner;\n/**\n * Check if a value conforms to the TransactionWithSigner structure.\n * @param value - The value to check.\n * @returns True if an only if the value has the structure of a TransactionWithSigner.\n */\nfunction isTransactionWithSigner(value) {\n    return (typeof value === 'object' &&\n        Object.keys(value).length === 2 &&\n        typeof value.txn === 'object' &&\n        typeof value.signer === 'function');\n}\nexports.isTransactionWithSigner = isTransactionWithSigner;\n//# sourceMappingURL=signer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy9zaWduZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLEdBQUcsa0NBQWtDLEdBQUcsNENBQTRDLEdBQUcsNENBQTRDLEdBQUcseUNBQXlDO0FBQzlNLHNCQUFzQixtQkFBTyxDQUFDLDJFQUFlO0FBQzdDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDLG1CQUFtQixtQkFBTyxDQUFDLHFFQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvc2lnbmVyLmpzPzY3MGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVHJhbnNhY3Rpb25XaXRoU2lnbmVyID0gZXhwb3J0cy5tYWtlRW1wdHlUcmFuc2FjdGlvblNpZ25lciA9IGV4cG9ydHMubWFrZU11bHRpU2lnQWNjb3VudFRyYW5zYWN0aW9uU2lnbmVyID0gZXhwb3J0cy5tYWtlTG9naWNTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIgPSBleHBvcnRzLm1ha2VCYXNpY0FjY291bnRUcmFuc2FjdGlvblNpZ25lciA9IHZvaWQgMDtcbmNvbnN0IHRyYW5zYWN0aW9uXzEgPSByZXF1aXJlKFwiLi90cmFuc2FjdGlvblwiKTtcbmNvbnN0IGxvZ2ljc2lnXzEgPSByZXF1aXJlKFwiLi9sb2dpY3NpZ1wiKTtcbmNvbnN0IG11bHRpc2lnXzEgPSByZXF1aXJlKFwiLi9tdWx0aXNpZ1wiKTtcbi8qKlxuICogQ3JlYXRlIGEgVHJhbnNhY3Rpb25TaWduZXIgdGhhdCBjYW4gc2lnbiB0cmFuc2FjdGlvbnMgZm9yIHRoZSBwcm92aWRlZCBiYXNpYyBBY2NvdW50LlxuICovXG5mdW5jdGlvbiBtYWtlQmFzaWNBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIoYWNjb3VudCkge1xuICAgIHJldHVybiAodHhuR3JvdXAsIGluZGV4ZXNUb1NpZ24pID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlc1RvU2lnbikge1xuICAgICAgICAgICAgc2lnbmVkLnB1c2godHhuR3JvdXBbaW5kZXhdLnNpZ25UeG4oYWNjb3VudC5zaykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2lnbmVkKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlQmFzaWNBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIgPSBtYWtlQmFzaWNBY2NvdW50VHJhbnNhY3Rpb25TaWduZXI7XG4vKipcbiAqIENyZWF0ZSBhIFRyYW5zYWN0aW9uU2lnbmVyIHRoYXQgY2FuIHNpZ24gdHJhbnNhY3Rpb25zIGZvciB0aGUgcHJvdmlkZWQgTG9naWNTaWdBY2NvdW50LlxuICovXG5mdW5jdGlvbiBtYWtlTG9naWNTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIoYWNjb3VudCkge1xuICAgIHJldHVybiAodHhuR3JvdXAsIGluZGV4ZXNUb1NpZ24pID0+IHtcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlc1RvU2lnbikge1xuICAgICAgICAgICAgY29uc3QgeyBibG9iIH0gPSAoMCwgbG9naWNzaWdfMS5zaWduTG9naWNTaWdUcmFuc2FjdGlvbk9iamVjdCkodHhuR3JvdXBbaW5kZXhdLCBhY2NvdW50KTtcbiAgICAgICAgICAgIHNpZ25lZC5wdXNoKGJsb2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2lnbmVkKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlTG9naWNTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXIgPSBtYWtlTG9naWNTaWdBY2NvdW50VHJhbnNhY3Rpb25TaWduZXI7XG4vKipcbiAqIENyZWF0ZSBhIFRyYW5zYWN0aW9uU2lnbmVyIHRoYXQgY2FuIHNpZ24gdHJhbnNhY3Rpb25zIGZvciB0aGUgcHJvdmlkZWQgTXVsdGlzaWcgYWNjb3VudC5cbiAqIEBwYXJhbSBtc2lnIC0gVGhlIE11bHRpc2lnIGFjY291bnQgbWV0YWRhdGFcbiAqIEBwYXJhbSBza3MgLSBBbiBhcnJheSBvZiBwcml2YXRlIGtleXMgYmVsb25naW5nIHRvIHRoZSBtc2lnIHdoaWNoIHNob3VsZCBzaWduIHRoZSB0cmFuc2FjdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNdWx0aVNpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lcihtc2lnLCBza3MpIHtcbiAgICByZXR1cm4gKHR4bkdyb3VwLCBpbmRleGVzVG9TaWduKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25lZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXNUb1NpZ24pIHtcbiAgICAgICAgICAgIGNvbnN0IHR4biA9IHR4bkdyb3VwW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpYWxTaWdzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNrIG9mIHNrcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYmxvYiB9ID0gKDAsIG11bHRpc2lnXzEuc2lnbk11bHRpc2lnVHJhbnNhY3Rpb24pKHR4biwgbXNpZywgc2spO1xuICAgICAgICAgICAgICAgIHBhcnRpYWxTaWdzLnB1c2goYmxvYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFydGlhbFNpZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHNpZ25lZC5wdXNoKCgwLCBtdWx0aXNpZ18xLm1lcmdlTXVsdGlzaWdUcmFuc2FjdGlvbnMpKHBhcnRpYWxTaWdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaWduZWQucHVzaChwYXJ0aWFsU2lnc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzaWduZWQpO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VNdWx0aVNpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lciA9IG1ha2VNdWx0aVNpZ0FjY291bnRUcmFuc2FjdGlvblNpZ25lcjtcbi8qKlxuICogQ3JlYXRlIGEgbWFrZUVtcHR5VHJhbnNhY3Rpb25TaWduZXIgdGhhdCBkb2VzIG5vdCBzcGVjaWZ5IGFueSBzaWduZXIgb3JcbiAqIHNpZ25pbmcgY2FwYWJpbGl0aWVzLiBUaGlzIHNob3VsZCBvbmx5IGJlIHVzZWQgdG8gc2ltdWxhdGUgdHJhbnNhY3Rpb25zLlxuICovXG5mdW5jdGlvbiBtYWtlRW1wdHlUcmFuc2FjdGlvblNpZ25lcigpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgcmV0dXJuICh0eG5Hcm91cCwgaW5kZXhlc1RvU2lnbikgPT4ge1xuICAgICAgICBjb25zdCB1bnNpZ25lZCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGV4ZXNUb1NpZ24pIHtcbiAgICAgICAgICAgIHVuc2lnbmVkLnB1c2goKDAsIHRyYW5zYWN0aW9uXzEuZW5jb2RlVW5zaWduZWRTaW11bGF0ZVRyYW5zYWN0aW9uKSh0eG5Hcm91cFtpbmRleF0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVuc2lnbmVkKTtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlRW1wdHlUcmFuc2FjdGlvblNpZ25lciA9IG1ha2VFbXB0eVRyYW5zYWN0aW9uU2lnbmVyO1xuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGNvbmZvcm1zIHRvIHRoZSBUcmFuc2FjdGlvbldpdGhTaWduZXIgc3RydWN0dXJlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMgVHJ1ZSBpZiBhbiBvbmx5IGlmIHRoZSB2YWx1ZSBoYXMgdGhlIHN0cnVjdHVyZSBvZiBhIFRyYW5zYWN0aW9uV2l0aFNpZ25lci5cbiAqL1xuZnVuY3Rpb24gaXNUcmFuc2FjdGlvbldpdGhTaWduZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUudHhuID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUuc2lnbmVyID09PSAnZnVuY3Rpb24nKTtcbn1cbmV4cG9ydHMuaXNUcmFuc2FjdGlvbldpdGhTaWduZXIgPSBpc1RyYW5zYWN0aW9uV2l0aFNpZ25lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25lci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/transaction.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/transaction.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.instantiateTxnIfNeeded = exports.decodeSignedTransaction = exports.decodeUnsignedTransaction = exports.encodeUnsignedTransaction = exports.encodeUnsignedSimulateTransaction = exports.Transaction = exports.ALGORAND_MIN_TX_FEE = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst hi_base32_1 = __importDefault(__webpack_require__(/*! hi-base32 */ \"(ssr)/./node_modules/hi-base32/src/base32.js\"));\nconst address = __importStar(__webpack_require__(/*! ./encoding/address */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/address.js\"));\nconst encoding = __importStar(__webpack_require__(/*! ./encoding/encoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/encoding/encoding.js\"));\nconst nacl = __importStar(__webpack_require__(/*! ./nacl/naclWrappers */ \"(ssr)/./node_modules/algosdk/dist/cjs/nacl/naclWrappers.js\"));\nconst utils = __importStar(__webpack_require__(/*! ./utils/utils */ \"(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\"));\nconst boxStorage_1 = __webpack_require__(/*! ./boxStorage */ \"(ssr)/./node_modules/algosdk/dist/cjs/boxStorage.js\");\nconst base_1 = __webpack_require__(/*! ./types/transactions/base */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\");\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nexports.ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\nconst KEYREG_VOTE_KEY_LENGTH = 32;\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\nfunction getKeyregKey(input, inputName, length) {\n    if (input == null) {\n        return undefined;\n    }\n    let inputAsBuffer;\n    if (typeof input === 'string') {\n        inputAsBuffer = buffer_1.Buffer.from(input, 'base64');\n    }\n    else if (input.constructor === Uint8Array) {\n        inputAsBuffer = buffer_1.Buffer.from(input);\n    }\n    else if (buffer_1.Buffer.isBuffer(input)) {\n        inputAsBuffer = input;\n    }\n    if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\n        throw Error(`${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`);\n    }\n    return inputAsBuffer;\n}\n/**\n * Transaction enables construction of Algorand transactions\n * */\nclass Transaction {\n    constructor({ ...transaction }) {\n        this.name = 'Transaction';\n        this.tag = buffer_1.Buffer.from('TX');\n        // Populate defaults\n        /* eslint-disable no-param-reassign */\n        const defaults = {\n            type: base_1.TransactionType.pay,\n            flatFee: false,\n            nonParticipation: false,\n        };\n        // Default type\n        if (typeof transaction.type === 'undefined') {\n            transaction.type = defaults.type;\n        }\n        // Default flatFee\n        if (typeof transaction.flatFee ===\n            'undefined') {\n            transaction.flatFee =\n                defaults.flatFee;\n        }\n        // Default nonParticipation\n        if (transaction.type === base_1.TransactionType.keyreg &&\n            typeof transaction.voteKey !== 'undefined' &&\n            typeof transaction.nonParticipation === 'undefined') {\n            transaction.nonParticipation = defaults.nonParticipation;\n        }\n        /* eslint-enable no-param-reassign */\n        // Move suggested parameters from its object to inline\n        if (transaction.suggestedParams !== undefined) {\n            // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\n            //   - Helpful for moving params from named object to inline\n            const reference = transaction;\n            reference.genesisHash = reference.suggestedParams.genesisHash;\n            reference.fee = reference.suggestedParams.fee;\n            if (reference.suggestedParams.flatFee !== undefined)\n                reference.flatFee = reference.suggestedParams.flatFee;\n            reference.firstRound = reference.suggestedParams.firstRound;\n            reference.lastRound = reference.suggestedParams.lastRound;\n            reference.genesisID = reference.suggestedParams.genesisID;\n        }\n        // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\n        // to one which is more useful as we prepare properties for storing\n        const txn = transaction;\n        txn.from = address.decodeAddress(txn.from);\n        if (txn.to !== undefined)\n            txn.to = address.decodeAddress(txn.to);\n        if (txn.closeRemainderTo !== undefined)\n            txn.closeRemainderTo = address.decodeAddress(txn.closeRemainderTo);\n        if (txn.assetManager !== undefined)\n            txn.assetManager = address.decodeAddress(txn.assetManager);\n        if (txn.assetReserve !== undefined)\n            txn.assetReserve = address.decodeAddress(txn.assetReserve);\n        if (txn.assetFreeze !== undefined)\n            txn.assetFreeze = address.decodeAddress(txn.assetFreeze);\n        if (txn.assetClawback !== undefined)\n            txn.assetClawback = address.decodeAddress(txn.assetClawback);\n        if (txn.assetRevocationTarget !== undefined)\n            txn.assetRevocationTarget = address.decodeAddress(txn.assetRevocationTarget);\n        if (txn.freezeAccount !== undefined)\n            txn.freezeAccount = address.decodeAddress(txn.freezeAccount);\n        if (txn.reKeyTo !== undefined)\n            txn.reKeyTo = address.decodeAddress(txn.reKeyTo);\n        if (txn.genesisHash === undefined)\n            throw Error('genesis hash must be specified and in a base64 string.');\n        txn.genesisHash = buffer_1.Buffer.from(txn.genesisHash, 'base64');\n        if (txn.amount !== undefined &&\n            (!(Number.isSafeInteger(txn.amount) ||\n                (typeof txn.amount === 'bigint' &&\n                    txn.amount <= BigInt('0xffffffffffffffff'))) ||\n                txn.amount < 0))\n            throw Error('Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n        if (!Number.isSafeInteger(txn.fee) || txn.fee < 0)\n            throw Error('fee must be a positive number and smaller than 2^53-1');\n        if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0)\n            throw Error('firstRound must be a positive number');\n        if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0)\n            throw Error('lastRound must be a positive number');\n        if (txn.extraPages !== undefined &&\n            (!Number.isInteger(txn.extraPages) ||\n                txn.extraPages < 0 ||\n                txn.extraPages > 3))\n            throw Error('extraPages must be an Integer between and including 0 to 3');\n        if (txn.assetTotal !== undefined &&\n            (!(Number.isSafeInteger(txn.assetTotal) ||\n                (typeof txn.assetTotal === 'bigint' &&\n                    txn.assetTotal <= BigInt('0xffffffffffffffff'))) ||\n                txn.assetTotal < 0))\n            throw Error('Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n        if (txn.assetDecimals !== undefined &&\n            (!Number.isSafeInteger(txn.assetDecimals) ||\n                txn.assetDecimals < 0 ||\n                txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS))\n            throw Error(`assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`);\n        if (txn.assetIndex !== undefined &&\n            (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0))\n            throw Error('Asset index must be a positive number and smaller than 2^53-1');\n        if (txn.appIndex !== undefined &&\n            (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0))\n            throw Error('Application index must be a positive number and smaller than 2^53-1');\n        if (txn.appLocalInts !== undefined &&\n            (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0))\n            throw Error('Application local ints count must be a positive number and smaller than 2^53-1');\n        if (txn.appLocalByteSlices !== undefined &&\n            (!Number.isSafeInteger(txn.appLocalByteSlices) ||\n                txn.appLocalByteSlices < 0))\n            throw Error('Application local byte slices count must be a positive number and smaller than 2^53-1');\n        if (txn.appGlobalInts !== undefined &&\n            (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0))\n            throw Error('Application global ints count must be a positive number and smaller than 2^53-1');\n        if (txn.appGlobalByteSlices !== undefined &&\n            (!Number.isSafeInteger(txn.appGlobalByteSlices) ||\n                txn.appGlobalByteSlices < 0))\n            throw Error('Application global byte slices count must be a positive number and smaller than 2^53-1');\n        if (txn.appApprovalProgram !== undefined) {\n            if (txn.appApprovalProgram.constructor !== Uint8Array)\n                throw Error('appApprovalProgram must be a Uint8Array.');\n        }\n        if (txn.appClearProgram !== undefined) {\n            if (txn.appClearProgram.constructor !== Uint8Array)\n                throw Error('appClearProgram must be a Uint8Array.');\n        }\n        if (txn.appArgs !== undefined) {\n            if (!Array.isArray(txn.appArgs))\n                throw Error('appArgs must be an Array of Uint8Array.');\n            txn.appArgs = txn.appArgs.slice();\n            txn.appArgs.forEach((arg) => {\n                if (arg.constructor !== Uint8Array)\n                    throw Error('each element of AppArgs must be a Uint8Array.');\n            });\n        }\n        else {\n            txn.appArgs = [];\n        }\n        if (txn.appAccounts !== undefined) {\n            if (!Array.isArray(txn.appAccounts))\n                throw Error('appAccounts must be an Array of addresses.');\n            txn.appAccounts = txn.appAccounts.map((addressAsString) => address.decodeAddress(addressAsString));\n        }\n        if (txn.appForeignApps !== undefined) {\n            if (!Array.isArray(txn.appForeignApps))\n                throw Error('appForeignApps must be an Array of integers.');\n            txn.appForeignApps = txn.appForeignApps.slice();\n            txn.appForeignApps.forEach((foreignAppIndex) => {\n                if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0)\n                    throw Error('each foreign application index must be a positive number and smaller than 2^53-1');\n            });\n        }\n        if (txn.appForeignAssets !== undefined) {\n            if (!Array.isArray(txn.appForeignAssets))\n                throw Error('appForeignAssets must be an Array of integers.');\n            txn.appForeignAssets = txn.appForeignAssets.slice();\n            txn.appForeignAssets.forEach((foreignAssetIndex) => {\n                if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0)\n                    throw Error('each foreign asset index must be a positive number and smaller than 2^53-1');\n            });\n        }\n        if (txn.boxes !== undefined) {\n            if (!Array.isArray(txn.boxes))\n                throw Error('boxes must be an Array of BoxReference.');\n            txn.boxes = txn.boxes.slice();\n            txn.boxes.forEach((box) => {\n                if (!Number.isSafeInteger(box.appIndex) ||\n                    box.name.constructor !== Uint8Array)\n                    throw Error('box app index must be a number and name must be an Uint8Array.');\n            });\n        }\n        if (txn.assetMetadataHash !== undefined &&\n            txn.assetMetadataHash.length !== 0) {\n            if (typeof txn.assetMetadataHash === 'string') {\n                txn.assetMetadataHash = new Uint8Array(buffer_1.Buffer.from(txn.assetMetadataHash));\n            }\n            if (txn.assetMetadataHash.constructor !== Uint8Array ||\n                txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n                throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);\n            }\n            if (txn.assetMetadataHash.every((value) => value === 0)) {\n                // if hash contains all 0s, omit it\n                txn.assetMetadataHash = undefined;\n            }\n        }\n        else {\n            txn.assetMetadataHash = undefined;\n        }\n        if (txn.note !== undefined) {\n            if (txn.note.constructor !== Uint8Array)\n                throw Error('note must be a Uint8Array.');\n        }\n        else {\n            txn.note = new Uint8Array(0);\n        }\n        if (txn.lease !== undefined) {\n            if (txn.lease.constructor !== Uint8Array)\n                throw Error('lease must be a Uint8Array.');\n            if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n                throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n            if (txn.lease.every((value) => value === 0)) {\n                // if lease contains all 0s, omit it\n                txn.lease = new Uint8Array(0);\n            }\n        }\n        else {\n            txn.lease = new Uint8Array(0);\n        }\n        txn.voteKey = getKeyregKey(txn.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH);\n        txn.selectionKey = getKeyregKey(txn.selectionKey, 'selectionKey', KEYREG_SELECTION_KEY_LENGTH);\n        txn.stateProofKey = getKeyregKey(txn.stateProofKey, 'stateProofKey', KEYREG_STATE_PROOF_KEY_LENGTH);\n        // Checking non-participation key registration\n        if (txn.nonParticipation &&\n            (txn.voteKey ||\n                txn.selectionKey ||\n                txn.voteFirst ||\n                txn.stateProofKey ||\n                txn.voteLast ||\n                txn.voteKeyDilution)) {\n            throw new Error('nonParticipation is true but participation params are present.');\n        }\n        // Checking online key registration\n        if (!txn.nonParticipation &&\n            (txn.voteKey ||\n                txn.selectionKey ||\n                txn.stateProofKey ||\n                txn.voteFirst ||\n                txn.voteLast ||\n                txn.voteKeyDilution) &&\n            !(txn.voteKey &&\n                txn.selectionKey &&\n                txn.voteFirst &&\n                txn.voteLast &&\n                txn.voteKeyDilution)\n        // stateProofKey not included here for backwards compatibility\n        ) {\n            throw new Error('online key registration missing at least one of the following fields: ' +\n                'voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution');\n        }\n        // The last option is an offline key registration where all the fields\n        // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\n        // are all undefined/false\n        // Remove unwanted properties and store transaction on instance\n        delete txn.suggestedParams;\n        Object.assign(this, utils.removeUndefinedProperties(txn));\n        // Modify Fee\n        if (!txn.flatFee) {\n            this.fee *= this.estimateSize();\n            // If suggested fee too small and will be rejected, set to min tx fee\n            if (this.fee < exports.ALGORAND_MIN_TX_FEE) {\n                this.fee = exports.ALGORAND_MIN_TX_FEE;\n            }\n        }\n        // say we are aware of groups\n        this.group = undefined;\n        // stpf fields\n        if (txn.stateProofType !== undefined &&\n            (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0))\n            throw Error('State Proof type must be a positive number and smaller than 2^53-1');\n        if (txn.stateProofMessage !== undefined) {\n            if (txn.stateProofMessage.constructor !== Uint8Array)\n                throw Error('stateProofMessage must be a Uint8Array.');\n        }\n        else {\n            txn.stateProofMessage = new Uint8Array(0);\n        }\n        if (txn.stateProof !== undefined) {\n            if (txn.stateProof.constructor !== Uint8Array)\n                throw Error('stateProof must be a Uint8Array.');\n        }\n        else {\n            txn.stateProof = new Uint8Array(0);\n        }\n    }\n    // eslint-disable-next-line camelcase\n    get_obj_for_encoding() {\n        if (this.type === 'pay') {\n            const txn = {\n                amt: this.amount,\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: 'pay',\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n            };\n            // parse close address\n            if (this.closeRemainderTo !== undefined &&\n                address.encodeAddress(this.closeRemainderTo.publicKey) !==\n                    address.ALGORAND_ZERO_ADDRESS_STRING) {\n                txn.close = buffer_1.Buffer.from(this.closeRemainderTo.publicKey);\n            }\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            // allowed zero values\n            if (this.to !== undefined)\n                txn.rcv = buffer_1.Buffer.from(this.to.publicKey);\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.rekey)\n                delete txn.rekey;\n            return txn;\n        }\n        if (this.type === 'keyreg') {\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n                votekey: this.voteKey,\n                selkey: this.selectionKey,\n                sprfkey: this.stateProofKey,\n                votefst: this.voteFirst,\n                votelst: this.voteLast,\n                votekd: this.voteKeyDilution,\n            };\n            // allowed zero values\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (this.nonParticipation) {\n                txn.nonpart = true;\n            }\n            if (!txn.selkey)\n                delete txn.selkey;\n            if (!txn.votekey)\n                delete txn.votekey;\n            if (!txn.sprfkey)\n                delete txn.sprfkey;\n            if (!txn.votefst)\n                delete txn.votefst;\n            if (!txn.votelst)\n                delete txn.votelst;\n            if (!txn.votekd)\n                delete txn.votekd;\n            return txn;\n        }\n        if (this.type === 'acfg') {\n            // asset creation, or asset reconfigure, or asset destruction\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n                caid: this.assetIndex,\n                apar: {\n                    t: this.assetTotal,\n                    df: this.assetDefaultFrozen,\n                    dc: this.assetDecimals,\n                },\n            };\n            if (this.assetManager !== undefined)\n                txn.apar.m = buffer_1.Buffer.from(this.assetManager.publicKey);\n            if (this.assetReserve !== undefined)\n                txn.apar.r = buffer_1.Buffer.from(this.assetReserve.publicKey);\n            if (this.assetFreeze !== undefined)\n                txn.apar.f = buffer_1.Buffer.from(this.assetFreeze.publicKey);\n            if (this.assetClawback !== undefined)\n                txn.apar.c = buffer_1.Buffer.from(this.assetClawback.publicKey);\n            if (this.assetName !== undefined)\n                txn.apar.an = this.assetName;\n            if (this.assetUnitName !== undefined)\n                txn.apar.un = this.assetUnitName;\n            if (this.assetURL !== undefined)\n                txn.apar.au = this.assetURL;\n            if (this.assetMetadataHash !== undefined)\n                txn.apar.am = buffer_1.Buffer.from(this.assetMetadataHash);\n            // allowed zero values\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (!txn.caid)\n                delete txn.caid;\n            if (!txn.apar.t &&\n                !txn.apar.un &&\n                !txn.apar.an &&\n                !txn.apar.df &&\n                !txn.apar.m &&\n                !txn.apar.r &&\n                !txn.apar.f &&\n                !txn.apar.c &&\n                !txn.apar.au &&\n                !txn.apar.am &&\n                !txn.apar.dc) {\n                delete txn.apar;\n            }\n            else {\n                if (!txn.apar.t)\n                    delete txn.apar.t;\n                if (!txn.apar.dc)\n                    delete txn.apar.dc;\n                if (!txn.apar.un)\n                    delete txn.apar.un;\n                if (!txn.apar.an)\n                    delete txn.apar.an;\n                if (!txn.apar.df)\n                    delete txn.apar.df;\n                if (!txn.apar.m)\n                    delete txn.apar.m;\n                if (!txn.apar.r)\n                    delete txn.apar.r;\n                if (!txn.apar.f)\n                    delete txn.apar.f;\n                if (!txn.apar.c)\n                    delete txn.apar.c;\n                if (!txn.apar.au)\n                    delete txn.apar.au;\n                if (!txn.apar.am)\n                    delete txn.apar.am;\n            }\n            if (txn.grp === undefined)\n                delete txn.grp;\n            return txn;\n        }\n        if (this.type === 'axfer') {\n            // asset transfer, acceptance, revocation, mint, or burn\n            const txn = {\n                aamt: this.amount,\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                arcv: buffer_1.Buffer.from(this.to.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n                xaid: this.assetIndex,\n            };\n            if (this.closeRemainderTo !== undefined)\n                txn.aclose = buffer_1.Buffer.from(this.closeRemainderTo.publicKey);\n            if (this.assetRevocationTarget !== undefined)\n                txn.asnd = buffer_1.Buffer.from(this.assetRevocationTarget.publicKey);\n            // allowed zero values\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.aamt)\n                delete txn.aamt;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            if (!txn.aclose)\n                delete txn.aclose;\n            if (!txn.asnd)\n                delete txn.asnd;\n            if (!txn.rekey)\n                delete txn.rekey;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            return txn;\n        }\n        if (this.type === 'afrz') {\n            // asset freeze or unfreeze\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n                faid: this.assetIndex,\n                afrz: this.freezeState,\n            };\n            if (this.freezeAccount !== undefined)\n                txn.fadd = buffer_1.Buffer.from(this.freezeAccount.publicKey);\n            // allowed zero values\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (!txn.afrz)\n                delete txn.afrz;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            return txn;\n        }\n        if (this.type === 'appl') {\n            // application call of some kind\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                grp: this.group,\n                apid: this.appIndex,\n                apan: this.appOnComplete,\n                apls: {\n                    nui: this.appLocalInts,\n                    nbs: this.appLocalByteSlices,\n                },\n                apgs: {\n                    nui: this.appGlobalInts,\n                    nbs: this.appGlobalByteSlices,\n                },\n                apfa: this.appForeignApps,\n                apas: this.appForeignAssets,\n                apep: this.extraPages,\n                apbx: (0, boxStorage_1.translateBoxReferences)(this.boxes, this.appForeignApps, this.appIndex),\n            };\n            if (this.reKeyTo !== undefined) {\n                txn.rekey = buffer_1.Buffer.from(this.reKeyTo.publicKey);\n            }\n            if (this.appApprovalProgram !== undefined) {\n                txn.apap = buffer_1.Buffer.from(this.appApprovalProgram);\n            }\n            if (this.appClearProgram !== undefined) {\n                txn.apsu = buffer_1.Buffer.from(this.appClearProgram);\n            }\n            if (this.appArgs !== undefined) {\n                txn.apaa = this.appArgs.map((arg) => buffer_1.Buffer.from(arg));\n            }\n            if (this.appAccounts !== undefined) {\n                txn.apat = this.appAccounts.map((decodedAddress) => buffer_1.Buffer.from(decodedAddress.publicKey));\n            }\n            // allowed zero values\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (!txn.apid)\n                delete txn.apid;\n            if (!txn.apls.nui)\n                delete txn.apls.nui;\n            if (!txn.apls.nbs)\n                delete txn.apls.nbs;\n            if (!txn.apls.nui && !txn.apls.nbs)\n                delete txn.apls;\n            if (!txn.apgs.nui)\n                delete txn.apgs.nui;\n            if (!txn.apgs.nbs)\n                delete txn.apgs.nbs;\n            if (!txn.apaa || !txn.apaa.length)\n                delete txn.apaa;\n            if (!txn.apgs.nui && !txn.apgs.nbs)\n                delete txn.apgs;\n            if (!txn.apap)\n                delete txn.apap;\n            if (!txn.apsu)\n                delete txn.apsu;\n            if (!txn.apan)\n                delete txn.apan;\n            if (!txn.apfa || !txn.apfa.length)\n                delete txn.apfa;\n            if (!txn.apas || !txn.apas.length)\n                delete txn.apas;\n            for (const box of txn.apbx) {\n                if (!box.i)\n                    delete box.i;\n                if (!box.n || !box.n.length)\n                    delete box.n;\n            }\n            if (!txn.apbx || !txn.apbx.length)\n                delete txn.apbx;\n            if (!txn.apat || !txn.apat.length)\n                delete txn.apat;\n            if (!txn.apep)\n                delete txn.apep;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            return txn;\n        }\n        if (this.type === 'stpf') {\n            // state proof txn\n            const txn = {\n                fee: this.fee,\n                fv: this.firstRound,\n                lv: this.lastRound,\n                note: buffer_1.Buffer.from(this.note),\n                snd: buffer_1.Buffer.from(this.from.publicKey),\n                type: this.type,\n                gen: this.genesisID,\n                gh: this.genesisHash,\n                lx: buffer_1.Buffer.from(this.lease),\n                sptype: this.stateProofType,\n                spmsg: buffer_1.Buffer.from(this.stateProofMessage),\n                sp: buffer_1.Buffer.from(this.stateProof),\n            };\n            // allowed zero values\n            if (!txn.sptype)\n                delete txn.sptype;\n            if (!txn.note.length)\n                delete txn.note;\n            if (!txn.lx.length)\n                delete txn.lx;\n            if (!txn.amt)\n                delete txn.amt;\n            if (!txn.fee)\n                delete txn.fee;\n            if (!txn.fv)\n                delete txn.fv;\n            if (!txn.gen)\n                delete txn.gen;\n            if (!txn.apid)\n                delete txn.apid;\n            if (!txn.apaa || !txn.apaa.length)\n                delete txn.apaa;\n            if (!txn.apap)\n                delete txn.apap;\n            if (!txn.apsu)\n                delete txn.apsu;\n            if (!txn.apan)\n                delete txn.apan;\n            if (!txn.apfa || !txn.apfa.length)\n                delete txn.apfa;\n            if (!txn.apas || !txn.apas.length)\n                delete txn.apas;\n            if (!txn.apat || !txn.apat.length)\n                delete txn.apat;\n            if (!txn.apep)\n                delete txn.apep;\n            if (txn.grp === undefined)\n                delete txn.grp;\n            return txn;\n        }\n        return undefined;\n    }\n    // eslint-disable-next-line camelcase\n    static from_obj_for_encoding(txnForEnc) {\n        const txn = Object.create(this.prototype);\n        txn.name = 'Transaction';\n        txn.tag = buffer_1.Buffer.from('TX');\n        txn.genesisID = txnForEnc.gen;\n        txn.genesisHash = buffer_1.Buffer.from(txnForEnc.gh);\n        if (!(0, base_1.isTransactionType)(txnForEnc.type)) {\n            throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);\n        }\n        txn.type = txnForEnc.type;\n        txn.fee = txnForEnc.fee;\n        txn.firstRound = txnForEnc.fv;\n        txn.lastRound = txnForEnc.lv;\n        txn.note = new Uint8Array(txnForEnc.note);\n        txn.lease = new Uint8Array(txnForEnc.lx);\n        txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n        if (txnForEnc.grp !== undefined)\n            txn.group = buffer_1.Buffer.from(txnForEnc.grp);\n        if (txnForEnc.rekey !== undefined)\n            txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n        if (txnForEnc.type === 'pay') {\n            txn.amount = txnForEnc.amt;\n            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n            if (txnForEnc.close !== undefined)\n                txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n        }\n        else if (txnForEnc.type === 'keyreg') {\n            if (txnForEnc.votekey !== undefined) {\n                txn.voteKey = buffer_1.Buffer.from(txnForEnc.votekey);\n            }\n            if (txnForEnc.selkey !== undefined) {\n                txn.selectionKey = buffer_1.Buffer.from(txnForEnc.selkey);\n            }\n            if (txnForEnc.sprfkey !== undefined) {\n                txn.stateProofKey = buffer_1.Buffer.from(txnForEnc.sprfkey);\n            }\n            if (txnForEnc.votekd !== undefined) {\n                txn.voteKeyDilution = txnForEnc.votekd;\n            }\n            if (txnForEnc.votefst !== undefined) {\n                txn.voteFirst = txnForEnc.votefst;\n            }\n            if (txnForEnc.votelst !== undefined) {\n                txn.voteLast = txnForEnc.votelst;\n            }\n            if (txnForEnc.nonpart !== undefined) {\n                txn.nonParticipation = txnForEnc.nonpart;\n            }\n        }\n        else if (txnForEnc.type === 'acfg') {\n            // asset creation, or asset reconfigure, or asset destruction\n            if (txnForEnc.caid !== undefined) {\n                txn.assetIndex = txnForEnc.caid;\n            }\n            if (txnForEnc.apar !== undefined) {\n                txn.assetTotal = txnForEnc.apar.t;\n                txn.assetDefaultFrozen = txnForEnc.apar.df;\n                if (txnForEnc.apar.dc !== undefined)\n                    txn.assetDecimals = txnForEnc.apar.dc;\n                if (txnForEnc.apar.m !== undefined)\n                    txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n                if (txnForEnc.apar.r !== undefined)\n                    txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n                if (txnForEnc.apar.f !== undefined)\n                    txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n                if (txnForEnc.apar.c !== undefined)\n                    txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n                if (txnForEnc.apar.un !== undefined)\n                    txn.assetUnitName = txnForEnc.apar.un;\n                if (txnForEnc.apar.an !== undefined)\n                    txn.assetName = txnForEnc.apar.an;\n                if (txnForEnc.apar.au !== undefined)\n                    txn.assetURL = txnForEnc.apar.au;\n                if (txnForEnc.apar.am !== undefined)\n                    txn.assetMetadataHash = txnForEnc.apar.am;\n            }\n        }\n        else if (txnForEnc.type === 'axfer') {\n            // asset transfer, acceptance, revocation, mint, or burn\n            if (txnForEnc.xaid !== undefined) {\n                txn.assetIndex = txnForEnc.xaid;\n            }\n            if (txnForEnc.aamt !== undefined)\n                txn.amount = txnForEnc.aamt;\n            if (txnForEnc.aclose !== undefined) {\n                txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n            }\n            if (txnForEnc.asnd !== undefined) {\n                txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n            }\n            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n        }\n        else if (txnForEnc.type === 'afrz') {\n            if (txnForEnc.afrz !== undefined) {\n                txn.freezeState = txnForEnc.afrz;\n            }\n            if (txnForEnc.faid !== undefined) {\n                txn.assetIndex = txnForEnc.faid;\n            }\n            txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n        }\n        else if (txnForEnc.type === 'appl') {\n            if (txnForEnc.apid !== undefined) {\n                txn.appIndex = txnForEnc.apid;\n            }\n            if (txnForEnc.apan !== undefined) {\n                txn.appOnComplete = txnForEnc.apan;\n            }\n            if (txnForEnc.apls !== undefined) {\n                if (txnForEnc.apls.nui !== undefined)\n                    txn.appLocalInts = txnForEnc.apls.nui;\n                if (txnForEnc.apls.nbs !== undefined)\n                    txn.appLocalByteSlices = txnForEnc.apls.nbs;\n            }\n            if (txnForEnc.apgs !== undefined) {\n                if (txnForEnc.apgs.nui !== undefined)\n                    txn.appGlobalInts = txnForEnc.apgs.nui;\n                if (txnForEnc.apgs.nbs !== undefined)\n                    txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n            }\n            if (txnForEnc.apep !== undefined) {\n                txn.extraPages = txnForEnc.apep;\n            }\n            if (txnForEnc.apap !== undefined) {\n                txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n            }\n            if (txnForEnc.apsu !== undefined) {\n                txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n            }\n            if (txnForEnc.apaa !== undefined) {\n                txn.appArgs = txnForEnc.apaa.map((arg) => new Uint8Array(arg));\n            }\n            if (txnForEnc.apat !== undefined) {\n                txn.appAccounts = txnForEnc.apat.map((addressBytes) => address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));\n            }\n            if (txnForEnc.apfa !== undefined) {\n                txn.appForeignApps = txnForEnc.apfa;\n            }\n            if (txnForEnc.apas !== undefined) {\n                txn.appForeignAssets = txnForEnc.apas;\n            }\n            if (txnForEnc.apbx !== undefined) {\n                txn.boxes = txnForEnc.apbx.map((box) => ({\n                    // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n                    // translate the app index back to 0. If we instead returned the called app ID,\n                    // translateBoxReferences would translate the app index to a nonzero value if the called\n                    // app is also in the foreign app array.\n                    appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\n                    name: box.n,\n                }));\n            }\n        }\n        else if (txnForEnc.type === 'stpf') {\n            if (txnForEnc.sptype !== undefined) {\n                txn.stateProofType = txnForEnc.sptype;\n            }\n            if (txnForEnc.sp !== undefined) {\n                txn.stateProof = txnForEnc.sp;\n            }\n            if (txnForEnc.spmsg !== undefined) {\n                txn.stateProofMessage = txnForEnc.spmsg;\n            }\n        }\n        return txn;\n    }\n    estimateSize() {\n        return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n    }\n    bytesToSign() {\n        const encodedMsg = this.toByte();\n        return buffer_1.Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    }\n    toByte() {\n        return encoding.encode(this.get_obj_for_encoding());\n    }\n    // returns the raw signature\n    rawSignTxn(sk) {\n        const toBeSigned = this.bytesToSign();\n        const sig = nacl.sign(toBeSigned, sk);\n        return buffer_1.Buffer.from(sig);\n    }\n    signTxn(sk) {\n        // construct signed message\n        const sTxn = {\n            sig: this.rawSignTxn(sk),\n            txn: this.get_obj_for_encoding(),\n        };\n        // add AuthAddr if signing with a different key than From indicates\n        const keypair = nacl.keyPairFromSecretKey(sk);\n        const pubKeyFromSk = keypair.publicKey;\n        if (address.encodeAddress(pubKeyFromSk) !==\n            address.encodeAddress(this.from.publicKey)) {\n            sTxn.sgnr = buffer_1.Buffer.from(pubKeyFromSk);\n        }\n        return new Uint8Array(encoding.encode(sTxn));\n    }\n    attachSignature(signerAddr, signature) {\n        if (!nacl.isValidSignatureLength(signature.length)) {\n            throw new Error('Invalid signature length');\n        }\n        const sTxn = {\n            sig: buffer_1.Buffer.from(signature),\n            txn: this.get_obj_for_encoding(),\n        };\n        // add AuthAddr if signing with a different key than From indicates\n        if (signerAddr !== address.encodeAddress(this.from.publicKey)) {\n            const signerPublicKey = address.decodeAddress(signerAddr).publicKey;\n            sTxn.sgnr = buffer_1.Buffer.from(signerPublicKey);\n        }\n        return new Uint8Array(encoding.encode(sTxn));\n    }\n    rawTxID() {\n        const enMsg = this.toByte();\n        const gh = buffer_1.Buffer.from(utils.concatArrays(this.tag, enMsg));\n        return buffer_1.Buffer.from(nacl.genericHash(gh));\n    }\n    txID() {\n        const hash = this.rawTxID();\n        return hi_base32_1.default.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n    }\n    // add a lease to a transaction not yet having\n    // supply feePerByte to increment fee accordingly\n    addLease(lease, feePerByte = 0) {\n        let mutableLease;\n        if (lease !== undefined) {\n            if (lease.constructor !== Uint8Array)\n                throw Error('lease must be a Uint8Array.');\n            if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\n                throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n            mutableLease = new Uint8Array(lease);\n        }\n        else {\n            mutableLease = new Uint8Array(0);\n        }\n        this.lease = mutableLease;\n        if (feePerByte !== 0) {\n            this.fee +=\n                (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH +\n                    ALGORAND_TRANSACTION_LEASE_LENGTH) *\n                    feePerByte;\n        }\n    }\n    // add the rekey-to field to a transaction not yet having it\n    // supply feePerByte to increment fee accordingly\n    addRekey(reKeyTo, feePerByte = 0) {\n        if (reKeyTo !== undefined) {\n            this.reKeyTo = address.decodeAddress(reKeyTo);\n        }\n        if (feePerByte !== 0) {\n            this.fee +=\n                (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH +\n                    ALGORAND_TRANSACTION_ADDRESS_LENGTH) *\n                    feePerByte;\n        }\n    }\n    // build display dict for prettyPrint and toString\n    // eslint-disable-next-line no-underscore-dangle\n    _getDictForDisplay() {\n        const forPrinting = {\n            ...this,\n        };\n        forPrinting.tag = forPrinting.tag.toString();\n        forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n        if (forPrinting.to !== undefined)\n            forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);\n        // things that need fixing:\n        if (forPrinting.freezeAccount !== undefined)\n            forPrinting.freezeAccount = address.encodeAddress(forPrinting.freezeAccount.publicKey);\n        if (forPrinting.closeRemainderTo !== undefined)\n            forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n        if (forPrinting.assetManager !== undefined)\n            forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n        if (forPrinting.assetReserve !== undefined)\n            forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n        if (forPrinting.assetFreeze !== undefined)\n            forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n        if (forPrinting.assetClawback !== undefined)\n            forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n        if (forPrinting.assetRevocationTarget !== undefined)\n            forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n        if (forPrinting.reKeyTo !== undefined)\n            forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n        forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n        return forPrinting;\n    }\n    // pretty print the transaction to console\n    prettyPrint() {\n        // eslint-disable-next-line no-underscore-dangle,no-console\n        console.log(this._getDictForDisplay());\n    }\n    // get string representation\n    toString() {\n        // eslint-disable-next-line no-underscore-dangle\n        return JSON.stringify(this._getDictForDisplay());\n    }\n}\nexports.Transaction = Transaction;\n/**\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\n *\n * Note: this function should only be used to simulate unsigned transactions.\n *\n * @param transactionObject - Transaction object to simulate.\n */\nfunction encodeUnsignedSimulateTransaction(transactionObject) {\n    const objToEncode = {\n        txn: transactionObject.get_obj_for_encoding(),\n    };\n    return encoding.encode(objToEncode);\n}\nexports.encodeUnsignedSimulateTransaction = encodeUnsignedSimulateTransaction;\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject - the completed Transaction object\n */\nfunction encodeUnsignedTransaction(transactionObject) {\n    const objToEncode = transactionObject.get_obj_for_encoding();\n    return encoding.encode(objToEncode);\n}\nexports.encodeUnsignedTransaction = encodeUnsignedTransaction;\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer - the Uint8Array containing a transaction\n */\nfunction decodeUnsignedTransaction(transactionBuffer) {\n    const partlyDecodedObject = encoding.decode(transactionBuffer);\n    return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\nexports.decodeUnsignedTransaction = decodeUnsignedTransaction;\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer - the Uint8Array containing a transaction\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\n */\nfunction decodeSignedTransaction(transactionBuffer) {\n    const stxnDecoded = encoding.decode(transactionBuffer);\n    const stxn = {\n        ...stxnDecoded,\n        txn: Transaction.from_obj_for_encoding(stxnDecoded.txn),\n    };\n    return stxn;\n}\nexports.decodeSignedTransaction = decodeSignedTransaction;\nfunction instantiateTxnIfNeeded(transactionLike) {\n    return transactionLike instanceof Transaction\n        ? transactionLike\n        : new Transaction(transactionLike);\n}\nexports.instantiateTxnIfNeeded = instantiateTxnIfNeeded;\nexports[\"default\"] = Transaction;\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/address.js":
/*!********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/address.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9hZGRyZXNzLmpzPzVjNGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGRyZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/index.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./transactions */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./multisig */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/multisig.js\"), exports);\n__exportStar(__webpack_require__(/*! ./address */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/address.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMseUZBQWdCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQywyRUFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMseUVBQVc7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL3R5cGVzL2luZGV4LmpzPzhiNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvbnNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL211bHRpc2lnXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hZGRyZXNzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js":
/*!************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/intDecoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Configure how integers in JSON response will be decoded.\n */\nvar IntDecoding;\n(function (IntDecoding) {\n    /**\n     * All integers will be decoded as Numbers, meaning any values greater than\n     * Number.MAX_SAFE_INTEGER will lose precision.\n     */\n    IntDecoding[\"DEFAULT\"] = \"default\";\n    /**\n     * All integers will be decoded as Numbers, but if any values are greater than\n     * Number.MAX_SAFE_INTEGER an error will be thrown.\n     */\n    IntDecoding[\"SAFE\"] = \"safe\";\n    /**\n     * Integers will be decoded as Numbers if they are less than or equal to\n     * Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n     */\n    IntDecoding[\"MIXED\"] = \"mixed\";\n    /**\n     * All integers will be decoded as BigInts.\n     */\n    IntDecoding[\"BIGINT\"] = \"bigint\";\n})(IntDecoding || (IntDecoding = {}));\nexports[\"default\"] = IntDecoding;\n//# sourceMappingURL=intDecoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9pbnREZWNvZGluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQyxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9pbnREZWNvZGluZy5qcz8wZjVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDb25maWd1cmUgaG93IGludGVnZXJzIGluIEpTT04gcmVzcG9uc2Ugd2lsbCBiZSBkZWNvZGVkLlxuICovXG52YXIgSW50RGVjb2Rpbmc7XG4oZnVuY3Rpb24gKEludERlY29kaW5nKSB7XG4gICAgLyoqXG4gICAgICogQWxsIGludGVnZXJzIHdpbGwgYmUgZGVjb2RlZCBhcyBOdW1iZXJzLCBtZWFuaW5nIGFueSB2YWx1ZXMgZ3JlYXRlciB0aGFuXG4gICAgICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgd2lsbCBsb3NlIHByZWNpc2lvbi5cbiAgICAgKi9cbiAgICBJbnREZWNvZGluZ1tcIkRFRkFVTFRcIl0gPSBcImRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBBbGwgaW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIE51bWJlcnMsIGJ1dCBpZiBhbnkgdmFsdWVzIGFyZSBncmVhdGVyIHRoYW5cbiAgICAgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgKi9cbiAgICBJbnREZWNvZGluZ1tcIlNBRkVcIl0gPSBcInNhZmVcIjtcbiAgICAvKipcbiAgICAgKiBJbnRlZ2VycyB3aWxsIGJlIGRlY29kZWQgYXMgTnVtYmVycyBpZiB0aGV5IGFyZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgb3RoZXJ3aXNlIHRoZXkgd2lsbCBiZSBkZWNvZGVkIGFzIEJpZ0ludHMuXG4gICAgICovXG4gICAgSW50RGVjb2RpbmdbXCJNSVhFRFwiXSA9IFwibWl4ZWRcIjtcbiAgICAvKipcbiAgICAgKiBBbGwgaW50ZWdlcnMgd2lsbCBiZSBkZWNvZGVkIGFzIEJpZ0ludHMuXG4gICAgICovXG4gICAgSW50RGVjb2RpbmdbXCJCSUdJTlRcIl0gPSBcImJpZ2ludFwiO1xufSkoSW50RGVjb2RpbmcgfHwgKEludERlY29kaW5nID0ge30pKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEludERlY29kaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50RGVjb2RpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/multisig.js":
/*!*********************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/multisig.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=multisig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy9tdWx0aXNpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvdHlwZXMvbXVsdGlzaWcuanM/NmQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpc2lnLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/multisig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/transactions/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OnApplicationComplete = exports.isTransactionType = exports.TransactionType = void 0;\n/**\n * Enum for application transaction types.\n *\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\n */\nvar TransactionType;\n(function (TransactionType) {\n    /**\n     * Payment transaction\n     */\n    TransactionType[\"pay\"] = \"pay\";\n    /**\n     * Key registration transaction\n     */\n    TransactionType[\"keyreg\"] = \"keyreg\";\n    /**\n     * Asset configuration transaction\n     */\n    TransactionType[\"acfg\"] = \"acfg\";\n    /**\n     * Asset transfer transaction\n     */\n    TransactionType[\"axfer\"] = \"axfer\";\n    /**\n     * Asset freeze transaction\n     */\n    TransactionType[\"afrz\"] = \"afrz\";\n    /**\n     * Application transaction\n     */\n    TransactionType[\"appl\"] = \"appl\";\n    /**\n     * State proof transaction\n     */\n    TransactionType[\"stpf\"] = \"stpf\";\n})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));\nfunction isTransactionType(s) {\n    return (s === TransactionType.pay ||\n        s === TransactionType.keyreg ||\n        s === TransactionType.acfg ||\n        s === TransactionType.axfer ||\n        s === TransactionType.afrz ||\n        s === TransactionType.appl ||\n        s === TransactionType.stpf);\n}\nexports.isTransactionType = isTransactionType;\n/**\n * Enums for application transactions on-transaction-complete behavior\n */\nvar OnApplicationComplete;\n(function (OnApplicationComplete) {\n    /**\n     * NoOpOC indicates that an application transaction will simply call its\n     * ApprovalProgram\n     */\n    OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n    /**\n     * OptInOC indicates that an application transaction will allocate some\n     * LocalState for the application in the sender's account\n     */\n    OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n    /**\n     * CloseOutOC indicates that an application transaction will deallocate\n     * some LocalState for the application from the user's account\n     */\n    OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n    /**\n     * ClearStateOC is similar to CloseOutOC, but may never fail. This\n     * allows users to reclaim their minimum balance from an application\n     * they no longer wish to opt in to.\n     */\n    OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n    /**\n     * UpdateApplicationOC indicates that an application transaction will\n     * update the ApprovalProgram and ClearStateProgram for the application\n     */\n    OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n    /**\n     * DeleteApplicationOC indicates that an application transaction will\n     * delete the AppParams for the application from the creator's balance\n     * record\n     */\n    OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete = exports.OnApplicationComplete || (exports.OnApplicationComplete = {}));\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy90cmFuc2FjdGlvbnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyx5QkFBeUIsR0FBRyx1QkFBdUI7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0RBQWdELHVCQUF1QixLQUFLO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNERBQTRELDZCQUE2QixLQUFLO0FBQy9GIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy90cmFuc2FjdGlvbnMvYmFzZS5qcz8xZTRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PbkFwcGxpY2F0aW9uQ29tcGxldGUgPSBleHBvcnRzLmlzVHJhbnNhY3Rpb25UeXBlID0gZXhwb3J0cy5UcmFuc2FjdGlvblR5cGUgPSB2b2lkIDA7XG4vKipcbiAqIEVudW0gZm9yIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHR5cGVzLlxuICpcbiAqIFRoZSBmdWxsIGxpc3QgaXMgYXZhaWxhYmxlIGF0IGh0dHBzOi8vZGV2ZWxvcGVyLmFsZ29yYW5kLm9yZy9kb2NzL3JlZmVyZW5jZS90cmFuc2FjdGlvbnMvXG4gKi9cbnZhciBUcmFuc2FjdGlvblR5cGU7XG4oZnVuY3Rpb24gKFRyYW5zYWN0aW9uVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFBheW1lbnQgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJwYXlcIl0gPSBcInBheVwiO1xuICAgIC8qKlxuICAgICAqIEtleSByZWdpc3RyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJrZXlyZWdcIl0gPSBcImtleXJlZ1wiO1xuICAgIC8qKlxuICAgICAqIEFzc2V0IGNvbmZpZ3VyYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhY2ZnXCJdID0gXCJhY2ZnXCI7XG4gICAgLyoqXG4gICAgICogQXNzZXQgdHJhbnNmZXIgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJheGZlclwiXSA9IFwiYXhmZXJcIjtcbiAgICAvKipcbiAgICAgKiBBc3NldCBmcmVlemUgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhZnJ6XCJdID0gXCJhZnJ6XCI7XG4gICAgLyoqXG4gICAgICogQXBwbGljYXRpb24gdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJhcHBsXCJdID0gXCJhcHBsXCI7XG4gICAgLyoqXG4gICAgICogU3RhdGUgcHJvb2YgdHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBUcmFuc2FjdGlvblR5cGVbXCJzdHBmXCJdID0gXCJzdHBmXCI7XG59KShUcmFuc2FjdGlvblR5cGUgPSBleHBvcnRzLlRyYW5zYWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5UcmFuc2FjdGlvblR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gaXNUcmFuc2FjdGlvblR5cGUocykge1xuICAgIHJldHVybiAocyA9PT0gVHJhbnNhY3Rpb25UeXBlLnBheSB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUua2V5cmVnIHx8XG4gICAgICAgIHMgPT09IFRyYW5zYWN0aW9uVHlwZS5hY2ZnIHx8XG4gICAgICAgIHMgPT09IFRyYW5zYWN0aW9uVHlwZS5heGZlciB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYWZyeiB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuYXBwbCB8fFxuICAgICAgICBzID09PSBUcmFuc2FjdGlvblR5cGUuc3RwZik7XG59XG5leHBvcnRzLmlzVHJhbnNhY3Rpb25UeXBlID0gaXNUcmFuc2FjdGlvblR5cGU7XG4vKipcbiAqIEVudW1zIGZvciBhcHBsaWNhdGlvbiB0cmFuc2FjdGlvbnMgb24tdHJhbnNhY3Rpb24tY29tcGxldGUgYmVoYXZpb3JcbiAqL1xudmFyIE9uQXBwbGljYXRpb25Db21wbGV0ZTtcbihmdW5jdGlvbiAoT25BcHBsaWNhdGlvbkNvbXBsZXRlKSB7XG4gICAgLyoqXG4gICAgICogTm9PcE9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgc2ltcGx5IGNhbGwgaXRzXG4gICAgICogQXBwcm92YWxQcm9ncmFtXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIk5vT3BPQ1wiXSA9IDBdID0gXCJOb09wT0NcIjtcbiAgICAvKipcbiAgICAgKiBPcHRJbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgYWxsb2NhdGUgc29tZVxuICAgICAqIExvY2FsU3RhdGUgZm9yIHRoZSBhcHBsaWNhdGlvbiBpbiB0aGUgc2VuZGVyJ3MgYWNjb3VudFxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJPcHRJbk9DXCJdID0gMV0gPSBcIk9wdEluT0NcIjtcbiAgICAvKipcbiAgICAgKiBDbG9zZU91dE9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGwgZGVhbGxvY2F0ZVxuICAgICAqIHNvbWUgTG9jYWxTdGF0ZSBmb3IgdGhlIGFwcGxpY2F0aW9uIGZyb20gdGhlIHVzZXIncyBhY2NvdW50XG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkNsb3NlT3V0T0NcIl0gPSAyXSA9IFwiQ2xvc2VPdXRPQ1wiO1xuICAgIC8qKlxuICAgICAqIENsZWFyU3RhdGVPQyBpcyBzaW1pbGFyIHRvIENsb3NlT3V0T0MsIGJ1dCBtYXkgbmV2ZXIgZmFpbC4gVGhpc1xuICAgICAqIGFsbG93cyB1c2VycyB0byByZWNsYWltIHRoZWlyIG1pbmltdW0gYmFsYW5jZSBmcm9tIGFuIGFwcGxpY2F0aW9uXG4gICAgICogdGhleSBubyBsb25nZXIgd2lzaCB0byBvcHQgaW4gdG8uXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkNsZWFyU3RhdGVPQ1wiXSA9IDNdID0gXCJDbGVhclN0YXRlT0NcIjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVBcHBsaWNhdGlvbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGxcbiAgICAgKiB1cGRhdGUgdGhlIEFwcHJvdmFsUHJvZ3JhbSBhbmQgQ2xlYXJTdGF0ZVByb2dyYW0gZm9yIHRoZSBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIE9uQXBwbGljYXRpb25Db21wbGV0ZVtPbkFwcGxpY2F0aW9uQ29tcGxldGVbXCJVcGRhdGVBcHBsaWNhdGlvbk9DXCJdID0gNF0gPSBcIlVwZGF0ZUFwcGxpY2F0aW9uT0NcIjtcbiAgICAvKipcbiAgICAgKiBEZWxldGVBcHBsaWNhdGlvbk9DIGluZGljYXRlcyB0aGF0IGFuIGFwcGxpY2F0aW9uIHRyYW5zYWN0aW9uIHdpbGxcbiAgICAgKiBkZWxldGUgdGhlIEFwcFBhcmFtcyBmb3IgdGhlIGFwcGxpY2F0aW9uIGZyb20gdGhlIGNyZWF0b3IncyBiYWxhbmNlXG4gICAgICogcmVjb3JkXG4gICAgICovXG4gICAgT25BcHBsaWNhdGlvbkNvbXBsZXRlW09uQXBwbGljYXRpb25Db21wbGV0ZVtcIkRlbGV0ZUFwcGxpY2F0aW9uT0NcIl0gPSA1XSA9IFwiRGVsZXRlQXBwbGljYXRpb25PQ1wiO1xufSkoT25BcHBsaWNhdGlvbkNvbXBsZXRlID0gZXhwb3J0cy5PbkFwcGxpY2F0aW9uQ29tcGxldGUgfHwgKGV4cG9ydHMuT25BcHBsaWNhdGlvbkNvbXBsZXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/encoded.js":
/*!*********************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/transactions/encoded.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=encoded.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy90cmFuc2FjdGlvbnMvZW5jb2RlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0dXAtbmV4dGpzLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2FsZ29zZGsvZGlzdC9janMvdHlwZXMvdHJhbnNhY3Rpb25zL2VuY29kZWQuanM/OTlkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/encoded.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/types/transactions/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionType = void 0;\n// Utilities\nvar base_1 = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/base.js\");\nObject.defineProperty(exports, \"TransactionType\", ({ enumerable: true, get: function () { return base_1.TransactionType; } }));\n__exportStar(__webpack_require__(/*! ./encoded */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/encoded.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy90eXBlcy90cmFuc2FjdGlvbnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLGdGQUFRO0FBQzdCLG1EQUFrRCxFQUFFLHFDQUFxQyxrQ0FBa0MsRUFBQztBQUM1SCxhQUFhLG1CQUFPLENBQUMsc0ZBQVc7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFydHVwLW5leHRqcy10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9hbGdvc2RrL2Rpc3QvY2pzL3R5cGVzL3RyYW5zYWN0aW9ucy9pbmRleC5qcz8yYjZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRyYW5zYWN0aW9uVHlwZSA9IHZvaWQgMDtcbi8vIFV0aWxpdGllc1xudmFyIGJhc2VfMSA9IHJlcXVpcmUoXCIuL2Jhc2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFuc2FjdGlvblR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJhc2VfMS5UcmFuc2FjdGlvblR5cGU7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW5jb2RlZFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/types/transactions/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/utils/utils.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isReactNative = exports.isNode = exports.removeUndefinedProperties = exports.concatArrays = exports.arrayEqual = exports.parseJSON = void 0;\nconst json_bigint_1 = __importDefault(__webpack_require__(/*! json-bigint */ \"(ssr)/./node_modules/json-bigint/index.js\"));\nconst intDecoding_1 = __importDefault(__webpack_require__(/*! ../types/intDecoding */ \"(ssr)/./node_modules/algosdk/dist/cjs/types/intDecoding.js\"));\nconst JSONbig = (0, json_bigint_1.default)({ useNativeBigInt: true, strict: true });\n/**\n * Parse JSON with additional options.\n * @param str - The JSON string to parse.\n * @param options - Options object to configure how integers in\n *   this request's JSON response will be decoded. Use the `intDecoding`\n *   property with one of the following options:\n *\n *   * \"default\": All integers will be decoded as Numbers, meaning any values greater than\n *     Number.MAX_SAFE_INTEGER will lose precision.\n *   * \"safe\": All integers will be decoded as Numbers, but if any values are greater than\n *     Number.MAX_SAFE_INTEGER an error will be thrown.\n *   * \"mixed\": Integers will be decoded as Numbers if they are less than or equal to\n *     Number.MAX_SAFE_INTEGER, otherwise they will be decoded as BigInts.\n *   * \"bigint\": All integers will be decoded as BigInts.\n *\n *   Defaults to \"default\" if not included.\n */\nfunction parseJSON(str, options) {\n    const intDecoding = options && options.intDecoding ? options.intDecoding : intDecoding_1.default.DEFAULT;\n    return JSONbig.parse(str, (_, value) => {\n        if (value != null &&\n            typeof value === 'object' &&\n            Object.getPrototypeOf(value) == null) {\n            // JSONbig.parse objects are created with Object.create(null) and thus have a null prototype\n            // let us remedy that\n            Object.setPrototypeOf(value, Object.prototype);\n        }\n        if (typeof value === 'bigint') {\n            if (intDecoding === 'safe' && value > Number.MAX_SAFE_INTEGER) {\n                throw new Error(`Integer exceeds maximum safe integer: ${value.toString()}. Try parsing with a different intDecoding option.`);\n            }\n            if (intDecoding === 'bigint' ||\n                (intDecoding === 'mixed' && value > Number.MAX_SAFE_INTEGER)) {\n                return value;\n            }\n            // JSONbig.parse converts number to BigInts if they are >= 10**15. This is smaller than\n            // Number.MAX_SAFE_INTEGER, so we can convert some BigInts back to normal numbers.\n            return Number(value);\n        }\n        if (typeof value === 'number') {\n            if (intDecoding === 'bigint' && Number.isInteger(value)) {\n                return BigInt(value);\n            }\n        }\n        return value;\n    });\n}\nexports.parseJSON = parseJSON;\n/**\n * ArrayEqual takes two arrays and return true if equal, false otherwise\n */\nfunction arrayEqual(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    return Array.from(a).every((val, i) => val === b[i]);\n}\nexports.arrayEqual = arrayEqual;\n/**\n * ConcatArrays takes n number arrays and returns a joint Uint8Array\n * @param arrs - An arbitrary number of n array-like number list arguments\n * @returns [a,b]\n */\nfunction concatArrays(...arrs) {\n    const size = arrs.reduce((sum, arr) => sum + arr.length, 0);\n    const c = new Uint8Array(size);\n    let offset = 0;\n    for (let i = 0; i < arrs.length; i++) {\n        c.set(arrs[i], offset);\n        offset += arrs[i].length;\n    }\n    return c;\n}\nexports.concatArrays = concatArrays;\n/**\n * Remove undefined properties from an object\n * @param obj - An object, preferably one with some undefined properties\n * @returns A copy of the object with undefined properties removed\n */\nfunction removeUndefinedProperties(obj) {\n    const mutableCopy = { ...obj };\n    Object.keys(mutableCopy).forEach((key) => {\n        if (typeof mutableCopy[key] === 'undefined')\n            delete mutableCopy[key];\n    });\n    return mutableCopy;\n}\nexports.removeUndefinedProperties = removeUndefinedProperties;\n/**\n * Check whether the environment is Node.js (as opposed to the browser)\n * @returns True if Node.js environment, false otherwise\n */\nfunction isNode() {\n    return (\n    // @ts-ignore\n    typeof process === 'object' &&\n        // @ts-ignore\n        typeof process.versions === 'object' &&\n        // @ts-ignore\n        typeof process.versions.node !== 'undefined');\n}\nexports.isNode = isNode;\n/**\n * Check whether the environment is ReactNative\n * @returns True if ReactNative, false otherwise\n */\nfunction isReactNative() {\n    const { navigator } = globalThis;\n    if (typeof navigator === 'object' && navigator.product === 'ReactNative') {\n        return true;\n    }\n    return false;\n}\nexports.isReactNative = isReactNative;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/utils/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/algosdk/dist/cjs/wait.js":
/*!***********************************************!*\
  !*** ./node_modules/algosdk/dist/cjs/wait.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.waitForConfirmation = void 0;\n/**\n * Wait until a transaction has been confirmed or rejected by the network, or\n * until 'waitRounds' number of rounds have passed.\n * @param client - An Algodv2 client\n * @param txid - The ID of the transaction to wait for.\n * @param waitRounds - The maximum number of rounds to wait for.\n * @returns A promise that, upon success, will resolve to the output of the\n *   `pendingTransactionInformation` call for the confirmed transaction.\n */\nasync function waitForConfirmation(client, txid, waitRounds) {\n    // Wait until the transaction is confirmed or rejected, or until 'waitRounds'\n    // number of rounds have passed.\n    const status = await client.status().do();\n    if (typeof status === 'undefined') {\n        throw new Error('Unable to get node status');\n    }\n    const startRound = status['last-round'] + 1;\n    let currentRound = startRound;\n    /* eslint-disable no-await-in-loop */\n    while (currentRound < startRound + waitRounds) {\n        let poolError = false;\n        try {\n            const pendingInfo = await client.pendingTransactionInformation(txid).do();\n            if (pendingInfo['confirmed-round']) {\n                // Got the completed Transaction\n                return pendingInfo;\n            }\n            if (pendingInfo['pool-error']) {\n                // If there was a pool error, then the transaction has been rejected\n                poolError = true;\n                throw new Error(`Transaction Rejected: ${pendingInfo['pool-error']}`);\n            }\n        }\n        catch (err) {\n            // Ignore errors from PendingTransactionInformation, since it may return 404 if the algod\n            // instance is behind a load balancer and the request goes to a different algod than the\n            // one we submitted the transaction to\n            if (poolError) {\n                // Rethrow error only if it's because the transaction was rejected\n                throw err;\n            }\n        }\n        await client.statusAfterBlock(currentRound).do();\n        currentRound += 1;\n    }\n    /* eslint-enable no-await-in-loop */\n    throw new Error(`Transaction not confirmed after ${waitRounds} rounds`);\n}\nexports.waitForConfirmation = waitForConfirmation;\n//# sourceMappingURL=wait.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy93YWl0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsMEJBQTBCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxZQUFZO0FBQ25FO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcnR1cC1uZXh0anMtdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvYWxnb3Nkay9kaXN0L2Nqcy93YWl0LmpzP2Q5ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndhaXRGb3JDb25maXJtYXRpb24gPSB2b2lkIDA7XG4vKipcbiAqIFdhaXQgdW50aWwgYSB0cmFuc2FjdGlvbiBoYXMgYmVlbiBjb25maXJtZWQgb3IgcmVqZWN0ZWQgYnkgdGhlIG5ldHdvcmssIG9yXG4gKiB1bnRpbCAnd2FpdFJvdW5kcycgbnVtYmVyIG9mIHJvdW5kcyBoYXZlIHBhc3NlZC5cbiAqIEBwYXJhbSBjbGllbnQgLSBBbiBBbGdvZHYyIGNsaWVudFxuICogQHBhcmFtIHR4aWQgLSBUaGUgSUQgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIHdhaXQgZm9yLlxuICogQHBhcmFtIHdhaXRSb3VuZHMgLSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygcm91bmRzIHRvIHdhaXQgZm9yLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQsIHVwb24gc3VjY2Vzcywgd2lsbCByZXNvbHZlIHRvIHRoZSBvdXRwdXQgb2YgdGhlXG4gKiAgIGBwZW5kaW5nVHJhbnNhY3Rpb25JbmZvcm1hdGlvbmAgY2FsbCBmb3IgdGhlIGNvbmZpcm1lZCB0cmFuc2FjdGlvbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gd2FpdEZvckNvbmZpcm1hdGlvbihjbGllbnQsIHR4aWQsIHdhaXRSb3VuZHMpIHtcbiAgICAvLyBXYWl0IHVudGlsIHRoZSB0cmFuc2FjdGlvbiBpcyBjb25maXJtZWQgb3IgcmVqZWN0ZWQsIG9yIHVudGlsICd3YWl0Um91bmRzJ1xuICAgIC8vIG51bWJlciBvZiByb3VuZHMgaGF2ZSBwYXNzZWQuXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgY2xpZW50LnN0YXR1cygpLmRvKCk7XG4gICAgaWYgKHR5cGVvZiBzdGF0dXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdldCBub2RlIHN0YXR1cycpO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFJvdW5kID0gc3RhdHVzWydsYXN0LXJvdW5kJ10gKyAxO1xuICAgIGxldCBjdXJyZW50Um91bmQgPSBzdGFydFJvdW5kO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbiAgICB3aGlsZSAoY3VycmVudFJvdW5kIDwgc3RhcnRSb3VuZCArIHdhaXRSb3VuZHMpIHtcbiAgICAgICAgbGV0IHBvb2xFcnJvciA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGVuZGluZ0luZm8gPSBhd2FpdCBjbGllbnQucGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24odHhpZCkuZG8oKTtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nSW5mb1snY29uZmlybWVkLXJvdW5kJ10pIHtcbiAgICAgICAgICAgICAgICAvLyBHb3QgdGhlIGNvbXBsZXRlZCBUcmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nSW5mbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwZW5kaW5nSW5mb1sncG9vbC1lcnJvciddKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGEgcG9vbCBlcnJvciwgdGhlbiB0aGUgdHJhbnNhY3Rpb24gaGFzIGJlZW4gcmVqZWN0ZWRcbiAgICAgICAgICAgICAgICBwb29sRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHJhbnNhY3Rpb24gUmVqZWN0ZWQ6ICR7cGVuZGluZ0luZm9bJ3Bvb2wtZXJyb3InXX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZXJyb3JzIGZyb20gUGVuZGluZ1RyYW5zYWN0aW9uSW5mb3JtYXRpb24sIHNpbmNlIGl0IG1heSByZXR1cm4gNDA0IGlmIHRoZSBhbGdvZFxuICAgICAgICAgICAgLy8gaW5zdGFuY2UgaXMgYmVoaW5kIGEgbG9hZCBiYWxhbmNlciBhbmQgdGhlIHJlcXVlc3QgZ29lcyB0byBhIGRpZmZlcmVudCBhbGdvZCB0aGFuIHRoZVxuICAgICAgICAgICAgLy8gb25lIHdlIHN1Ym1pdHRlZCB0aGUgdHJhbnNhY3Rpb24gdG9cbiAgICAgICAgICAgIGlmIChwb29sRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXRocm93IGVycm9yIG9ubHkgaWYgaXQncyBiZWNhdXNlIHRoZSB0cmFuc2FjdGlvbiB3YXMgcmVqZWN0ZWRcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgY2xpZW50LnN0YXR1c0FmdGVyQmxvY2soY3VycmVudFJvdW5kKS5kbygpO1xuICAgICAgICBjdXJyZW50Um91bmQgKz0gMTtcbiAgICB9XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1hd2FpdC1pbi1sb29wICovXG4gICAgdGhyb3cgbmV3IEVycm9yKGBUcmFuc2FjdGlvbiBub3QgY29uZmlybWVkIGFmdGVyICR7d2FpdFJvdW5kc30gcm91bmRzYCk7XG59XG5leHBvcnRzLndhaXRGb3JDb25maXJtYXRpb24gPSB3YWl0Rm9yQ29uZmlybWF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FpdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/algosdk/dist/cjs/wait.js\n");

/***/ })

};
;